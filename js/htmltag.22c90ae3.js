(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["htmltag"],{b36e:function(n,t,e){"use strict";e.r(t);var o=function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("v-container",{staticStyle:{padding:"0"},attrs:{fluid:"","fill-height":"",id:"htmltag","grid-list-md":""}},[e("Blog",{attrs:{items:n.items,time:n.time,title:n.title}},[e("div",{staticClass:"blogcontent"},[e("v-layout",{attrs:{row:"",wrap:""}},[e("v-flex",{attrs:{xs12:""}},[e("v-hover",{scopedSlots:n._u([{key:"default",fn:function(t){var o=t.hover;return e("v-card",{class:"elevation-"+(o?12:2),attrs:{"min-height":"200"}},[e("v-card-title",[e("h3",{attrs:{id:"tag"}},[n._v("自定义列表")])]),e("v-divider"),e("v-card-text",[e("v-layout",{attrs:{row:"",wrap:""}},[e("v-flex",{attrs:{xs12:""}},[e("p",{staticClass:"body-2"},[n._v("下面制作一个自定义的列表，效果如下\n                              "),e("v-btn",{attrs:{flat:"",icon:"",color:"green"},on:{click:n.refreshFrame}},[e("v-icon",[n._v("cached")])],1)],1),e("iframe",{ref:"template",attrs:{width:"100%",height:"300px",src:"template.html",frameborder:"0"}})]),e("v-flex",{attrs:{xs12:""}},[e("p",{staticClass:"body-2"},[n._v("代码如下，具体知识点等细节请看代码中的注释")]),e("v-tabs",{attrs:{color:"light-green darken-1",dark:"","slider-color":"yellow"}},[e("v-tab",{key:"html",attrs:{ripple:""}},[n._v("HTML")]),e("v-tab",{key:"js",attrs:{ripple:""}},[n._v("JAVASCRIPT")]),e("v-tab",{key:"css",attrs:{ripple:""}},[n._v("CSS")]),e("v-tab-item",{key:"html"},[e("v-card",{attrs:{flat:""}},[e("v-card-text",[e("pre",{staticClass:"code"},[n._v(n._s(n.pres[0]))])])],1)],1),e("v-tab-item",{key:"js"},[e("v-card",{attrs:{flat:""}},[e("v-card-text",[e("pre",{staticClass:"code"},[n._v(n._s(n.pres[1]))])])],1)],1),e("v-tab-item",{key:"css"},[e("v-card",{attrs:{flat:""}},[e("v-card-text",[e("pre",{staticClass:"code"},[n._v(n._s(n.pres[2]))])])],1)],1)],1)],1)],1)],1)],1)}}])})],1)],1)],1)])],1)},s=[],l=e("fd3f"),a={components:{Blog:l["a"]},data:function(){return{time:"2019-3-18",title:"自定义Html元素",items:[{title:"自定义列表",target:"#tag"},{divider:!0}],pres:['\n    <template id="popup-info">\n        <style>\n            .wrapper {\n                position: relative;\n                top: 0;\n                left: 0;\n                overflow: hidden;\n            }\n\n            .info {\n                font-size: 12px;\n                width: 120px;\n                display: inline-block;\n                border: 1px solid #ccc;\n                padding: 10px;\n                background: white;\n                border-radius: 2px;\n                opacity: 0;\n                transition: 0.6s all;\n                position: absolute;\n                bottom: 20px;\n                left: 10px;\n            }\n\n            .geometry {\n                width: 20px;\n                height: 20px;\n                background-color: blueviolet;\n                cursor: pointer;\n            }\n\n            .choose {\n                background-color: green;\n            }\n\n            .geometry:hover + .info, .geometry:focus + .info {\n                opacity: 1;\n            }\n\n            .mystar{\n                clip-path: polygon(50% 0, 75% 25%, 100% 25%, 75% 60%, 100% 100%, 50% 75%, 0 100%, 25% 60%, 0 25%, 25% 25%, 50% 0);\n            }\n        </style>\n        <span class="wrapper">\n            <div class="geometry mystar"></div>\n            <span class="info">\n                <slot name="info">默认信息</slot>\n            </span>\n        </span>\n    </template>\n    <ul is="my-ul" name="my-ul">\n        <div class="loading">\n            <svg width="50" height="50" xmlns="http://www.w3.org/2000/svg">\n                <defs>\n                    <symbol id="circle">\n                        <circle cx="25" cy="4" r="4"/>\n                        <circle cx="46" cy="25" r="4"/>\n                        <circle cx="25" cy="46" r="4"/>\n                        <circle cx="4" cy="25" r="4"/>\n                    </symbol>\n                </defs>\n                <g>\n                    <use \n                        xlink:href="#circle" \n                        fill="green">\n                    </use>\n                    <use \n                        xlink:href="#circle" \n                        fill="green"\n                        style="transform-origin: 25px 25px; transform: rotate(45deg);">\n                    </use>\n                    <animateTransform \n                        attributeName="transform"\n                        type="rotate"\n                        from="0 25 25"\n                        to="360 25 25"\n                        dur="3s"\n                        repeatCount="indefinite"\n                    />\n                </g>\n            </svg>\n        </div>\n        <li is="my-li" color="red" name="my-li">list 1</li>\n        <li is="my-li" color="pink" name="my-li">list 2</li>\n        <li is="my-li" color="darkgreen" name="my-li">list 3</li>\n        <li is="my-li" color="green" name="my-li">list 4</li>\n    </ul>\n',"\n    class MyStar extends HTMLElement { // 创建自定义html元素\n        constructor() {\n            super();\n            const shadow = this.attachShadow({mode: 'open'}); // 创建元素的shadow容器，因为此容器只是个容器不做渲染所以叫shadow\n            const template = document.getElementById('popup-info').content; // 返回模板内容\n            shadow.appendChild(template.cloneNode(true));\n            shadow.querySelector(\".geometry\").addEventListener('click', function(e) {\n                shadow.querySelector(\".geometry\").classList.toggle(\"choose\");\n            })\n            \n            // console.log(shadow.host); // 返回shadow容器放在哪个元素中\n\n            // 利用shadowRoot可以获取当前元素所处的shadow容器，进而可以操作其子节点\n            const slot = this.shadowRoot.querySelector('slot'); \n            slot.addEventListener('slotchange', function(e) { // 当插槽插入内容时触发\n                const nodes = slot.assignedNodes({ // 获取Slot元素被替换后的元素，参数表示是否递归显示（可选）\n                    flatten: true\n                });\n                console.log(`Slot元素 \"${slot.name}\" 被替换成 \"${nodes[0].outerHTML}\".`);\n\n                // document.querySelector('[slot=\"info\"]').assignedSlot; 获取与此节点关联的slot插槽\n                // document.querySelector('[slot=\"info\"]').slot; 获取此节点的slot属性值\n\n                // getRootNode方法获取的是当前节点所在的根节点\n                // shadow.querySelector('.wrapper').getRootNode(); 在shadow中用就是shadow，在document中用就是document\n            });\n        }\n    }\n\n    class MyUl extends HTMLUListElement { // 扩展原生的html元素\n        constructor() {\n            super();\n            const styles = {\n                'listStyle': 'none',\n                'padding': '20px',\n                'fontSize': '15px',\n                'fontFamily': 'fantasy',\n                'display': 'inline-block',\n                'width': '200px',\n                'border': '1px dashed #e6d4d4',\n                'maxHeight': '400px'\n            };\n            for(let key in styles) {\n                this.style[key] = styles[key];\n            }\n        }\n    }\n\n    class MyLi extends HTMLLIElement { // 扩展原生的html元素\n        constructor() {\n            super();\n            this.style.color = this.getAttribute('color');\n\n            const star = document.createElement(\"my-star\");\n            star.style.float = \"right\";\n            const span = document.createElement('span');\n            span.setAttribute('slot', 'info');\n            span.textContent = '点击五角星选中此项';\n            star.append(span);\n            this.append(star);\n        }\n    };\n\n    setTimeout(() => {\n        customElements.define('my-star', MyStar);\n        customElements.define('my-ul', MyUl, { extends: 'ul' });\n        customElements.define('my-li', MyLi, { extends: 'li' });\n    }, 3000)\n\n    // customElements.get('my-star') // 获取定义标签的类\n\n    async function init () {\n        const undefinedElements = Array.from(document.body.querySelectorAll(':not(:defined)')); // 获取页面上暂时还未定义的标签\n        // whenDefined 会返回一个promise，如果节点定义了立即resolve\n        const promises = undefinedElements.map(item => customElements.whenDefined(item.getAttribute('name'))); \n        await Promise.all(promises);\n\n        const ul = document.querySelector('ul');\n        ul.removeChild(ul.querySelector('.loading'));\n    }    \n    init();\n","\n    ul{\n        position: relative;\n        top: 0;\n        left: 0;\n    }\n    .loading{\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 250px;\n        height: 140px;\n        background-color: white;\n        z-index: 10;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n"]}},mounted:function(){},methods:{refreshFrame:function(){this.$refs.template.contentWindow.location.reload(!0)}}},r=a,i=(e("e657"),e("2877")),c=e("6544"),d=e.n(c),m=e("8336"),p=e("b0af"),u=e("99d9"),y=e("12b2"),f=e("a523"),h=e("ce7e"),g=e("0e8f"),v=e("ce87"),x=e("132d"),w=e("a722"),b=e("71a3"),k=e("c671"),S=e("fe57"),C=Object(i["a"])(r,o,s,!1,null,null,null);t["default"]=C.exports;d()(C,{VBtn:m["a"],VCard:p["a"],VCardText:u["a"],VCardTitle:y["a"],VContainer:f["a"],VDivider:h["a"],VFlex:g["a"],VHover:v["a"],VIcon:x["a"],VLayout:w["a"],VTab:b["a"],VTabItem:k["a"],VTabs:S["a"]})},caf6:function(n,t,e){},e657:function(n,t,e){"use strict";var o=e("caf6"),s=e.n(o);s.a}}]);
//# sourceMappingURL=htmltag.22c90ae3.js.map