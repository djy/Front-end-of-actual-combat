(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["serviceworker"],{2071:function(e,n,t){"use strict";t.r(n);var i=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("v-container",{staticStyle:{padding:"0"},attrs:{fluid:"","fill-height":"",id:"serviceworker","grid-list-md":""}},[t("Blog",{attrs:{items:e.items,time:e.time,title:e.title}},[t("div",{staticClass:"blogcontent"},[t("v-layout",{attrs:{row:"",wrap:""}},[t("v-flex",{attrs:{sm12:""}},[t("v-hover",{scopedSlots:e._u([{key:"default",fn:function(n){var i=n.hover;return t("v-card",{class:"elevation-"+(i?12:2),attrs:{"min-height":"300"}},[t("v-card-title",[t("h3",{attrs:{id:"ServiceWorker_demo"}},[e._v("serviceWorker使用示例")])]),t("v-divider"),t("v-card-text",[t("p",{staticClass:".body-1"},[t("code",[e._v("serviceworker")]),e._v("是实现pwa的关键核心技术，其中包含一些其他技术"),t("code",[e._v("cache")]),e._v("、"),t("code",[e._v("fetch")]),e._v("、"),t("code",[e._v("notification")]),e._v("、"),t("code",[e._v("client")])]),t("p",{staticClass:".body-1"},[t("code",[e._v("serviceworker")]),e._v("中的推送消息功能"),t("code",[e._v("pushapi")]),e._v("在实际应用中存在很多限制（谷歌服务无法访问等），这里不写此技术")]),t("p",{staticClass:".body-1"},[e._v("下面直接上demo，各种技术融入其中，分别介绍")]),t("v-tabs",{attrs:{color:"light-green darken-1",dark:"","slider-color":"yellow"}},[t("v-tab",{key:"app",attrs:{ripple:""}},[e._v("app.js")]),t("v-tab",{key:"sw",attrs:{ripple:""}},[e._v("sw.js")]),t("v-tab-item",{key:"app"},[t("v-card",{attrs:{flat:""}},[t("v-card-text",[t("pre",{staticClass:"code"},[e._v(e._s(e.pres[0]))])])],1)],1),t("v-tab-item",{key:"sw"},[t("v-card",{attrs:{flat:""}},[t("v-card-text",[t("pre",{staticClass:"code"},[e._v(e._s(e.pres[1]))])])],1)],1)],1)],1)],1)}}])})],1),t("v-flex",{attrs:{sm12:""}},[t("v-hover",{scopedSlots:e._u([{key:"default",fn:function(n){var i=n.hover;return t("v-card",{class:"elevation-"+(i?12:2),attrs:{"min-height":"300"}},[t("v-card-title",[t("h3",{attrs:{id:"ServiceWorker_cache"}},[e._v("cache")])]),t("v-divider"),t("v-card-text",[t("p",{staticClass:".body-1"},[t("code",[e._v("cache")]),e._v("对象可以单独使用用来将文件缓存到浏览器缓存中，一般缓存上限为计算机内存的一半")]),t("p",{staticClass:".body-1"},[t("code",[e._v("cache")]),e._v("对象一般都在sw中使用，sw中的钩子函数有很好的自定义浏览器请求资源的功能，可以在合适的时机缓存，更新，删除"),t("code",[e._v("cache")]),e._v("中保存的文件")]),t("p",{staticClass:".body-1"},[t("code",[e._v("cache")]),e._v("对象的使用在示例已经演示了，这里单独看看"),t("code",[e._v("cache")]),e._v("中的api")]),t("pre",{staticClass:"code"},[e._v(e._s(e.pres[2]))])])],1)}}])})],1),t("v-flex",{attrs:{sm12:""}},[t("v-hover",{scopedSlots:e._u([{key:"default",fn:function(n){var i=n.hover;return t("v-card",{class:"elevation-"+(i?12:2),attrs:{"min-height":"300"}},[t("v-card-title",[t("h3",{attrs:{id:"ServiceWorker_client"}},[e._v("client")])]),t("v-divider"),t("v-card-text",[t("p",{staticClass:".body-1"},[t("code",[e._v("client")]),e._v("的作用主要是来控制客户端的一些行为，和向客户端发送消息的")]),t("pre",{staticClass:"code"},[e._v(e._s(e.pres[3]))])])],1)}}])})],1)],1)],1)])],1)},s=[],c=t("fd3f"),r={components:{Blog:c["a"]},data:function(){return{pres:["\n    const handleNotification = (register) => {\n        // 检查Notification是否可用，Notification用来实现通知用户消息功能\n        if (window.Notification && Notification.permission !== \"granted\") {\n            Notification.requestPermission(function (status) {\n                if (Notification.permission !== status) {\n                    Notification.permission = status;\n                }\n            });\n        }\n\n        const button = document.querySelector(\"#btn\");\n\n        button.addEventListener('click', function () {\n            \n            if (window.Notification && Notification.permission === \"granted\") {\n                // 如果用户允许通知\n                register.showNotification(\n                    \"Hi! \", // 标题\n                    {\n                        body: \"我是通知信息\", \n                        icon: \"./test/xneg.jpg\",    // 通知框的图标\n                        actions: [{                 // 自定义通知框的更多下拉框的子功能\n                            action: 'handle-show',\n                            title: '进入网站'\n                        }],\n                        tag: 'my_notification',     // 唯一标志\n                        renotify: true              // 是否可以重复通知\n                    }\n                );\n            } else if (window.Notification && Notification.permission !== \"denied\") {\n                // 如果用户没有表示是否允许通知，这里再发送一次提示是否允许通知\n                Notification.requestPermission(function (status) {\n                    if (status === \"granted\") {\n                        // 如果用户允许通知\n                        register.showNotification(\n                            \"Hi! \", // 标题\n                            {\n                                body: \"我是通知信息\", \n                                icon: \"./test/xneg.jpg\",\n                                actions: [{\n                                    action: 'handle-show',\n                                    title: '首页'\n                                }],\n                                tag: 'my_notification',\n                                renotify: true\n                            }\n                        );\n                    } else {\n                        // 如果拒绝，用alert弹框提示\n                        alert(\"Hi!\");\n                    }\n                });\n            }\n            else {\n                // 如果拒绝，用alert弹框提示\n                alert(\"Hi!\");\n            }\n        });\n    };\n\n    const handleServiceWorker = () => {\n        if('serviceWorker' in navigator) {\n            navigator.serviceWorker.register(\n                '/test/serviceworker/sw.js',            // 指定serviceWorker的js文件，相对于网站的根目录\n                {\n                    scope: '/test/serviceworker/'       // 指定你需要sw控制的目录\n                }\n            ).then(register => {\n                if(register.installing) {\n                    console.log('正在安装sw');\n                } else if(register.waiting) {\n                    console.log('sw安装成功');\n                } else if(register.active) {\n                    register.active.postMessage({\n                        msg: \"从client中向serviceWorker发送消息\"\n                    });\n                    console.log('sw已经激活');\n                }\n\n                handleNotification(register);\n            }).catch(err => {\n                console.log('注册失败', err);\n            })\n        \n            navigator.serviceWorker.addEventListener('message', e => {\n                // 接受serviceworker发送过来的消息\n                console.log(e.data.msg, e.data.url);\n            });\n        }\n    };\n\n\n    window.onload = function() {\n        handleServiceWorker();\n    }\n    ","\n    // 更新缓存版本，新版本的cache会自动安装并且进入waiting状态\n    // 当关闭页面重新打开页面，才会激活新版本的cache和触发activate函数\n    // 如果需要修改版本马上看到效果，就需要在install事件中使用skipWaiting跳过等待，并且在activate中使用claim通知客户端更新\n    const cacheVersion = 'v1'; \n\n    const cacheList = [ // 指定要缓存资源的路径，相对于根目录\n        './test/tiles.jpg',\n        './test/xneg.jpg',\n    ];\n\n    const noCacheList = [ // 指定不需要缓存资源的路径\n        \"http://localhost:8002/test/serviceworker/app.js\"\n    ]\n\n    const updateCache = (request) => {\n        return fetch(request).then(response => {\n            return caches.open(cacheVersion).then(cache => {\n                if(response.ok && noCacheList.indexOf(response.url) === -1){\n                    // 网络中包含所需文件，并且成功获取，则将文件缓存到cache中\n                    cache.put(request, response.clone()); // 必须要调用clone方法\n                }\n                return response;\n            })\n        }).catch(err => {\n            return Promise.reject('网络出错无法更新文件：' + request.url);\n        })\n    }\n\n    // 缓存资源文件\n    self.addEventListener('install', e => {\n        e.waitUntil( // 只用waitUntil中的代码成功的执行，sw才会安装成功，主要用来延长serviceworker各个钩子函数的生命周期\n            caches.open(cacheVersion).then(cache => {\n                return cache.addAll(cacheList);\n            })\n            // .then(() => {\n            //     return self.skipWaiting();\n            // })\n        );\n    })\n\n    self.addEventListener('fetch', e => {\n        if (e.clientId) {\n            clients.get(e.clientId).then(client => {\n                client.postMessage({\n                    msg: \"从serviceWorker中向client发送消息\",\n                    url: e.request.url\n                });\n            })\n        } else {\n            // 无法访问客户端\n        }\n\n        e.respondWith( // 用来拦截浏览器的默认fetch请求资源\n            caches.match(e.request).then(response => {\n                if(response !== undefined) { \n                    // 如果缓存中存在，则从缓存中获取\n                    console.log(\"缓存中存在：\" + e.request.url);\n                    return response;\n                }else{\n                    // 如果缓存中不存在，则从网络中获取，并且添加到缓存中\n                    console.log(\"缓存中没有：\" + e.request.url);\n                    return updateCache(e.request).catch(function (err) {\n                        console.log(err);\n                    });\n                }\n            })\n        );\n    })\n\n    self.addEventListener('activate', e => {\n        e.waitUntil(\n            caches.keys().then((keyList) => {\n                return Promise.all(keyList.map((key) => {\n                    // 删除旧版本cache缓存的内容\n                    if (key !== cacheVersion) {\n                        return caches.delete(key);\n                    }\n                }))\n                // .then(() => {\n                //     return self.clients.claim();\n                // })\n            })\n        );\n    });\n\n    self.addEventListener('message', e => {\n        console.log(e.data.msg);\n    });\n\n    self.addEventListener('notificationclick', e => {\n        // 在showNotification中注册的actions属性可以在通知提示框的更多中展示出来，当用户点击对应的按钮，会触发此函数\n        e.waitUntil(\n            clients.matchAll().then((clientsList) => {\n                let flag = false;\n                clientsList.forEach(client => {\n                    if(!flag && client.url.indexOf('index.html') !== -1) {\n                        // 如果有一个client正是首页，那么我们就直接显示这个页面\n                        flag = true;\n                        client.focus();\n                    }\n                })\n\n                if(!flag) {\n                    // 如果所有的client都不是首页，那么直接打开一个首页的client\n                    clients.openWindow(\"http://localhost:8002/test/serviceworker/index.html\");\n                }\n            })\n        )\n    });\n    ","\n    caches是cache的管理者\n        1. 获取cache对象\n            caches.open(cacheVersion).then(cache => {})\n        \n        2. 判断资源文件是否在缓存中\n            request一般指浏览器发送的request对象实例\n            caches.match(request).then(response => {\n                判断缓存中是否存在请求的资源，response是从缓存中取的资源\n                if (response !== undefined) {\n                    // 资源存在\n                } else {\n                    // 资源不存在\n                }\n            }))\n\n        3. 获取所有的cache版本\n            caches.keys().then((keyList) => { })\n\n        4. 判断是否有指定的版本\n            caches.has(cacheVersion).then(function(boolean) { })\n        \n        5. 删除cache版本\n            caches.delete(cacheVersion).then(() => {}) \n\n    cache是缓存资源的缓存对象\n        1. 将耽搁文件添加到cache缓存中，返回promise\n            add方法会自动的去fetch资源然后调用put方法将资源存到cache中\n            cache.add(request)\n        \n        2. 将文件数组添加到cache缓存中，返回promise\n            cache.addAll(url[])\n       \n        3. 删除某个缓存的文件，返回一个promise\n            cache.delete(request)\n\n        4. 获取已经缓存资源的request对象数组\n            cache.keys().then(function(keys) {\n                console.log(keys);\n            })\n        \n        5. 判断缓存中是否存在请求的资源，response是从缓存中取的资源\n            cache.match(request).then(response => {\n                if (response !== undefined) {\n                    // 资源存在\n                } else {\n                    // 资源不存在\n                }\n            }))\n\n        6. 匹配所有，返回数组\n            cache.matchAll(request).then(function(response) { });\n\n        7. 将一条资源添加到cache中，一般要配合fetch使用，或者你直接使用add方法\n            cache.put(request, response);\n    ",'\n    clients是client的管理者\n        1. 让所有的client打开新的页面，返回一个promise\n            clients.openWindow(url) \n        \n        2. 返回所有的client列表\n            clients.matchAll().then((clientsList) => {})\n        \n        3. 获取指定id的client\n            clients.get(clientId).then(client => {})\n        \n        4. 激活所有clients当前的serviceworker\n            clients.claim()\n\n    client\n        client.postMessage({\n            msg: "我正在从你那里获取资源！"\n        });\n    '],time:"2019-07-12",title:"service-worker",items:[{title:"serviceWorker使用示例",target:"#ServiceWorker_demo"},{divider:!0},{title:"cache",target:"#ServiceWorker_cache"},{divider:!0},{title:"client",target:"#ServiceWorker_client"}]}},mounted:function(){},methods:{}},a=r,o=(t("cda8"),t("2877")),l=t("6544"),d=t.n(l),h=t("b0af"),v=t("99d9"),f=t("12b2"),u=t("a523"),p=t("ce7e"),g=t("0e8f"),m=t("ce87"),k=t("a722"),w=t("71a3"),_=t("c671"),y=t("fe57"),b=Object(o["a"])(a,i,s,!1,null,null,null);n["default"]=b.exports;d()(b,{VCard:h["a"],VCardText:v["a"],VCardTitle:f["a"],VContainer:u["a"],VDivider:p["a"],VFlex:g["a"],VHover:m["a"],VLayout:k["a"],VTab:w["a"],VTabItem:_["a"],VTabs:y["a"]})},cda8:function(e,n,t){"use strict";var i=t("dfda"),s=t.n(i);s.a},dfda:function(e,n,t){}}]);
//# sourceMappingURL=serviceworker.46818688.js.map