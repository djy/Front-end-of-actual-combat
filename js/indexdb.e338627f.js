(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["indexdb"],{"390a":function(n,e,t){"use strict";var o=t("5545"),s=t.n(o);s.a},"4e49":function(n,e,t){},5545:function(n,e,t){},"695d":function(n,e,t){"use strict";var o=t("8f13"),s=t.n(o);s.a},"8f13":function(n,e,t){},ce87:function(n,e,t){"use strict";var o=t("163b"),s=t("98a1"),a=t("58df"),r=t("d9bd");e["a"]=Object(a["a"])(o["a"],s["a"]).extend({name:"v-hover",props:{disabled:{type:Boolean,default:!1},value:{type:Boolean,default:void 0}},methods:{onMouseEnter:function(){this.runDelay("open")},onMouseLeave:function(){this.runDelay("close")}},render:function(){if(!this.$scopedSlots.default&&void 0===this.value)return Object(r["b"])("v-hover is missing a default scopedSlot or bound value",this),null;var n=void 0;return this.$scopedSlots.default?n=this.$scopedSlots.default({hover:this.isActive}):this.$slots.default&&1===this.$slots.default.length&&(n=this.$slots.default[0]),Array.isArray(n)&&1===n.length&&(n=n[0]),n&&!Array.isArray(n)&&n.tag?(this.disabled||(n.data=n.data||{},this._g(n.data,{mouseenter:this.onMouseEnter,mouseleave:this.onMouseLeave})),n):(Object(r["b"])("v-hover should only contain a single element",this),n)}})},dd1c:function(n,e,t){"use strict";var o=t("4e49"),s=t.n(o);s.a},df37:function(n,e,t){"use strict";t.r(e);var o=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("v-container",{staticStyle:{padding:"0"},attrs:{fluid:"","fill-height":"",id:"indexdb","grid-list-md":""}},[t("Blog",{attrs:{items:n.items,time:n.time,title:n.title}},[t("div",{staticClass:"blogcontent"},[t("v-layout",{attrs:{row:"",wrap:""}},[t("v-flex",{attrs:{sm12:""}},[t("v-hover",{scopedSlots:n._u([{key:"default",fn:function(e){var o=e.hover;return t("v-card",{class:"elevation-"+(o?12:2),attrs:{"min-height":"300"}},[t("v-card-title",[t("h3",{attrs:{id:"indexdb_demo"}},[n._v("indexDB应用示例")])]),t("v-divider"),t("v-card-text",[t("p",{staticClass:".body-1"},[n._v("1. "),t("code",[n._v("indexdb")]),n._v("是浏览器端的数据库，就是超级缩减版的redis，包含的功能只局限在 游标，索引，表，事务")]),t("p",{staticClass:".body-1"},[n._v("2. "),t("code",[n._v("indexdb")]),n._v("名字包含index的目的就是在表明，这个db是通过index来控制的，你可以通过不同的index打开不同的数据库")]),t("p",{staticClass:".body-1"},[n._v("3. 首先看看简单的应用示例")]),t("pre",{staticClass:"code"},[n._v(n._s(n.pres[0]))])])],1)}}])})],1),t("v-flex",{attrs:{sm12:""}},[t("v-hover",{scopedSlots:n._u([{key:"default",fn:function(e){var o=e.hover;return t("v-card",{class:"elevation-"+(o?12:2),attrs:{"min-height":"300"}},[t("v-card-title",[t("h3",{attrs:{id:"indexdb_operation"}},[n._v("indexDB其他操作")])]),t("v-divider"),t("v-card-text",[t("pre",{staticClass:"code"},[n._v(n._s(n.pres[1]))])])],1)}}])})],1),t("v-flex",{attrs:{sm12:""}},[t("v-hover",{scopedSlots:n._u([{key:"default",fn:function(e){var o=e.hover;return t("v-card",{class:"elevation-"+(o?12:2),attrs:{"min-height":"300"}},[t("v-card-title",[t("h3",{attrs:{id:"indexdb_transcation"}},[n._v("事务")])]),t("v-divider"),t("v-card-text",[t("pre",{staticClass:"code"},[n._v(n._s(n.pres[2]))])])],1)}}])})],1),t("v-flex",{attrs:{sm12:""}},[t("v-hover",{scopedSlots:n._u([{key:"default",fn:function(e){var o=e.hover;return t("v-card",{class:"elevation-"+(o?12:2),attrs:{"min-height":"300"}},[t("v-card-title",[t("h3",{attrs:{id:"indexdb_cursor"}},[n._v("游标")])]),t("v-divider"),t("v-card-text",[t("pre",{staticClass:"code"},[n._v(n._s(n.pres[3]))])])],1)}}])})],1),t("v-flex",{attrs:{sm12:""}},[t("v-hover",{scopedSlots:n._u([{key:"default",fn:function(e){var o=e.hover;return t("v-card",{class:"elevation-"+(o?12:2),attrs:{"min-height":"300"}},[t("v-card-title",[t("h3",{attrs:{id:"indexdb_index"}},[n._v("索引")])]),t("v-divider"),t("v-card-text",[t("pre",{staticClass:"code"},[n._v(n._s(n.pres[4]))])])],1)}}])})],1),t("v-flex",{attrs:{sm12:""}},[t("v-hover",{scopedSlots:n._u([{key:"default",fn:function(e){var o=e.hover;return t("v-card",{class:"elevation-"+(o?12:2),attrs:{"min-height":"300"}},[t("v-card-title",[t("h3",{attrs:{id:"indexdb_table"}},[n._v("表")])]),t("v-divider"),t("v-card-text",[t("pre",{staticClass:"code"},[n._v(n._s(n.pres[5]))])])],1)}}])})],1)],1)],1)])],1)},s=[],a=t("fd3f"),r={components:{Blog:a["a"]},data:function(){return{pres:["\n    const students = [ // 要存储的数据\n        { id: 1, name: '小红', age: 10, sex: '女' },\n        { id: 2, name: '小李', age: 17, sex: '男' },\n    ];\n    \n    let db;\n    const req = window.indexedDB.open('mydb', 2); // 根据传入的索引打开一个数据库\n\n    const handleInitDb = () => {\n        // db的一些监听事件\n        db.onerror = function(e) { console.log('数据库出错', e.target.errorCode); }\n\n        db.onabort = function() { console.log('数据库终止', e); };\n\n        db.onclose = function(e) { console.log('数据库意外关闭', e); };\n\n        db.onversionchange = function(e) { console.log('数据库改变', e); };\n        \n        // indexdb中的表示objectStore对象, createObjectStore可以创建一个表\n        const objectStore = db.createObjectStore(\n            \"students\", // 表名\n            { \n                keyPath: \"id\" // 这里定义的keyPath类似主键的作用\n            }\n        );\n        objectStore.createIndex( // 创建索引\n            \"name\", // 索引名\n            \"name\", // 索引的keyPath\n            { \n                unique: false // 是否唯一，如果是唯一的重复的数据无法添加\n            }\n        );\n\n        // 将students数组中的数据添加到db中\n        students.forEach(item => {\n            objectStore.add(item);\n        })\n    };\n\n    const handleDb = function() {\n        // 创建事务，操作表都需要通过事务实现\n        const transaction = db.transaction(['students'], \"readwrite\");\n        // 告诉事务我需要操作哪一个表\n        const objectStore = transaction.objectStore('students');\n\n        // 使用游标遍历数据\n        objectStore.openCursor(\n            null,   // 这里传入的是keyRange对象，keyRange在下一节索引中有讲到\n            \"next\"  // 遍历的方向，表示正序遍历\n        ).onsuccess = function(e) {\n            const cursor = e.target.result;\n\n            if(cursor) {\n                console.log(cursor.value);\n                cursor.continue();\n            }\n        }\n    };\n    \n    req.onsuccess = function(e) {\n        db = e.target.result;\n        \n        // 数据库打开成功，对数据库中的表做相关操作\n        handleDb();\n    };\n\n    req.onupgradeneeded = function(e) {\n        // 新创建数据库，或者更新数据库版本触发此函数\n        db = e.target.result;\n        \n        // 将数据添加到新数据库中\n        handleInitDb();\n    };\n\n    req.onblocked = function() {\n        console.log(\"由于数据库正在使用，数据库版本暂时不能修改\");\n    };\n\n    req.onerror = function(e) {\n        console.log('数据库打开错误', e);\n    };\n    ",'\n    // 获取所有可用数据库的名称和版本号\n    indexedDB.databases().then(databases => {\n        console.log(databases)\n    })\n\n    // 删除数据库\n    const dbDelete = window.indexedDB.deleteDatabase("mydb");\n    dbDelete.onerror = function(e) {\n        console.log("删除数据库失败");\n    };\n    dbDelete.onsuccess = function(e) {\n        console.log("数据库删除成功");\n    };\n\n    db.name     // 获取数据库名称\n    db.version  // 返回数据库版本\n    db.close(); // 关闭数据库连接\n    ',"\n    // 创建事务的几种方式\n    // 传入多个表名\n    const tc = db.transaction(['mytableName']); \n\n    // 传入一个表\n    const tc = db.transaction('mytableName');   \n\n    // 访问所有表\n    const tc = db.transaction(db.objectStoreNames); \n\n    // 指定权限 \n    // readonly只读 \n    // readwrite读写\n    const tc = db.transaction( \n        'mytableName',\n        'readonly' \n    );\n    ","\n    // 使用游标遍历数据\n    const transaction = db.transaction(['students'], \"readwrite\");\n    const objectStore = transaction.objectStore('students');\n\n    // 指定遍历的方向\n    1. next：正序\n    2. nextunique：正序剔除重复值\n    3. prev：逆序\n    4. prevunique：逆序剔除重复值\n\n    objectStore.openCursor(\n        null,\n        \"next\" \n    ).onsuccess = function(e) {\n        const cursor = e.target.result;\n\n        if(cursor) {\n            // cursor.direction 获取游标遍历方式\n            // cursor.key 获取数据的键\n            // cursor.primaryKey 获取数据的主键\n            // cursor.source 获取objectStore\n            // cursor.value 获取存储的数据\n\n            // 删除数据\n            // if(cursor.value.name === '小李'){\n            //     cursor.delete().onsuccess = function() { \n            //         console.log('小李删除了');\n            //     }\n            // }\n\n            // 更新数据\n            // if(cursor.value.name === '小李'){\n            //     const upDateData = cursor.value;\n            //     upDateData.name = \"小张\";\n            //     cursor.update(upDateData).onsuccess = function() { \n            //         console.log('小李更新成小张了');\n            //     }\n            // }\n\n\n            console.log(cursor.value);\n            cursor.continue(); // 等效 cursor.advance(1); advance可以指定大于1的数表示遍历的时候间隔多列\n        }\n    }\n    ","\n    const transaction = db.transaction(['students'], \"readonly\");\n    const objectStore = transaction.objectStore('students');\n\n    // 获取索引\n    const nameIndex = objectStore.index('name'); \n\n    // 索引的一些属性\n    /*\n        1. nameIndex.keyPath 返回索引名\n        2. nameIndex.multiEntry 如果存储的键值是数组类型的数据，multiEntry设置为true就会为数组中的每一项添加一个entry，否则整个数组就是一个entry\n        3. nameIndex.name 返回索引名\n        4. nameIndex.objectStore 返回原来的objectStore\n        5. nameIndex.unique 是否唯一\n    */\n\n    // 索引的一些方法\n    /*\n        1. 获取数据的个数\n            // count方法传递参数表示数据的键名，不传参数表示统计所有\n            nameIndex.count(\n                '小李' \n            ).onsuccess = function(e) { \n                console.log(e.target.result);\n            }\n\n        2. 根据键名获取数据\n            nameIndex.get('小李').onsuccess = function(e) {\n                console.log(e.target.result);\n            }\n\n        3. 当索引不是唯一索引，相同的索引可以映射多个值，getAll表示获取所有值\n            nameIndex.getAll(\n                '小红', // 可选，键名\n                1      // 可选，返回数据条数\n            ).onsuccess = function(e) { \n                console.log(e.target.result);\n            }\n\n        4. 获取索引的所有索引值\n            nameIndex.getAllKeys( \n                '小红',  // 可选，键名\n                1       // 可选，返回数据条数\n            ).onsuccess = function(e) {\n                console.log(e.target.result);\n            }\n\n        5. 获取指定索引值\n            nameIndex.getKey('小红').onsuccess = function(e) {\n                console.log(e.target.result);\n            }\n    */\n\n    // 索引可以直接使用游标来遍历\n    const keyRange = IDBKeyRange.only('小红');\n    // keyRange.includes('小红'); 判断是否包含传入的键\n\n    nameIndex.openCursor(\n        keyRange, \n        \"next\"\n    ).onsuccess = function(e) {\n        const cursor = e.target.result;\n        if(cursor) {\n            console.log(cursor.value);\n            cursor.continue();\n        }\n    }\n    \n    // IDBKeyRange是用来指定游标的遍历范围，当值是数字的时候效果更明显\n    /*\n        1. IDBKeyRange.upperBound(x)            <=x\n        2. IDBKeyRange.upperBound(x, true)      <x\n        3. IDBKeyRange.lowerBound(x)            >=x\n        4. IDBKeyRange.lowerBound(x, true)      >x\n        5. IDBKeyRange.bound(x, y)              x<= <=y\n        6. IDBKeyRange.bound(x, y, true, true)  x< <y\n        7. IDBKeyRange.bound(x, y, true, false) x< <=y\n        8. IDBKeyRange.bound(x, y, false, true) x<= <y\n        9. IDBKeyRange.only(x)                  =x\n    */\n    ",'\n    indexdb中表就是objectStore对象\n\n    获取objectStore名称字符串数组\n\n    1. 创建表\n        只能在onupgradeneeded监听函数中使用createObjectStore\n        db.createObjectStore(\n            "mytableName",      // 表名\n            { \n                // keypath和audoIncrement必须指定一个\n                keyPath: "id", \n                // autoIncrement: true 自增\n            }\n        );\n\n    2. 删除表\n        db.deleteObjectStore("mytableName");\n\n    3. 获取所有表名\n        db.objectStoreNames\n    \n    4. 获取元素\n        get中传入的参数是createObjectStore指定的keyPath的值\n        objectStore.get(1).onsuccess = function(e) {\n            console.log(e.target.result);\n        };\n\n    5. 获取所有\n        objectStore.getAll(\n            1, // 可选，keyPath值\n            1  // 可选，获取数据的个数\n        ).onsuccess = function(e) {\n            console.log(e.target.result);\n        }\n    \n    6. 添加元素\n        objectStore.add({\n            id: 3,\n            name: \'小张\',\n            age: 23,\n            sex: \'女\'\n        }).onsuccess = () => {\n            console.log(\'添加成功\');\n        };\n\n    7. 删除一个元素\n        objectStore.delete(1); // 删除指定的keyPath\n    \n    8. 清空表\n        objectStore.clear().onsuccess = function(e) {\n            console.log(\'表已经清空\');\n        };\n\n    9. 更新数据\n        objectStore.put(\n            {id: 1, name: "小张", age: 10, sex: "女"}, // 要更新的数据\n            \'...\' // 当主键是autoIncrement需要指定主键，否则不要\n        ).onsuccess = function() {\n            console.log(\'更新好了\');\n        };\n\n    10. 获取数据个数\n        objectStore.count(\n            1 // 可选，传的是keyPath指定键的键值\n        ).onsuccess = function(e) {\n            console.log(e.target.result);\n        }\n\n    11. 创建索引\n        只能在onupgradeneeded监听函数中使用createIndex\n        objectStore.createIndex(\n            "name", // 索引名\n            "name", // 索引的keyPath\n            { \n                unique: false, // 是否唯一\n                multiEntry: true, // 键值是数组的话，如果设置为true就会为数组中的每一项添加一个entry，否则整个数组就是一个entry\n            }\n        );\n\n    12. 删除索引\n        objectStore.deleteIndex("name");\n\n    13. 获取所有keyPath值\n        objectStore.getAllKeys(\n            null, // 可选，keyPath值\n            1     // 可选，返回数据条数\n        ).onsuccess = function(e) {\n            console.log(e.target.result);\n        }\n    \n    14. 获取keyPath值\n        objectStore.getKey(1).onsuccess = function(e) {\n            console.log(e.target.result);\n        };\n    \n    15. 获取指定索引，方便用游标遍历\n        const nameIndex = objectStore.index(\'name\'); \n\n    16. 可以对表直接使用游标遍历\n        objectStore.openCursor(\n            null,\n            "next"\n        ).onsuccess = function(e) {\n            const cursor = e.target.result;\n\n            if(cursor) {\n                console.log(cursor.value);\n                cursor.continue();\n            }\n        }\n    '],time:"2019-07-05",title:"indexdb浏览器端的简易数据库",items:[{title:"indexDB应用示例",target:"#indexdb_demo"},{divider:!0},{title:"indexDB其他操作",target:"#indexdb_operation"},{divider:!0},{title:"事务",target:"#indexdb_transcation"},{divider:!0},{title:"游标",target:"#indexdb_cursor"},{divider:!0},{title:"索引",target:"#indexdb_index"},{divider:!0},{title:"表",target:"#indexdb_table"}]}},mounted:function(){},methods:{}},c=r,i=(t("dd1c"),t("2877")),d=t("6544"),l=t.n(d),u=t("b0af"),v=t("99d9"),b=t("12b2"),f=t("a523"),g=t("ce7e"),m=t("0e8f"),x=t("ce87"),y=t("a722"),h=Object(i["a"])(c,o,s,!1,null,null,null);e["default"]=h.exports;l()(h,{VCard:u["a"],VCardText:v["a"],VCardTitle:b["a"],VContainer:f["a"],VDivider:g["a"],VFlex:m["a"],VHover:x["a"],VLayout:y["a"]})},fd3f:function(n,e,t){"use strict";var o=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("v-container",{staticStyle:{padding:"0"},attrs:{fluid:"","fill-height":""}},[t("v-layout",{attrs:{wrap:""}},[t("BlogSubMenu",{attrs:{items:n.items,title:n.title}}),t("v-flex",{attrs:{"xs-12":""}},[t("div",{staticClass:"blogbg"},[t("p",{staticClass:"someword"},[n._v("思绪随时间流逝，逝去的日子不会回来")]),t("div",{staticClass:"msg"},[t("p",[n._v("作者：叶家伟")]),t("p",[n._v("时间："+n._s(n.time))])])]),n._t("default")],2)],1)],1)},s=[],a=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("v-menu",{attrs:{"close-on-content-click":!1,bottom:"",left:"","min-width":"300","max-width":"300","nudge-left":"12","offset-x":"",transition:"slide-y-transition"}},[t("v-btn",{staticClass:"elevation-0",staticStyle:{top:"96px"},attrs:{slot:"activator",color:"grey",dark:"",fab:"",fixed:"",top:""},slot:"activator"},[t("v-icon",{attrs:{dark:"",color:"white"}},[n._v("list")])],1),t("v-card",{staticStyle:{"border-radius":"5px"}},[t("div",{staticClass:"submenuimg"},[t("p",{staticClass:"title"},[n._v("目录")])]),t("v-card-title",{attrs:{"primary-title":""}},[t("div",[t("h3",{staticClass:"headline mb-0"},[n._v(n._s(n.title))])])]),t("v-list",{staticStyle:{"max-height":"300px",overflow:"auto"}},[n._l(n.items,function(e,o){return[e.divider?t("v-divider",{key:o}):t("v-list-tile",{key:e.title+"submenu",attrs:{avatar:""},on:{click:function(t){return n.$vuetify.goTo(e.target,n.options)}}},[t("v-list-tile-content",[t("v-list-tile-title",{domProps:{innerHTML:n._s(e.title)}})],1)],1)]})],2)],1)],1)},r=[],c={props:["items","title"],data:function(){return{options:{duration:300,offset:0,easing:"easeInOutCubic"}}}},i=c,d=(t("390a"),t("2877")),l=t("6544"),u=t.n(l),v=t("8336"),b=t("b0af"),f=t("12b2"),g=t("ce7e"),m=t("132d"),x=t("8860"),y=t("ba95"),h=t("5d23"),p=t("e449"),_=Object(d["a"])(i,a,r,!1,null,null,null),S=_.exports;u()(_,{VBtn:v["a"],VCard:b["a"],VCardTitle:f["a"],VDivider:g["a"],VIcon:m["a"],VList:x["a"],VListTile:y["a"],VListTileContent:h["a"],VListTileTitle:h["b"],VMenu:p["a"]});var j={props:["items","time","title"],components:{BlogSubMenu:S}},D=j,k=(t("695d"),t("a523")),I=t("0e8f"),C=t("a722"),B=Object(d["a"])(D,o,s,!1,null,null,null);e["a"]=B.exports;u()(B,{VContainer:k["a"],VFlex:I["a"],VLayout:C["a"]})}}]);
//# sourceMappingURL=indexdb.e338627f.js.map