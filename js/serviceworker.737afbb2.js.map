{"version":3,"sources":["webpack:///C:/Users/26401/Desktop/learn/blog/origin/src/views/pwa/ServiceWorker.vue?2225","webpack:///src/views/pwa/ServiceWorker.vue","webpack:///C:/Users/26401/Desktop/learn/blog/origin/src/views/pwa/ServiceWorker.vue?7355","webpack:///C:/Users/26401/Desktop/learn/blog/origin/src/views/pwa/ServiceWorker.vue","webpack:///C:/Users/26401/Desktop/learn/blog/origin/src/views/pwa/ServiceWorker.vue?9ee4"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticStyle","padding","attrs","fluid","fill-height","id","grid-list-md","items","time","title","staticClass","row","wrap","sm12","scopedSlots","_u","key","fn","ref","hover","class","min-height","_v","color","dark","slider-color","ripple","flat","_s","pres","staticRenderFns","ServiceWorkervue_type_script_lang_js_","components","Blog","data","target","divider","mounted","methods","pwa_ServiceWorkervue_type_script_lang_js_","component","Object","componentNormalizer","__webpack_exports__","installComponents_default","VCard","VCardText","components_VCard","VCardTitle","VContainer","VDivider","VFlex","VHover","VLayout","VTab","VTabItem","VTabs","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ServiceWorker_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ServiceWorker_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default","n"],"mappings":"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","file":"js/serviceworker.737afbb2.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-container',{staticStyle:{\"padding\":\"0\"},attrs:{\"fluid\":\"\",\"fill-height\":\"\",\"id\":\"serviceworker\",\"grid-list-md\":\"\"}},[_c('Blog',{attrs:{\"items\":_vm.items,\"time\":_vm.time,\"title\":_vm.title}},[_c('div',{staticClass:\"blogcontent\"},[_c('v-layout',{attrs:{\"row\":\"\",\"wrap\":\"\"}},[_c('v-flex',{attrs:{\"sm12\":\"\"}},[_c('v-hover',{scopedSlots:_vm._u([{key:\"default\",fn:function(ref){\nvar hover = ref.hover;\nreturn _c('v-card',{class:(\"elevation-\" + (hover ? 12 : 2)),attrs:{\"min-height\":\"300\"}},[_c('v-card-title',[_c('h3',{attrs:{\"id\":\"ServiceWorker_demo\"}},[_vm._v(\"serviceWorker使用示例\")])]),_c('v-divider'),_c('v-card-text',[_c('p',{staticClass:\".body-1\"},[_c('code',[_vm._v(\"serviceworker\")]),_vm._v(\"是实现pwa的关键核心技术，其中包含一些其他技术\"),_c('code',[_vm._v(\"cache\")]),_vm._v(\"、\"),_c('code',[_vm._v(\"fetch\")]),_vm._v(\"、\"),_c('code',[_vm._v(\"notification\")]),_vm._v(\"、\"),_c('code',[_vm._v(\"client\")])]),_c('p',{staticClass:\".body-1\"},[_c('code',[_vm._v(\"serviceworker\")]),_vm._v(\"中的推送消息功能\"),_c('code',[_vm._v(\"pushapi\")]),_vm._v(\"在实际应用中存在很多限制（谷歌服务无法访问等），这里不写此技术\")]),_c('p',{staticClass:\".body-1\"},[_vm._v(\"下面直接上demo，各种技术融入其中，分别介绍\")]),_c('v-tabs',{attrs:{\"color\":\"light-green darken-1\",\"dark\":\"\",\"slider-color\":\"yellow\"}},[_c('v-tab',{key:\"app\",attrs:{\"ripple\":\"\"}},[_vm._v(\"app.js\")]),_c('v-tab',{key:\"sw\",attrs:{\"ripple\":\"\"}},[_vm._v(\"sw.js\")]),_c('v-tab-item',{key:\"app\"},[_c('v-card',{attrs:{\"flat\":\"\"}},[_c('v-card-text',[_c('pre',{staticClass:\"code\"},[_vm._v(_vm._s(_vm.pres[0]))])])],1)],1),_c('v-tab-item',{key:\"sw\"},[_c('v-card',{attrs:{\"flat\":\"\"}},[_c('v-card-text',[_c('pre',{staticClass:\"code\"},[_vm._v(_vm._s(_vm.pres[1]))])])],1)],1)],1)],1)],1)}}])})],1),_c('v-flex',{attrs:{\"sm12\":\"\"}},[_c('v-hover',{scopedSlots:_vm._u([{key:\"default\",fn:function(ref){\nvar hover = ref.hover;\nreturn _c('v-card',{class:(\"elevation-\" + (hover ? 12 : 2)),attrs:{\"min-height\":\"300\"}},[_c('v-card-title',[_c('h3',{attrs:{\"id\":\"ServiceWorker_cache\"}},[_vm._v(\"cache\")])]),_c('v-divider'),_c('v-card-text',[_c('p',{staticClass:\".body-1\"},[_c('code',[_vm._v(\"cache\")]),_vm._v(\"对象可以单独使用用来将文件缓存到浏览器缓存中，一般缓存上限为计算机内存的一半\")]),_c('p',{staticClass:\".body-1\"},[_c('code',[_vm._v(\"cache\")]),_vm._v(\"对象一般都在sw中使用，sw中的钩子函数有很好的自定义浏览器请求资源的功能，可以在合适的时机缓存，更新，删除\"),_c('code',[_vm._v(\"cache\")]),_vm._v(\"中保存的文件\")]),_c('p',{staticClass:\".body-1\"},[_c('code',[_vm._v(\"cache\")]),_vm._v(\"对象的使用在示例已经演示了，这里单独看看\"),_c('code',[_vm._v(\"cache\")]),_vm._v(\"中的api\")]),_c('pre',{staticClass:\"code\"},[_vm._v(_vm._s(_vm.pres[2]))])])],1)}}])})],1),_c('v-flex',{attrs:{\"sm12\":\"\"}},[_c('v-hover',{scopedSlots:_vm._u([{key:\"default\",fn:function(ref){\nvar hover = ref.hover;\nreturn _c('v-card',{class:(\"elevation-\" + (hover ? 12 : 2)),attrs:{\"min-height\":\"300\"}},[_c('v-card-title',[_c('h3',{attrs:{\"id\":\"ServiceWorker_client\"}},[_vm._v(\"client\")])]),_c('v-divider'),_c('v-card-text',[_c('p',{staticClass:\".body-1\"},[_c('code',[_vm._v(\"client\")]),_vm._v(\"的作用主要是来控制客户端的一些行为，和向客户端发送消息的\")]),_c('pre',{staticClass:\"code\"},[_vm._v(_vm._s(_vm.pres[3]))])])],1)}}])})],1)],1)],1)])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <v-container fluid fill-height style=\"padding:0;\" id=\"serviceworker\" grid-list-md>\r\n    <Blog :items=\"items\" :time=\"time\" :title=\"title\">\r\n      <div class=\"blogcontent\">\r\n        <v-layout row wrap>\r\n          <v-flex sm12>\r\n            <v-hover>\r\n              <v-card\r\n                slot-scope=\"{ hover }\"\r\n                :class=\"`elevation-${hover ? 12 : 2}`\"\r\n                min-height=\"300\"\r\n              >\r\n                <v-card-title>\r\n                  <h3 id=\"ServiceWorker_demo\">serviceWorker使用示例</h3>\r\n                </v-card-title>\r\n                <v-divider></v-divider>\r\n                <v-card-text>\r\n                    <p class=\".body-1\"><code>serviceworker</code>是实现pwa的关键核心技术，其中包含一些其他技术<code>cache</code>、<code>fetch</code>、<code>notification</code>、<code>client</code></p>\r\n                    <p class=\".body-1\"><code>serviceworker</code>中的推送消息功能<code>pushapi</code>在实际应用中存在很多限制（谷歌服务无法访问等），这里不写此技术</p>\r\n                    <p class=\".body-1\">下面直接上demo，各种技术融入其中，分别介绍</p>\r\n\r\n                    <v-tabs color=\"light-green darken-1\" dark slider-color=\"yellow\">\r\n                        <v-tab key=\"app\" ripple>app.js</v-tab>\r\n                        <v-tab key=\"sw\" ripple>sw.js</v-tab>\r\n                        <v-tab-item key=\"app\">\r\n                            <v-card flat>\r\n                                <v-card-text>\r\n                                    <pre class=\"code\">{{pres[0]}}</pre>\r\n                                </v-card-text>\r\n                            </v-card>\r\n                        </v-tab-item>\r\n                        <v-tab-item key=\"sw\">\r\n                            <v-card flat>\r\n                                <v-card-text>\r\n                                    <pre class=\"code\">{{pres[1]}}</pre>\r\n                                </v-card-text>\r\n                            </v-card>\r\n                        </v-tab-item>\r\n                    </v-tabs>\r\n                </v-card-text>\r\n              </v-card>\r\n            </v-hover>\r\n          </v-flex>\r\n          <v-flex sm12>\r\n            <v-hover>\r\n              <v-card\r\n                slot-scope=\"{ hover }\"\r\n                :class=\"`elevation-${hover ? 12 : 2}`\"\r\n                min-height=\"300\"\r\n              >\r\n                <v-card-title>\r\n                  <h3 id=\"ServiceWorker_cache\">cache</h3>\r\n                </v-card-title>\r\n                <v-divider></v-divider>\r\n                <v-card-text>\r\n                    <p class=\".body-1\"><code>cache</code>对象可以单独使用用来将文件缓存到浏览器缓存中，一般缓存上限为计算机内存的一半</p>\r\n                    <p class=\".body-1\"><code>cache</code>对象一般都在sw中使用，sw中的钩子函数有很好的自定义浏览器请求资源的功能，可以在合适的时机缓存，更新，删除<code>cache</code>中保存的文件</p>\r\n                    <p class=\".body-1\"><code>cache</code>对象的使用在示例已经演示了，这里单独看看<code>cache</code>中的api</p>\r\n                    <pre class=\"code\">{{pres[2]}}</pre>\r\n                </v-card-text>\r\n              </v-card>\r\n            </v-hover>\r\n          </v-flex>\r\n          <v-flex sm12>\r\n            <v-hover>\r\n              <v-card\r\n                slot-scope=\"{ hover }\"\r\n                :class=\"`elevation-${hover ? 12 : 2}`\"\r\n                min-height=\"300\"\r\n              >\r\n                <v-card-title>\r\n                  <h3 id=\"ServiceWorker_client\">client</h3>\r\n                </v-card-title>\r\n                <v-divider></v-divider>\r\n                <v-card-text>\r\n                    <p class=\".body-1\"><code>client</code>的作用主要是来控制客户端的一些行为，和向客户端发送消息的</p>\r\n                    <pre class=\"code\">{{pres[3]}}</pre>\r\n                </v-card-text>\r\n              </v-card>\r\n            </v-hover>\r\n          </v-flex>\r\n        </v-layout>\r\n      </div>\r\n    </Blog>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport Blog from \"../Blog.vue\";\r\nexport default {\r\n  components: { Blog },\r\n  data() {\r\n    return {\r\n      pres: \r\n[\r\n    `\r\n    const handleNotification = (register) => {\r\n        // 检查Notification是否可用，Notification用来实现通知用户消息功能\r\n        if (window.Notification && Notification.permission !== \"granted\") {\r\n            Notification.requestPermission(function (status) {\r\n                if (Notification.permission !== status) {\r\n                    Notification.permission = status;\r\n                }\r\n            });\r\n        }\r\n\r\n        const button = document.querySelector(\"#btn\");\r\n\r\n        button.addEventListener('click', function () {\r\n            \r\n            if (window.Notification && Notification.permission === \"granted\") {\r\n                // 如果用户允许通知\r\n                register.showNotification(\r\n                    \"Hi! \", // 标题\r\n                    {\r\n                        body: \"我是通知信息\", \r\n                        icon: \"./test/xneg.jpg\",    // 通知框的图标\r\n                        actions: [{                 // 自定义通知框的更多下拉框的子功能\r\n                            action: 'handle-show',\r\n                            title: '进入网站'\r\n                        }],\r\n                        tag: 'my_notification',     // 唯一标志\r\n                        renotify: true              // 是否可以重复通知\r\n                    }\r\n                );\r\n            } else if (window.Notification && Notification.permission !== \"denied\") {\r\n                // 如果用户没有表示是否允许通知，这里再发送一次提示是否允许通知\r\n                Notification.requestPermission(function (status) {\r\n                    if (status === \"granted\") {\r\n                        // 如果用户允许通知\r\n                        register.showNotification(\r\n                            \"Hi! \", // 标题\r\n                            {\r\n                                body: \"我是通知信息\", \r\n                                icon: \"./test/xneg.jpg\",\r\n                                actions: [{\r\n                                    action: 'handle-show',\r\n                                    title: '首页'\r\n                                }],\r\n                                tag: 'my_notification',\r\n                                renotify: true\r\n                            }\r\n                        );\r\n                    } else {\r\n                        // 如果拒绝，用alert弹框提示\r\n                        alert(\"Hi!\");\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                // 如果拒绝，用alert弹框提示\r\n                alert(\"Hi!\");\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleServiceWorker = () => {\r\n        if('serviceWorker' in navigator) {\r\n            navigator.serviceWorker.register(\r\n                '/test/serviceworker/sw.js',            // 指定serviceWorker的js文件，相对于网站的根目录\r\n                {\r\n                    scope: '/test/serviceworker/'       // 指定你需要sw控制的目录\r\n                }\r\n            ).then(register => {\r\n                if(register.installing) {\r\n                    console.log('正在安装sw');\r\n                } else if(register.waiting) {\r\n                    console.log('sw安装成功');\r\n                } else if(register.active) {\r\n                    register.active.postMessage({\r\n                        msg: \"从client中向serviceWorker发送消息\"\r\n                    });\r\n                    console.log('sw已经激活');\r\n                }\r\n\r\n                handleNotification(register);\r\n            }).catch(err => {\r\n                console.log('注册失败', err);\r\n            })\r\n        \r\n            navigator.serviceWorker.addEventListener('message', e => {\r\n                // 接受serviceworker发送过来的消息\r\n                console.log(e.data.msg, e.data.url);\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    window.onload = function() {\r\n        handleServiceWorker();\r\n    }\r\n    `,\r\n    `\r\n    // 更新缓存版本，新版本的cache会自动安装并且进入waiting状态\r\n    // 当关闭页面重新打开页面，才会激活新版本的cache和触发activate函数\r\n    // 如果需要修改版本马上看到效果，就需要在install事件中使用skipWaiting跳过等待，并且在activate中使用claim通知客户端更新\r\n    const cacheVersion = 'v1'; \r\n\r\n    const cacheList = [ // 指定要缓存资源的路径，相对于根目录\r\n        './test/tiles.jpg',\r\n        './test/xneg.jpg',\r\n    ];\r\n\r\n    const noCacheList = [ // 指定不需要缓存资源的路径\r\n        \"http://localhost:8002/test/serviceworker/app.js\"\r\n    ]\r\n\r\n    const updateCache = (request) => {\r\n        return fetch(request).then(response => {\r\n            return caches.open(cacheVersion).then(cache => {\r\n                if(response.ok && noCacheList.indexOf(response.url) === -1){\r\n                    // 网络中包含所需文件，并且成功获取，则将文件缓存到cache中\r\n                    cache.put(request, response.clone()); // 必须要调用clone方法\r\n                }\r\n                return response;\r\n            })\r\n        }).catch(err => {\r\n            return Promise.reject('网络出错无法更新文件：' + request.url);\r\n        })\r\n    }\r\n\r\n    // 缓存资源文件\r\n    self.addEventListener('install', e => {\r\n        e.waitUntil( // 只用waitUntil中的代码成功的执行，sw才会安装成功，主要用来延长serviceworker各个钩子函数的生命周期\r\n            caches.open(cacheVersion).then(cache => {\r\n                return cache.addAll(cacheList);\r\n            })\r\n            // .then(() => {\r\n            //     return self.skipWaiting();\r\n            // })\r\n        );\r\n    })\r\n\r\n    self.addEventListener('fetch', e => {\r\n        if (e.clientId) {\r\n            clients.get(e.clientId).then(client => {\r\n                client.postMessage({\r\n                    msg: \"从serviceWorker中向client发送消息\",\r\n                    url: e.request.url\r\n                });\r\n            })\r\n        } else {\r\n            // 无法访问客户端\r\n        }\r\n\r\n        e.respondWith( // 用来拦截浏览器的默认fetch请求资源\r\n            caches.match(e.request).then(response => {\r\n                if(response !== undefined) { \r\n                    // 如果缓存中存在，则从缓存中获取\r\n                    console.log(\"缓存中存在：\" + e.request.url);\r\n                    return response;\r\n                }else{\r\n                    // 如果缓存中不存在，则从网络中获取，并且添加到缓存中\r\n                    console.log(\"缓存中没有：\" + e.request.url);\r\n                    return updateCache(e.request).catch(function (err) {\r\n                        console.log(err);\r\n                    });\r\n                }\r\n            })\r\n        );\r\n    })\r\n\r\n    self.addEventListener('activate', e => {\r\n        e.waitUntil(\r\n            caches.keys().then((keyList) => {\r\n                return Promise.all(keyList.map((key) => {\r\n                    // 删除旧版本cache缓存的内容\r\n                    if (key !== cacheVersion) {\r\n                        return caches.delete(key);\r\n                    }\r\n                }))\r\n                // .then(() => {\r\n                //     return self.clients.claim();\r\n                // })\r\n            })\r\n        );\r\n    });\r\n\r\n    self.addEventListener('message', e => {\r\n        console.log(e.data.msg);\r\n    });\r\n\r\n    self.addEventListener('notificationclick', e => {\r\n        // 在showNotification中注册的actions属性可以在通知提示框的更多中展示出来，当用户点击对应的按钮，会触发此函数\r\n        e.waitUntil(\r\n            clients.matchAll().then((clientsList) => {\r\n                let flag = false;\r\n                clientsList.forEach(client => {\r\n                    if(!flag && client.url.indexOf('index.html') !== -1) {\r\n                        // 如果有一个client正是首页，那么我们就直接显示这个页面\r\n                        flag = true;\r\n                        client.focus();\r\n                    }\r\n                })\r\n\r\n                if(!flag) {\r\n                    // 如果所有的client都不是首页，那么直接打开一个首页的client\r\n                    clients.openWindow(\"http://localhost:8002/test/serviceworker/index.html\");\r\n                }\r\n            })\r\n        )\r\n    });\r\n    `,\r\n    `\r\n    caches是cache的管理者\r\n        1. 获取cache对象\r\n            caches.open(cacheVersion).then(cache => {})\r\n        \r\n        2. 判断资源文件是否在缓存中\r\n            request一般指浏览器发送的request对象实例\r\n            caches.match(request).then(response => {\r\n                判断缓存中是否存在请求的资源，response是从缓存中取的资源\r\n                if (response !== undefined) {\r\n                    // 资源存在\r\n                } else {\r\n                    // 资源不存在\r\n                }\r\n            }))\r\n\r\n        3. 获取所有的cache版本\r\n            caches.keys().then((keyList) => { })\r\n\r\n        4. 判断是否有指定的版本\r\n            caches.has(cacheVersion).then(function(boolean) { })\r\n        \r\n        5. 删除cache版本\r\n            caches.delete(cacheVersion).then(() => {}) \r\n\r\n    cache是缓存资源的缓存对象\r\n        1. 将耽搁文件添加到cache缓存中，返回promise\r\n            add方法会自动的去fetch资源然后调用put方法将资源存到cache中\r\n            cache.add(request)\r\n        \r\n        2. 将文件数组添加到cache缓存中，返回promise\r\n            cache.addAll(url[])\r\n       \r\n        3. 删除某个缓存的文件，返回一个promise\r\n            cache.delete(request)\r\n\r\n        4. 获取已经缓存资源的request对象数组\r\n            cache.keys().then(function(keys) {\r\n                console.log(keys);\r\n            })\r\n        \r\n        5. 判断缓存中是否存在请求的资源，response是从缓存中取的资源\r\n            cache.match(request).then(response => {\r\n                if (response !== undefined) {\r\n                    // 资源存在\r\n                } else {\r\n                    // 资源不存在\r\n                }\r\n            }))\r\n\r\n        6. 匹配所有，返回数组\r\n            cache.matchAll(request).then(function(response) { });\r\n\r\n        7. 将一条资源添加到cache中，一般要配合fetch使用，或者你直接使用add方法\r\n            cache.put(request, response);\r\n    `,\r\n    `\r\n    clients是client的管理者\r\n        1. 让所有的client打开新的页面，返回一个promise\r\n            clients.openWindow(url) \r\n        \r\n        2. 返回所有的client列表\r\n            clients.matchAll().then((clientsList) => {})\r\n        \r\n        3. 获取指定id的client\r\n            clients.get(clientId).then(client => {})\r\n        \r\n        4. 激活所有clients当前的serviceworker\r\n            clients.claim()\r\n\r\n    client\r\n        client.postMessage({\r\n            msg: \"我正在从你那里获取资源！\"\r\n        });\r\n    `\r\n],\r\n      time: \"2019-07-12\",\r\n      title: \"service-worker\",\r\n      items: [\r\n        {\r\n          title: \"serviceWorker使用示例\",\r\n          target: \"#ServiceWorker_demo\"\r\n        },\r\n        { divider: true },\r\n        {\r\n          title: \"cache\",\r\n          target: \"#ServiceWorker_cache\"\r\n        },\r\n        { divider: true },\r\n        {\r\n          title: \"client\",\r\n          target: \"#ServiceWorker_client\"\r\n        }\r\n      ],\r\n    };\r\n  },\r\n  mounted() {\r\n  },\r\n  methods: {}\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n#serviceworker {\r\n  .blogcontent {\r\n    padding-top: 20px;\r\n  }\r\n  .code {\r\n    font-size: 12px;\r\n    background-color: #f9f9f5;\r\n    white-space: pre-wrap;\r\n    word-wrap: break-word;\r\n  }\r\n}\r\n</style>\r\n\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ServiceWorker.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ServiceWorker.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ServiceWorker.vue?vue&type=template&id=552fa179&\"\nimport script from \"./ServiceWorker.vue?vue&type=script&lang=js&\"\nexport * from \"./ServiceWorker.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ServiceWorker.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!C:/Users/26401/Desktop/learn/blog/origin/node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VCard } from 'vuetify/lib'\nimport { VCardText } from 'vuetify/lib'\nimport { VCardTitle } from 'vuetify/lib'\nimport { VContainer } from 'vuetify/lib'\nimport { VDivider } from 'vuetify/lib'\nimport { VFlex } from 'vuetify/lib'\nimport { VHover } from 'vuetify/lib'\nimport { VLayout } from 'vuetify/lib'\nimport { VTab } from 'vuetify/lib'\nimport { VTabItem } from 'vuetify/lib'\nimport { VTabs } from 'vuetify/lib'\ninstallComponents(component, {VCard,VCardText,VCardTitle,VContainer,VDivider,VFlex,VHover,VLayout,VTab,VTabItem,VTabs})\n","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ServiceWorker.vue?vue&type=style&index=0&lang=scss&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ServiceWorker.vue?vue&type=style&index=0&lang=scss&\""],"sourceRoot":""}