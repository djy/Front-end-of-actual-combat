(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["Basis"],{"15f2":function(t,e,n){"use strict";var a=n("33fc"),r=n.n(a);r.a},"221f":function(t,e,n){},"274e":function(t,e,n){"use strict";n.r(e);var a=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("v-container",{staticStyle:{padding:"0"},attrs:{fluid:"","fill-height":"",id:"basis","grid-list-md":""}},[n("Blog",{attrs:{items:t.items,time:t.time,title:t.title}},[n("div",{staticClass:"blogcontent"},[n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{xs12:""}},[n("v-hover",{scopedSlots:t._u([{key:"default",fn:function(e){var a=e.hover;return n("v-card",{class:"elevation-"+(a?12:2),attrs:{"min-height":"200"}},[n("v-card-title",[n("h3",{attrs:{id:"rect"}},[t._v("绘制实心矩形")])]),n("v-divider"),n("v-card-text",[n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{xs12:"",sm6:"","pr-1":""}},[n("div",{staticClass:"part"},[n("canvas",{attrs:{id:"canvas-rect",width:"200px",height:"200px"}})])]),n("v-flex",{attrs:{xs12:"",sm6:""}},[n("v-tabs",{attrs:{color:"light-green darken-1",dark:"","slider-color":"yellow"}},[n("v-tab",{key:"explain",attrs:{ripple:""}},[t._v("解释")]),n("v-tab",{key:"html",attrs:{ripple:""}},[t._v("HTML")]),n("v-tab",{key:"js",attrs:{ripple:""}},[t._v("JAVASCRIPT")]),n("v-tab-item",{key:"explain"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("p",[t._v("1. "),n("code",[t._v("fillRect(x, y, width, height)")]),t._v(" 绘制实心矩形")]),n("p",[t._v("2. "),n("code",[t._v("strokeRect(x, y, width, height)")]),t._v(" 绘制空心矩形")]),n("p",[t._v("3. "),n("code",[t._v("clearRect(x, y, width, height)")]),t._v(" 清除一块矩形区域")]),n("p",[t._v("4. "),n("code",[t._v("rect(x, y, width, height)")]),t._v(" 绘制一个矩形路径，需要手动填充")])])],1)],1),n("v-tab-item",{key:"html"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.recthtml)+"\n                                                        ")])])],1)],1),n("v-tab-item",{key:"js"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v(t._s(t.rectjs))])])],1)],1)],1)],1)],1)],1)],1)}}])})],1),n("v-flex",{attrs:{xs12:""}},[n("v-hover",{scopedSlots:t._u([{key:"default",fn:function(e){var a=e.hover;return n("v-card",{class:"elevation-"+(a?12:2),attrs:{"min-height":"200"}},[n("v-card-title",[n("h3",{attrs:{id:"path"}},[t._v("使用路径可以绘制出任意多边形")])]),n("v-divider"),n("v-card-text",[n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{xs12:"",sm6:"","pr-1":""}},[n("div",{staticClass:"part"},[n("canvas",{attrs:{id:"canvas-path",width:"200px",height:"200px"}})])]),n("v-flex",{attrs:{xs12:"",sm6:""}},[n("v-tabs",{attrs:{color:"light-green darken-1",dark:"","slider-color":"yellow"}},[n("v-tab",{key:"explain",attrs:{ripple:""}},[t._v("解释")]),n("v-tab",{key:"html",attrs:{ripple:""}},[t._v("HTML")]),n("v-tab",{key:"js",attrs:{ripple:""}},[t._v("JAVASCRIPT")]),n("v-tab-item",{key:"explain"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("p",[t._v("1. "),n("code",[t._v("beginPath()")]),t._v(" 新建一条路径")]),n("p",[t._v("2. "),n("code",[t._v("moveTo(x, y)")]),t._v(" 将画笔移动到指定位置")]),n("p",[t._v("3. "),n("code",[t._v("lineTo(x, y)")]),t._v(" 绘制一条直线路径")]),n("p",[t._v("4. "),n("code",[t._v("closePath()")]),t._v(" 闭合路径")]),n("p",[t._v("5. "),n("code",[t._v("fill()")]),t._v(" 填充路径生成实心图形，不需要调用"),n("code",[t._v("closePath()")])]),n("p",[t._v("6. "),n("code",[t._v("stroke()")]),t._v(" 描边，生成空心图形，需要调用"),n("code",[t._v("closePath()")]),t._v("闭合路径")])])],1)],1),n("v-tab-item",{key:"html"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.pathhtml)+"\n                                                        ")])])],1)],1),n("v-tab-item",{key:"js"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v(t._s(t.pathjs))])])],1)],1)],1)],1)],1)],1)],1)}}])})],1),n("v-flex",{attrs:{xs12:""}},[n("v-hover",{scopedSlots:t._u([{key:"default",fn:function(e){var a=e.hover;return n("v-card",{class:"elevation-"+(a?12:2),attrs:{"min-height":"200"}},[n("v-card-title",[n("h3",{attrs:{id:"arc"}},[t._v("绘制圆和圆弧")])]),n("v-divider"),n("v-card-text",[n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{xs12:"",sm6:"","pr-1":""}},[n("div",{staticClass:"part"},[n("canvas",{attrs:{id:"canvas-arc",width:"200px",height:"200px"}})])]),n("v-flex",{attrs:{xs12:"",sm6:""}},[n("v-tabs",{attrs:{color:"light-green darken-1",dark:"","slider-color":"yellow"}},[n("v-tab",{key:"explain",attrs:{ripple:""}},[t._v("解释")]),n("v-tab",{key:"html",attrs:{ripple:""}},[t._v("HTML")]),n("v-tab",{key:"js",attrs:{ripple:""}},[t._v("JAVASCRIPT")]),n("v-tab-item",{key:"explain"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("p",[t._v("1. 下面使用的方法全部都需要弧度，弧度和角度转换公式 "),n("code",[t._v("rad=(Math.PI/180)*ang")])]),n("p",[t._v("2. "),n("code",[t._v("arc(x, y, radius, startAngle, endAngle, anticlockwise)")]),t._v(" 绘制一段圆弧，anticlockwise设置为true表示逆时针，默认是顺时针")]),n("p",[t._v("3. "),n("code",[t._v("arcTo(x1, y1, x2, y2, radius)")]),t._v(" 绘制两条线的切线圆弧，x1,y1表示第一条线的结束点第二条线的起始点，x2,y2表示第二条线的结束点，其中第一条线的起始点需要自己手动设置")])])],1)],1),n("v-tab-item",{key:"html"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.archtml)+"\n                                                        ")])])],1)],1),n("v-tab-item",{key:"js"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.arcjs)+"\n                                                        ")])])],1)],1)],1)],1)],1)],1)],1)}}])})],1),n("v-flex",{attrs:{xs12:""}},[n("v-hover",{scopedSlots:t._u([{key:"default",fn:function(e){var a=e.hover;return n("v-card",{class:"elevation-"+(a?12:2),attrs:{"min-height":"200"}},[n("v-card-title",[n("h3",{attrs:{id:"bezier"}},[t._v("贝塞尔曲线")])]),n("v-divider"),n("v-card-text",[n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{xs12:"",sm6:"","pr-1":""}},[n("div",{staticClass:"part"},[n("canvas",{attrs:{id:"canvas-bezier",width:"200px",height:"200px"}})])]),n("v-flex",{attrs:{xs12:"",sm6:""}},[n("v-tabs",{attrs:{color:"light-green darken-1",dark:"","slider-color":"yellow"}},[n("v-tab",{key:"explain",attrs:{ripple:""}},[t._v("解释")]),n("v-tab",{key:"html",attrs:{ripple:""}},[t._v("HTML")]),n("v-tab",{key:"js",attrs:{ripple:""}},[t._v("JAVASCRIPT")]),n("v-tab-item",{key:"explain"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("p",[t._v("1. 贝塞尔曲线是绘制复杂优美线条的核心，关于贝塞尔曲线的知识请自行学习，在绘图的时候记住，曲线会向控制点的方向凹陷")]),n("p",[t._v("2. "),n("code",[t._v("quadraticCurveTo(cp1x, cp1y, x, y)")]),t._v(" 二次贝塞尔曲线，(cp1x,cp1y)表示控制点，(x,y)表示结束点，开始点要手动设置")]),n("p",[t._v("3. "),n("code",[t._v("bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)")]),t._v(" 三次贝塞尔曲线，原理同上")])])],1)],1),n("v-tab-item",{key:"html"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.bezierhtml)+"\n                                                        ")])])],1)],1),n("v-tab-item",{key:"js"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.bezierjs)+"\n                                                        ")])])],1)],1)],1)],1)],1)],1)],1)}}])})],1),n("v-flex",{attrs:{xs12:""}},[n("v-hover",{scopedSlots:t._u([{key:"default",fn:function(e){var a=e.hover;return n("v-card",{class:"elevation-"+(a?12:2),attrs:{"min-height":"200"}},[n("v-card-title",[n("h3",{attrs:{id:"gradients"}},[t._v("利用渐变制作天空中的太阳")])]),n("v-divider"),n("v-card-text",[n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{xs12:"",sm6:"","pr-1":""}},[n("div",{staticClass:"part"},[n("canvas",{attrs:{id:"canvas-gradients",width:"200px",height:"200px"}})])]),n("v-flex",{attrs:{xs12:"",sm6:""}},[n("v-tabs",{attrs:{color:"light-green darken-1",dark:"","slider-color":"yellow"}},[n("v-tab",{key:"explain",attrs:{ripple:""}},[t._v("解释")]),n("v-tab",{key:"html",attrs:{ripple:""}},[t._v("HTML")]),n("v-tab",{key:"js",attrs:{ripple:""}},[t._v("JAVASCRIPT")]),n("v-tab-item",{key:"explain"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("p",[t._v("1. "),n("code",[t._v("createLinearGradient(x1, y1, x2, y2)")]),t._v(" 创建线性渐变，参数表示渐变的起点 (x1,y1) 与终点 (x2,y2)")]),n("p",[t._v("2. "),n("code",[t._v("createRadialGradient(x1, y1, r1, x2, y2, r2)")]),t._v(" 创建径向渐变，前三个参数定义一个以 (x1,y1) 为原点，半径为 r1 的圆，后三个参数同理。")]),n("p",[t._v("3. "),n("code",[t._v("addColorStop(position, color)")]),t._v(" 创建渐变色，第一个参数表示渐变色的位置。")])])],1)],1),n("v-tab-item",{key:"html"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.gradientshtml)+"\n                                                        ")])])],1)],1),n("v-tab-item",{key:"js"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.gradientsjs)+"\n                                                        ")])])],1)],1)],1)],1)],1)],1)],1)}}])})],1),n("v-flex",{attrs:{xs12:""}},[n("v-hover",{scopedSlots:t._u([{key:"default",fn:function(e){var a=e.hover;return n("v-card",{class:"elevation-"+(a?12:2),attrs:{"min-height":"200"}},[n("v-card-title",[n("h3",{attrs:{id:"patterns"}},[t._v("利用模式实现图片平铺")])]),n("v-divider"),n("v-card-text",[n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{xs12:"",sm6:"","pr-1":""}},[n("div",{staticClass:"part"},[n("canvas",{attrs:{id:"canvas-patterns",width:"300px",height:"200px"}})])]),n("v-flex",{attrs:{xs12:"",sm6:""}},[n("v-tabs",{attrs:{color:"light-green darken-1",dark:"","slider-color":"yellow"}},[n("v-tab",{key:"explain",attrs:{ripple:""}},[t._v("解释")]),n("v-tab",{key:"html",attrs:{ripple:""}},[t._v("HTML")]),n("v-tab",{key:"js",attrs:{ripple:""}},[t._v("JAVASCRIPT")]),n("v-tab-item",{key:"explain"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("p",[n("code",[t._v("createPattern(image, type)")]),t._v(" 创建模式，type表示重复的方式，和css的background-repeat参数一样")])])],1)],1),n("v-tab-item",{key:"html"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.patternshtml)+"\n                                                        ")])])],1)],1),n("v-tab-item",{key:"js"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.patternsjs)+"\n                                                        ")])])],1)],1)],1)],1)],1)],1)],1)}}])})],1),n("v-flex",{attrs:{xs12:""}},[n("v-hover",{scopedSlots:t._u([{key:"default",fn:function(e){var a=e.hover;return n("v-card",{class:"elevation-"+(a?12:2),attrs:{"min-height":"200"}},[n("v-card-title",[n("h3",{attrs:{id:"shadow"}},[t._v("创建阴影")])]),n("v-divider"),n("v-card-text",[n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{xs12:"",sm6:"","pr-1":""}},[n("div",{staticClass:"part"},[n("canvas",{attrs:{id:"canvas-shadow",width:"200px",height:"200px"}})])]),n("v-flex",{attrs:{xs12:"",sm6:""}},[n("v-tabs",{attrs:{color:"light-green darken-1",dark:"","slider-color":"yellow"}},[n("v-tab",{key:"explain",attrs:{ripple:""}},[t._v("解释")]),n("v-tab",{key:"html",attrs:{ripple:""}},[t._v("HTML")]),n("v-tab",{key:"js",attrs:{ripple:""}},[t._v("JAVASCRIPT")]),n("v-tab-item",{key:"explain"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("p",[t._v("1. "),n("code",[t._v("shadowOffsetX")]),t._v(" 设置阴影横向便宜")]),n("p",[t._v("2. "),n("code",[t._v("shadowOffsetY")]),t._v(" 设置阴影纵向便宜")]),n("p",[t._v("3. "),n("code",[t._v("shadowBlur")]),t._v(" 设置阴影模糊程度")]),n("p",[t._v("4. "),n("code",[t._v("shadowColor")]),t._v(" 设置阴影颜色")]),n("p",[t._v("5. "),n("code",[t._v('fill("evenodd")')]),t._v(" 设置重叠图形间隔显示")])])],1)],1),n("v-tab-item",{key:"html"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.shadowhtml)+"\n                                                        ")])])],1)],1),n("v-tab-item",{key:"js"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.shadowjs)+"\n                                                        ")])])],1)],1)],1)],1)],1)],1)],1)}}])})],1),n("v-flex",{attrs:{xs12:""}},[n("v-hover",{scopedSlots:t._u([{key:"default",fn:function(e){var a=e.hover;return n("v-card",{class:"elevation-"+(a?12:2),attrs:{"min-height":"200"}},[n("v-card-title",[n("h3",{attrs:{id:"text"}},[t._v("绘制文本")])]),n("v-divider"),n("v-card-text",[n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{xs12:"",sm6:"","pr-1":""}},[n("div",{staticClass:"part"},[n("canvas",{attrs:{id:"canvas-text",width:"200px",height:"200px"}})])]),n("v-flex",{attrs:{xs12:"",sm6:""}},[n("v-tabs",{attrs:{color:"light-green darken-1",dark:"","slider-color":"yellow"}},[n("v-tab",{key:"explain",attrs:{ripple:""}},[t._v("解释")]),n("v-tab",{key:"html",attrs:{ripple:""}},[t._v("HTML")]),n("v-tab",{key:"js",attrs:{ripple:""}},[t._v("JAVASCRIPT")]),n("v-tab-item",{key:"explain"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("p",[t._v("1. "),n("code",[t._v("fillText(text, x, y)")]),t._v(" 绘制实心文本")]),n("p",[t._v("2. "),n("code",[t._v("strokeText(text, x, y)")]),t._v(" 绘制空心文本")])])],1)],1),n("v-tab-item",{key:"html"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.texthtml)+"\n                                                        ")])])],1)],1),n("v-tab-item",{key:"js"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.textjs)+"\n                                                        ")])])],1)],1)],1)],1)],1)],1)],1)}}])})],1),n("v-flex",{attrs:{xs12:""}},[n("v-hover",{scopedSlots:t._u([{key:"default",fn:function(e){var a=e.hover;return n("v-card",{class:"elevation-"+(a?12:2),attrs:{"min-height":"200"}},[n("v-card-title",[n("h3",{attrs:{id:"img"}},[t._v("图片的裁剪和缩放")])]),n("v-divider"),n("v-card-text",[n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{xs12:"",sm6:"","pr-1":""}},[n("div",{staticClass:"part"},[n("canvas",{attrs:{id:"canvas-img",width:"400px",height:"300px"}})])]),n("v-flex",{attrs:{xs12:"",sm6:""}},[n("v-tabs",{attrs:{color:"light-green darken-1",dark:"","slider-color":"yellow"}},[n("v-tab",{key:"explain",attrs:{ripple:""}},[t._v("解释")]),n("v-tab",{key:"html",attrs:{ripple:""}},[t._v("HTML")]),n("v-tab",{key:"js",attrs:{ripple:""}},[t._v("JAVASCRIPT")]),n("v-tab-item",{key:"explain"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("p",[t._v("1. "),n("code",[t._v("drawImage(image, x, y)")]),t._v(" 按照图片的原始大小绘制在 x,y 处")]),n("p",[t._v("2. "),n("code",[t._v("drawImage(image, x, y, width, height)")]),t._v(" 按照指定的宽度和高度缩放图片")]),n("p",[t._v("3. "),n("code",[t._v("drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)")]),t._v(" 带s的参数表示从原始图片指定位置裁剪出指定大小的图，带d的参数表示将裁剪出来的图像渲染到指定大小的区域中")])])],1)],1),n("v-tab-item",{key:"html"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.imghtml)+"\n                                                        ")])])],1)],1),n("v-tab-item",{key:"js"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v("                                                            "+t._s(t.imgjs)+"\n                                                        ")])])],1)],1)],1)],1)],1)],1)],1)}}])})],1)],1)],1)])],1)},r=[],s=(n("6c7b"),n("fd3f")),i=n("61d7"),d=n.n(i),l={components:{Blog:s["a"]},data:function(){return{canvasGradients:null,time:"2018-9-20",title:"canvas基础应用",items:[{title:"绘制实心矩形",target:"#rect"},{divider:!0},{title:"使用路径可以绘制出任意多边形",target:"#path"},{divider:!0},{title:"绘制圆和圆弧",target:"#arc"},{divider:!0},{title:"贝塞尔曲线",target:"#bezier"},{divider:!0},{title:"利用渐变制作天空中的太阳",target:"#gradients"},{divider:!0},{title:"利用模式实现图片平铺",target:"#patterns"},{divider:!0},{title:"创建阴影",target:"#shadow"},{divider:!0},{title:"绘制文本",target:"#text"},{divider:!0},{title:"图片的裁剪和缩放",target:"#img"}],recthtml:'\n            <canvas \n                id="canvas-rect" \n                width="200px" \n                height="200px"\n            >\n            </canvas>\n            ',rectjs:"\n            const canvasRect = document.getElementById('canvas-rect');\n            const ctxR = canvasRect.getContext('2d');\n            ctxR.fillStyle = 'green';\n            ctxR.strokeStyle = 'darkseagreen';\n            // 方式一\n            ctxR.fillRect(10, 10, 80, 50);\n            // 方式二\n            ctxR.rect(10, 70, 80, 50);\n            ctxR.fill();\n            // 方式三\n            ctxR.strokeRect(10, 130, 80, 50);\n            // 方式四\n            ctxR.fillRect(120, 10, 80, 110);\n            ctxR.clearRect(140, 30, 40, 70);\n            ",pathhtml:'\n            <canvas \n                id="canvas-path" \n                width="200px" \n                height="200px"\n            >\n            </canvas>\n            ',pathjs:"\n            const canvasPath = document.getElementById('canvas-path');\n            const ctxP = canvasPath.getContext('2d');\n            ctxP.fillStyle = 'green';\n            ctxP.strokeStyle = 'darkseagreen';\n            // 实心五边形\n            ctxP.beginPath();\n            ctxP.moveTo(30, 10);\n            ctxP.lineTo(80, 10);\n            ctxP.lineTo(90, 30);\n            ctxP.lineTo(80, 50);\n            ctxP.lineTo(30, 50);\n            ctxP.lineTo(20, 30);\n            ctxP.fill();\n            // 空心五边形\n            ctxP.beginPath();\n            ctxP.moveTo(30, 70);\n            ctxP.lineTo(80, 70);\n            ctxP.lineTo(90, 90);\n            ctxP.lineTo(80, 110);\n            ctxP.lineTo(30, 110);\n            ctxP.lineTo(20, 90);\n            ctxP.closePath();\n            ctxP.stroke();\n            ",archtml:'\n            <canvas \n                id="canvas-arc" \n                width="200px" \n                height="200px"\n            >\n            </canvas>\n            ',arcjs:"\n            const canvasArc = document.getElementById('canvas-arc');\n            const ctxA = canvasArc.getContext('2d');\n            ctxA.fillStyle = 'green';\n            ctxA.strokeStyle = 'darkseagreen';\n\n            // 绘制圆\n            ctxA.beginPath();\n            ctxA.arc(50, 50, 40, 0, (Math.PI/180)*360, false);\n            ctxA.fill();\n\n            // 绘制圆切片\n            ctxA.beginPath();\n            ctxA.arc(50, 140, 40, 0, (Math.PI/180)*120, true);\n            ctxA.fill();\n\n            // 绘制圆角\n            ctxA.beginPath();\n            ctxA.moveTo(190, 10);\n            ctxA.arcTo(110, 10, 110, 70, 30);\n            ctxA.lineTo(110, 70);\n            ctxA.stroke();\n            ",bezierhtml:'\n            <canvas \n                id="canvas-bezier" \n                width="200px" \n                height="200px"\n            >\n            </canvas>\n            ',bezierjs:"\n            const canvasBezier= document.getElementById('canvas-bezier');\n            const ctxB = canvasBezier.getContext('2d');\n            ctxB.fillStyle = 'green';\n            ctxB.strokeStyle = 'darkseagreen';\n\n            // 二次贝塞尔曲线\n            ctxB.beginPath();\n            ctxB.moveTo(30, 10);\n            ctxB.quadraticCurveTo(50, 20, 30, 30);\n            ctxB.quadraticCurveTo(10, 20, 30, 10);\n            ctxB.moveTo(30, 30);\n            ctxB.quadraticCurveTo(70, 50, 30, 70);\n            ctxB.quadraticCurveTo(-10, 50, 30, 30);\n            ctxB.stroke();\n\n            // 三次贝塞尔曲线\n            ctxB.beginPath();\n            ctxB.moveTo(10, 100);\n            ctxB.bezierCurveTo(30, 80, 70, 120, 100, 100);\n            ctxB.stroke();\n            ",gradientshtml:'\n            <canvas \n                id="canvas-gradients" \n                width="200px" \n                height="200px"\n            >\n            </canvas>\n            ',gradientsjs:"\n            const canvasGradients= document.getElementById('canvas-gradients');\n            const ctxG = canvasGradients.getContext('2d');\n            // 天空和草地\n            const sky = ctxG.createLinearGradient(10, 10, 10, 210);\n            sky.addColorStop(0, 'skyblue');\n            sky.addColorStop(0.4, 'skyblue');\n            sky.addColorStop(0.6, '#c8e3ef');\n            sky.addColorStop(0.7, '#f6f7f7');\n            sky.addColorStop(0.8, '#bff1b3');\n            sky.addColorStop(1, '#26C000');\n            ctxG.fillStyle = sky;\n            ctxG.rect(10, 10, 200, 200);\n            ctxG.fill();\n\n            // 太阳\n            ctxG.beginPath();\n            const sun = ctxG.createRadialGradient(100, 50, 5, 100, 50, 20);\n            sun.addColorStop(0, '#fff');\n            sun.addColorStop(1, 'skyblue');\n            ctxG.arc(100, 50, 20, 0, (Math.PI/180)*360, false);\n            ctxG.fillStyle = sun;\n            ctxG.fill();\n            ",patternshtml:'\n            <canvas \n                id="canvas-patterns" \n                width="300px" \n                height="200px"\n            >\n            </canvas>\n            ',patternsjs:"\n            const canvasPatterns= document.getElementById('canvas-patterns');\n            const ctxP = canvasPatterns.getContext('2d');\n            const img = new Image();\n            img.src = roadurl;\n            img.onload = function() {\n                ctxP.fillStyle = ctxP.createPattern(img, 'repeat');\n                ctxP.fillRect(10, 10, 300, 200);\n            }\n            ",shadowhtml:'\n            <canvas \n                id="canvas-shadow" \n                width="300px" \n                height="200px"\n            >\n            </canvas>\n            ',shadowjs:"\n            const canvasShadow= document.getElementById('canvas-shadow');\n            const ctxS = canvasShadow.getContext('2d');\n            ctxS.fillStyle = 'green';\n\n            ctxS.shadowOffsetX = 3;\n            ctxS.shadowOffsetY = 3;\n            ctxS.shadowBlur = 5;\n            ctxS.shadowColor = \"rgba(0, 0, 0, 0.5)\";\n            ctxS.fillStyle = 'green';\n            ctxS.beginPath(); \n            ctxS.arc(50, 50, 30, 0, Math.PI*2, true);\n            ctxS.arc(50, 50, 20, 0, Math.PI*2, true);\n            ctxS.arc(50, 50, 10, 0, Math.PI*2, true);\n            ctxS.fill(\"evenodd\");\n            ",texthtml:'\n            <canvas \n                id="canvas-text" \n                width="200px" \n                height="200px"\n            >\n            </canvas>\n            ',textjs:"\n            const canvasText = document.getElementById('canvas-text');\n            const ctxT = canvasText.getContext('2d');\n            ctxT.fillStyle = 'green';\n            ctxT.strokeStyle = 'darkseagreen';\n            ctxT.font = \"25px cursive\";\n            ctxT.fillStyle = 'black';\n            ctxT.fillText(\"Canvas\", 10, 30);\n            ctxT.strokeText(\"Canvas\", 10, 60);\n            ",imghtml:'\n            <canvas \n                id="canvas-img" \n                width="400px" \n                height="300px"\n            >\n            </canvas>\n            ',imgjs:"\n            const canvasImg = document.getElementById('canvas-img');\n            const ctxI = canvasImg.getContext('2d');\n\n            // 原始大小绘制图片\n            ctxI.drawImage(canvasGradients, 10, 10);\n            // 指定图片的大小，按照指定的大小缩放图片\n            ctxI.drawImage(canvasGradients, 220, 10, 100, 100);\n            // 裁剪部分图片\n            ctxI.drawImage(canvasGradients, 75, 25, 50, 50, 225, 120, 50, 50);\n            "}},mounted:function(){this.drawRect(),this.drawPath(),this.drawArc(),this.drawBezier(),this.drawGradients(),this.drawPatterns(),this.drawShadow(),this.drawText(),this.drawImg(this.canvasGradients)},methods:{drawRect:function(){var t=document.getElementById("canvas-rect"),e=t.getContext("2d");e.fillStyle="green",e.strokeStyle="darkseagreen",e.fillRect(10,10,80,50),e.rect(10,70,80,50),e.fill(),e.strokeRect(10,130,80,50),e.fillRect(120,10,80,110),e.clearRect(140,30,40,70)},drawPath:function(){var t=document.getElementById("canvas-path"),e=t.getContext("2d");e.fillStyle="green",e.strokeStyle="darkseagreen",e.beginPath(),e.moveTo(30,10),e.lineTo(80,10),e.lineTo(90,30),e.lineTo(80,50),e.lineTo(30,50),e.lineTo(20,30),e.fill(),e.beginPath(),e.moveTo(30,70),e.lineTo(80,70),e.lineTo(90,90),e.lineTo(80,110),e.lineTo(30,110),e.lineTo(20,90),e.closePath(),e.stroke()},drawArc:function(){var t=document.getElementById("canvas-arc"),e=t.getContext("2d");e.fillStyle="green",e.strokeStyle="darkseagreen",e.beginPath(),e.arc(50,50,40,0,Math.PI/180*360,!1),e.fill(),e.beginPath(),e.arc(50,140,40,0,Math.PI/180*120,!0),e.fill(),e.beginPath(),e.moveTo(190,10),e.arcTo(110,10,110,70,30),e.lineTo(110,70),e.stroke()},drawBezier:function(){var t=document.getElementById("canvas-bezier"),e=t.getContext("2d");e.fillStyle="green",e.strokeStyle="darkseagreen",e.beginPath(),e.moveTo(30,10),e.quadraticCurveTo(50,20,30,30),e.quadraticCurveTo(10,20,30,10),e.moveTo(30,30),e.quadraticCurveTo(70,50,30,70),e.quadraticCurveTo(-10,50,30,30),e.stroke(),e.beginPath(),e.moveTo(10,100),e.bezierCurveTo(30,80,70,120,100,100),e.stroke()},drawGradients:function(){var t=document.getElementById("canvas-gradients");this.canvasGradients=t;var e=t.getContext("2d"),n=e.createLinearGradient(10,10,10,210);n.addColorStop(0,"skyblue"),n.addColorStop(.4,"skyblue"),n.addColorStop(.6,"#c8e3ef"),n.addColorStop(.7,"#f6f7f7"),n.addColorStop(.8,"#bff1b3"),n.addColorStop(1,"#26C000"),e.fillStyle=n,e.rect(10,10,200,200),e.fill(),e.beginPath();var a=e.createRadialGradient(100,50,5,100,50,20);a.addColorStop(0,"#fff"),a.addColorStop(1,"skyblue"),e.arc(100,50,20,0,Math.PI/180*360,!1),e.fillStyle=a,e.fill()},drawPatterns:function(){var t=document.getElementById("canvas-patterns"),e=t.getContext("2d"),n=new Image;n.src=d.a,n.onload=function(){e.fillStyle=e.createPattern(n,"repeat"),e.fillRect(10,10,300,200)}},drawShadow:function(){var t=document.getElementById("canvas-shadow"),e=t.getContext("2d");e.fillStyle="green",e.shadowOffsetX=3,e.shadowOffsetY=3,e.shadowBlur=5,e.shadowColor="rgba(0, 0, 0, 0.5)",e.fillStyle="green",e.beginPath(),e.arc(50,50,30,0,2*Math.PI,!0),e.arc(50,50,20,0,2*Math.PI,!0),e.arc(50,50,10,0,2*Math.PI,!0),e.fill("evenodd")},drawText:function(){var t=document.getElementById("canvas-text"),e=t.getContext("2d");e.fillStyle="green",e.strokeStyle="darkseagreen",e.font="25px cursive",e.fillStyle="black",e.fillText("Canvas",10,30),e.strokeText("Canvas",10,60)},drawImg:function(t){var e=document.getElementById("canvas-img"),n=e.getContext("2d");n.drawImage(t,10,10),n.drawImage(t,220,10,100,100),n.drawImage(t,75,25,50,50,225,120,50,50)}}},o=l,c=(n("d2e6"),n("2877")),v=n("6544"),h=n.n(v),p=n("b0af"),x=n("99d9"),g=n("12b2"),f=n("a523"),m=n("ce7e"),y=n("0e8f"),w=n("ce87"),k=n("a722"),u=n("71a3"),b=n("c671"),_=n("fe57"),C=Object(c["a"])(o,a,r,!1,null,null,null);e["default"]=C.exports;h()(C,{VCard:p["a"],VCardText:x["a"],VCardTitle:g["a"],VContainer:f["a"],VDivider:m["a"],VFlex:y["a"],VHover:w["a"],VLayout:k["a"],VTab:u["a"],VTabItem:b["a"],VTabs:_["a"]})},"33fc":function(t,e,n){},"36bd":function(t,e,n){"use strict";var a=n("4bf8"),r=n("77f1"),s=n("9def");t.exports=function(t){var e=a(this),n=s(e.length),i=arguments.length,d=r(i>1?arguments[1]:void 0,n),l=i>2?arguments[2]:void 0,o=void 0===l?n:r(l,n);while(o>d)e[d++]=t;return e}},"61d7":function(t,e,n){t.exports=n.p+"img/road.18f1398d.png"},"6c7b":function(t,e,n){var a=n("5ca1");a(a.P,"Array",{fill:n("36bd")}),n("9c6c")("fill")},be6b:function(t,e,n){"use strict";n.r(e);var a=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("v-container",{staticStyle:{padding:"0"},attrs:{fluid:"","fill-height":"",id:"basis","grid-list-md":""}},[n("Blog",{attrs:{items:t.items,time:t.time,title:t.title}},[n("div",{staticClass:"blogcontent"},[n("v-layout",{attrs:{row:"",wrap:""}},t._l(t.parts,(function(e,a){return n("v-flex",{key:a,attrs:{xs12:""}},[n("v-hover",{scopedSlots:t._u([{key:"default",fn:function(a){var r=a.hover;return n("v-card",{class:"elevation-"+(r?12:2),attrs:{"min-height":"200"}},[n("v-card-title",[n("h3",{attrs:{id:e.id}},[t._v(t._s(e.title))])]),n("v-divider"),n("v-card-text",[n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{xs12:"",sm6:"","pr-1":""}},[n("div",{staticClass:"part",domProps:{innerHTML:t._s(e.html)}})]),n("v-flex",{attrs:{xs12:"",sm6:""}},[n("v-tabs",{attrs:{color:"light-green darken-1",dark:"","slider-color":"yellow"}},[n("v-tab",{key:"explain",attrs:{ripple:""}},[t._v("解释")]),n("v-tab",{key:"html",attrs:{ripple:""}},[t._v("HTML")]),e.css?n("v-tab",{key:"css",attrs:{ripple:""}},[t._v("CSS")]):t._e(),n("v-tab-item",{key:"explain"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",{domProps:{innerHTML:t._s(e.explain)}})],1)],1),n("v-tab-item",{key:"html"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v(t._s(e.html))])])],1)],1),e.css?n("v-tab-item",{key:"css"},[n("v-card",{attrs:{flat:""}},[n("v-card-text",[n("pre",{staticClass:"code"},[t._v(t._s(e.css))])])],1)],1):t._e()],1)],1)],1)],1)],1)}}],null,!0)})],1)})),1)],1)])],1)},r=[],s=n("fd3f"),i={components:{Blog:s["a"]},data:function(){return{time:"2018-10-25",title:"svg基础应用",items:[{title:"绘制矩形",target:"#rect"},{divider:!0},{title:"绘制圆形",target:"#circle"},{divider:!0},{title:"绘制椭圆",target:"#ellipse"},{divider:!0},{title:"绘制直线",target:"#line"},{divider:!0},{title:"绘制折线",target:"#polyline"},{divider:!0},{title:"绘制闭合折线",target:"#polygon"},{divider:!0},{title:"绘制路径",target:"#path"},{divider:!0},{title:"绘制标记",target:"#marker"},{divider:!0},{title:"线性渐变",target:"#linearGradient"},{divider:!0},{title:"径向渐变",target:"#radialGradient"},{divider:!0},{title:"模式",target:"#pattern"},{divider:!0},{title:"绘制文本",target:"#text"},{divider:!0},{title:"过渡",target:"#transform"},{divider:!0},{title:"裁剪",target:"#clipPath"},{divider:!0},{title:"蒙层",target:"#mask"},{divider:!0},{title:"利用animate移动图形",target:"#animate"},{divider:!0},{title:"利用animate绘制五角星",target:"#use-animate"},{divider:!0},{title:"让一个图形沿着指定路径移动",target:"#animateMotion"},{divider:!0},{title:"过渡动画",target:"#animateTransform"}],parts:[{id:"rect",title:"绘制矩形",explain:"\n    <table>\n        <tr>\n            <td> </td>\n            <th>属性名</th>\n            <th>示例</th>\n            <th>说明</th>\n        </tr>\n        <tr>\n            <th>1</th>\n            <td>x</td>\n            <td>0</td>\n            <td>矩形的x轴坐标</td>\n        </tr>\n        <tr>\n            <th>2</th>\n            <td>y</td>\n            <td>0</td>\n            <td>矩形的y轴坐标</td>\n        </tr>\n        <tr>\n            <th>3</th>\n            <td>width</td>\n            <td>100</td>\n            <td>矩形的宽度</td>\n        </tr>\n        <tr>\n            <th>4</th>\n            <td>height</td>\n            <td>100</td>\n            <td>矩形的高度</td>\n        </tr>\n        <tr>\n            <th>5</th>\n            <td>rx</td>\n            <td>5</td>\n            <td>水平方向的圆角</td>\n        </tr>\n        <tr>\n            <th>6</th>\n            <td>ry</td>\n            <td>5</td>\n            <td>垂直方向的圆角</td>\n        </tr>\n    </table>\n    ",html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <rect width="70" height="50" fill="green"/>\n        <rect x="0" y="60" width="70" height="50" rx="15" ry="30" fill="none" stroke="darkseagreen"/>\n    </svg>\n    '},{id:"circle",title:"绘制圆形",explain:"\n    <table>\n        <tr>\n            <td> </td>\n            <th>属性名</th>\n            <th>示例</th>\n            <th>说明</th>\n        </tr>\n        <tr>\n            <th>1</th>\n            <td>cx</td>\n            <td>0</td>\n            <td>圆心x坐标</td>\n        </tr>\n        <tr>\n            <th>2</th>\n            <td>cy</td>\n            <td>0</td>\n            <td>圆心y坐标</td>\n        </tr>\n        <tr>\n            <th>3</th>\n            <td>r</td>\n            <td>10</td>\n            <td>圆半径</td>\n        </tr>\n    </table>\n    ",html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <circle cx="30" cy="30" r="30" fill="green"/>\n    </svg>\n    '},{id:"ellipse",title:"绘制椭圆",explain:"\n    <table>\n        <tr>\n            <td> </td>\n            <th>属性名</th>\n            <th>示例</th>\n            <th>说明</th>\n        </tr>\n        <tr>\n            <th>1</th>\n            <td>cx</td>\n            <td>0</td>\n            <td>中心x坐标</td>\n        </tr>\n        <tr>\n            <th>2</th>\n            <td>cy</td>\n            <td>0</td>\n            <td>中心y坐标</td>\n        </tr>\n        <tr>\n            <th>3</th>\n            <td>rx</td>\n            <td>10</td>\n            <td>水平方向半径</td>\n        </tr>\n        <tr>\n            <th>4</th>\n            <td>ry</td>\n            <td>10</td>\n            <td>垂直方向半径</td>\n        </tr>\n    </table>\n    ",html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <ellipse cx="30" cy="70" rx="30" ry="70" fill="none" stroke="darkseagreen"/>\n    </svg>\n    '},{id:"line",title:"绘制直线",explain:'\n    <p class=".body-1">1. <code>(x1, y1) (x2, y2)</code>表示直线的两点</p>\n    <p class=".body-1">2. <code>stroke-dasharray</code>属性可以设置虚线</p>\n    ',html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <line x1="0" y1="0" x2="100" y2="100" stroke="green" />\n        <line x1="0" y1="50" x2="100" y2="50" stroke="green" stroke-dasharray="5,5" />\n    </svg>\n    '},{id:"polyline",title:"绘制折线",explain:'\n    <p class=".body-1">1. <code>points</code>属性表示一串由空格分隔的点</p>\n    <p class=".body-1">2. <code>stroke-linecap</code>属性可以设置线端点样式</p>\n    <p class=".body-1">3. <code>stroke-linejoin</code>属性可以设置线相交点样式</p>\n    ',html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <polyline \n            points="0,20 5,25 10,20 15,25 20,20 25,25 30,20"\n            fill="none" \n            stroke="darkseagreen"\n            stroke-width="4" \n            stroke-linecap="round"\n            stroke-linejoin="round"\n        />\n    </svg>\n    '},{id:"polygon",title:"绘制闭合折线",explain:'\n    <p class=".body-1">和<code>polyline</code>用法一致，只不过<code>polygon</code>会将折线的开始和结束点相连</p>\n    ',html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <polygon points="50,50 20,100 90,70 10,70 80,100" fill="green"/>\n    </svg>\n    '},{id:"path",title:"绘制路径",explain:'\n    <p class=".body-1">下面列出<code>path</code>中能用到的所有事件名(大写表示绝对位置，小写表示相对位置)</p>\n    <table>\n        <tr>\n            <td> </td>\n            <th>事件名</th>\n            <th>示例</th>\n            <th>说明</th>\n        </tr>\n        <tr>\n            <th>1</th>\n            <td>M</td>\n            <td>M10 10</td>\n            <td>MoveTo将画笔移动到指定点</td>\n        </tr>\n        <tr>\n            <th>2</th>\n            <td>L</td>\n            <td>L10 10</td>\n            <td>LineTo将画笔画到指定点</td>\n        </tr>\n        <tr>\n            <th>3</th>\n            <td>H</td>\n            <td>H 10</td>\n            <td>画一条水平线，只需给出x轴坐标</td>\n        </tr>\n        <tr>\n            <th>4</th>\n            <td>V</td>\n            <td>V 90</td>\n            <td>画一条垂直线，只需给出y轴坐标</td>\n        </tr>\n        <tr>\n            <th>5</th>\n            <td>Z</td>\n            <td>Z</td>\n            <td>Z命令表示将当前点和第一个点连接</td>\n        </tr>\n        <tr>\n            <th>6</th>\n            <td>C</td>\n            <td>C 30,30 70,170 90,100</td>\n            <td>三次贝塞尔曲线，前两个点表示控制点，最后一个点表示结束点</td>\n        </tr>\n        <tr>\n            <th>7</th>\n            <td>S</td>\n            <td>S 150,170 170,100</td>\n            <td>三次贝塞尔曲线，一般跟在C指令后面用来延续贝塞尔曲线，<br>它的第一个控制点是前面指令第二个控制点的中心对称点，<br>参数表示的一个点是第二个控制点</td>\n        </tr>\n        <tr>\n            <th>8</th>\n            <td>Q</td>\n            <td>Q 30,130 50 200</td>\n            <td>二次贝塞尔曲线，只有一个控制点</td>\n        </tr>\n        <tr>\n            <th>9</th>\n            <td>T</td>\n            <td>T 90 200</td>\n            <td>二次贝塞尔曲线，作用和S的原理类似</td>\n        </tr>\n        <tr>\n            <th>10</th>\n            <td>A</td>\n            <td>A p1 p2 p3 p4 p5 p6 p7</td>\n            <td>\n                绘制圆弧<br>\n                p1: 水平半径<br>\n                p2: 垂直半径<br>\n                p3: 旋转角度<br>\n                p4: 弧线是否大于180度<br>\n                p5: 1表示顺时针，0表示逆时针<br>\n                p6: 结束点横坐标<br>\n                p7: 结束点纵坐标<br>\n                如果结束点不在圆弧内，圆弧将按照尽可能小的扩张到此点\n            </td>\n        </tr>\n        \n    </table>\n    ',html:'\n    <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">\n        <path \n            d="M10 100 C 30,30 70,170 90,100 S 150,170 170,100" \n            fill="none" stroke="black"/>\n        <path \n            d="M10 200 Q 30,130 50 200 T 90 200" \n            fill="none" stroke="black"/>\n        <path \n            d="M200 100 A 30 50 0 0 0 230 150" \n            fill="none" stroke="red"/>\n        <path \n            d="M200 100 A 30 50 0 1 0 230 150" \n            fill="none" stroke="green"/>\n        <path \n            d="M200 100 A 30 50 0 0 1 230 150" \n            fill="none" stroke="blue"/>\n        <path \n            d="M200 100 A 30 50 0 1 1 230 150" \n            fill="none" stroke="pink"/>\n    </svg>\n    '},{id:"marker",title:"绘制标记",explain:'\n    <p class=".body-1">1. <code>marker</code>标签用来定义标记，用于线端点和线中点，常用的如箭头和小圆点</p>\n    <table>\n        <tr>\n            <td> </td>\n            <th>属性名</th>\n            <th>示例</th>\n            <th>说明</th>\n        </tr>\n        <tr>\n            <th>1</th>\n            <td>viewBox</td>\n            <td>0 0 20 20</td>\n            <td>定义视口大小，主要用来控制缩放比例</td>\n        </tr>\n        <tr>\n            <th>2</th>\n            <td>markerWidth</td>\n            <td>10</td>\n            <td>标记的宽度</td>\n        </tr>\n        <tr>\n            <th>3</th>\n            <td>markerHeight</td>\n            <td>10</td>\n            <td>标记的高度</td>\n        </tr>\n        <tr>\n            <th>4</th>\n            <td>refX</td>\n            <td>5</td>\n            <td>定义和其他线端点相连点的横坐标</td>\n        </tr>\n        <tr>\n            <th>5</th>\n            <td>refY</td>\n            <td>5</td>\n            <td>定义和其他线端点相连点的纵坐标</td>\n        </tr>\n        <tr>\n            <th>6</th>\n            <td>orient</td>\n            <td>auto-start-reverse | 45</td>\n            <td>调整标记的朝向</td>\n        </tr>\n    </table>\n    <p class=".body-1">2. <code>symbol</code>可以用来定义一个图形模板，然后在<code>use</code>标签中实例化</p>\n    ',html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <defs>\n            <marker \n                id="arrow" \n                viewBox="0 0 20 20" \n                refX="5" \n                refY="5"\n                markerWidth="10" \n                markerHeight="10"\n                orient="auto-start-reverse"\n            >\n                <path d="M 0 0 L 10 5 L 0 10 z" />\n            </marker>\n\n            <marker \n                id="cir"\n                viewBox="0 0 20 20" \n                refX="5" \n                refY="5"\n                markerWidth="10" \n                markerHeight="10"\n            >\n                <circle cx="5" cy="5" r="5" fill="red" />\n            </marker>\n\n            <symbol \n                id="mk-line"\n            >\n                <path \n                    d="M10 10 L50 50 L90 10"\n                />\n            </symbol>\n        </defs>\n        \n\n        <use \n            xlink:href="#mk-line" \n            fill="none" \n            stroke="black" \n            marker-start="url(#arrow)"\n            marker-mid="url(#cir)"\n            marker-end="url(#arrow)"\n            x=50\n            y=50\n        />\n\n        <use \n            xlink:href="#mk-line" \n            fill="none" \n            stroke="black" \n            marker-start="url(#arrow)"\n            marker-mid="url(#cir)"\n            marker-end="url(#arrow)"\n            style="transform-origin: 50px 50px; transform: translateX(50px) translateY(50px) rotate(45deg);"\n        />\n\n        <use \n            xlink:href="#mk-line" \n            fill="none" \n            stroke="black" \n            marker-start="url(#arrow)"\n            marker-mid="url(#cir)"\n            marker-end="url(#arrow)"\n            style="transform-origin: 50px 50px; transform: translateX(50px) translateY(50px) rotate(90deg);"\n        />\n\n        <use \n            xlink:href="#mk-line" \n            fill="none" \n            stroke="black" \n            marker-start="url(#arrow)"\n            marker-mid="url(#cir)"\n            marker-end="url(#arrow)"\n            style="transform-origin: 50px 50px; transform: translateX(50px) translateY(50px) rotate(225deg);"\n        />\n\n        <use \n            xlink:href="#mk-line" \n            fill="none" \n            stroke="black" \n            marker-start="url(#arrow)"\n            marker-mid="url(#cir)"\n            marker-end="url(#arrow)"\n            style="transform-origin: 50px 50px; transform: translateX(50px) translateY(50px) rotate(270deg);"\n        />\n    </svg>\n    '},{id:"linearGradient",title:"线性渐变",explain:'\n    <p class=".body-1">1. 线性渐变默认是水平排列</p>\n    <p class=".body-1">2. 指定<code>x1="0" x2="0" y1="0" y2="1"</code>可以使渐变垂直排列</p>\n    <p class=".body-1">3. 使用<code>xlink</code>可以引用其他渐变色</p>\n    ',html:'\n    <svg width="200" height="220" xmlns="http://www.w3.org/2000/svg">\n        <linearGradient id="H-lg">\n            <stop stop-color="skyblue" stop-opacity="1" offset="0%"/>\n            <stop stop-color="white" stop-opacity="0.5" offset="50%"/>\n            <stop stop-color="green" stop-opacity="1" offset="100%"/>\n        </linearGradient>\n        <linearGradient \n            id="V-lg" x1="0" x2="0" y1="0" y2="1"\n            xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#H-lg"/>\n\n        <rect x="10" y="10" width="100" height="100" fill="url(#H-lg)"/>\n        <rect x="10" y="120" width="100" height="100" fill="url(#V-lg)"/>\n    </svg>\n    '},{id:"radialGradient",title:"径向渐变",explain:'\n    <p class=".body-1">1. <code>(cx, cy)</code>设置渐变中心的位置，值是占比</p>\n    <p class=".body-1">2. <code>r</code>设置渐变的半径，值是占比</p>\n    <p class=".body-1">3. <code>(fx, fy)</code>设置渐变色中心的起始位置点，值是占比</p>\n    <p class=".body-1">4. 如果你不想用占比设置上面的属性，设置<code>gradientUnits="userSpaceOnUse"</code>即可</p>\n    ',html:'\n    <svg width="200" height="220" xmlns="http://www.w3.org/2000/svg">\n        <linearGradient id="lg" x1="0" x2="0" y1="0" y2="1">\n            <stop stop-color="skyblue" stop-opacity="1" offset="0%"/>\n            <stop stop-color="skyblue" stop-opacity="1" offset="50%"/>\n            <stop stop-color="#f6f7f7" stop-opacity="1" offset="75%"/>\n            <stop stop-color="white" stop-opacity="0.3" offset="80%"/>\n            <stop stop-color="green" stop-opacity="1" offset="100%"/>\n        </linearGradient>\n        <radialGradient id="rg" cx="0.5" cy="0.5" r="0.5" fx="0.25" fy="0.25">\n            <stop offset="0%" stop-color="#fff"/>\n            <stop offset="100%" stop-color="skyblue"/>\n        </radialGradient>\n\n        <rect x="10" y="10" width="100" height="100" fill="url(#lg)"/>\n        <circle cx="30" cy="30" r="10" fill="url(#rg)"/>\n    </svg>\n    '},{id:"pattern",title:"模式",explain:'\n    <p class=".body-1">1. <code>pattern</code>默认的单位系统是相对的而它内部的元素是绝对的，这在应用上面会出现问题</p>\n    <p class=".body-1">2. <code>patternContentUnits="objectBoundingBox"</code>可以将模式的单位统一成相对的</p>\n    <p class=".body-1">3. <code>patternUnits="userSpaceOnUse"</code>可以将模式的单位统一成绝对的</p>\n    ',html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <pattern \n            id="pt-relative" x="0" y="0" width=".1" height=".1" \n            patternContentUnits="objectBoundingBox">\n            <circle cx=".05" cy=".05" r=".05" fill="green"/>\n        </pattern>\n        <rect x="0" y="0" width="100" height="100" fill="url(#pt-relative)"/>\n\n        <pattern \n            id="pt-absolute" x="0" y="0" width="10" height="10" \n            patternUnits="userSpaceOnUse">\n            <circle cx="5" cy="5" r="5" fill="green"/>\n        </pattern>\n        <rect x="100" y="100" width="100" height="100" fill="url(#pt-absolute)"/>\n    </svg>\n    '},{id:"text",title:"绘制文本",explain:'\n    <p class=".body-1">1. <code>text</code>标签可以直接设置html字体的属性</p>\n    <p class=".body-1">2. <code>text-anchor</code>设置字体的书写方向</p>\n    <p class=".body-1">3. <code>tspan</code>标签用作大块儿文本的一部分只能作为<code>text</code>或者<code>tspan</code>的子元素</p>\n    <table>\n        <tr>\n            <td> </td>\n            <th>属性名</th>\n            <th>示例</th>\n            <th>说明</th>\n        </tr>\n        <tr>\n            <th>1</th>\n            <td>x or y</td>\n            <td>10 20 30</td>\n            <td>每一个字符的绝对位置，可以是一连串的数字</td>\n        </tr>\n        <tr>\n            <th>2</th>\n            <td>dx or dy</td>\n            <td>1 2 3</td>\n            <td>每一个字符的相对位置，可以是一连串的数字</td>\n        </tr>\n        <tr>\n            <th>3</th>\n            <td>rotate</td>\n            <td>45</td>\n            <td>每一个字符的旋转角度，可以是一连串的数字</td>\n        </tr>\n    </table>\n    <p class=".body-1">4. <code>textPath</code>可以将文字沿着指定的<code>path</code>排列</p>\n    ',html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <text x="50" y="40" text-anchor="start" class="svgfont" fill="aqua">\n            SVG<tspan fill="pink" dx="1 2 3 4 5 6 7" rotate="45">awesome</tspan>\n        </text>\n        \n        <path \n            d="M10 200 Q 30,130 50 200" \n            fill="none" id="tp"/>\n        <text>\n            <textPath \n                xmlns:xlink="http://www.w3.org/1999/xlink" \n                xlink:href="#tp">\n                AWESOME SVG\n            </textPath>\n        </text>\n    </svg>\n    ',css:"\n    .svgfont{\n        font-family: cursive;\n        font-size: 20px;\n        font-weight: 400;\n    }\n    "},{id:"transform",title:"过渡",explain:'\n    <p class=".body-1">1. <code>transform</code>的使用会创建新的坐标体系，要注意使用过渡后此坐标非彼坐标。过渡的属性和CSS3的一样</p>\n    <p class=".body-1">2. <code>g</code>能够将过渡应用到一组元素上</p>\n    ',html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <rect x="0" y="0" width="30" height="30" \n            transform="translate(10,10)" fill="green" />\n        <g transform="rotate(45)" fill="green">\n            <rect x="80" y="0" width="10" height="10"  />\n            <rect x="90" y="10" width="10" height="10"  />\n            <rect x="100" y="20" width="10" height="10"  />\n        </g>\n        <rect x="50" y="10" width="30" height="30" \n            transform="skewX(30)" fill="green" />\n        <rect x="240" y="10" width="30" height="30" \n            transform="scale(0.5, 1)" fill="green" />\n    </svg>\n    '},{id:"clipPath",title:"裁剪",explain:'\n    <p class=".body-1"><code>clipPath</code>中定义的图形和使用此属性的图形的交集才会显示出来</p>\n    ',html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <clipPath id="cp">\n            <rect x="0" y="0" width="50" height="100" />\n        </clipPath>\n\n        <circle cx="100" cy="100" r="100" clip-path="url(#cp)" fill="green" />\n    </svg>\n    '},{id:"mask",title:"蒙层",explain:'\n    <p class=".body-1">1. <code>mask</code>的作用是根据子元素的rgba通过运用下面的公式来计算出目标元素的透明度</p>\n    <p class=".body-1">2. 公式：<code>(0.2125 * r + 0.7154 * g + 0.0721 * blue) * a</code></p>\n    <p class=".body-1">3. 通过上面公式可以看出来，蒙层中如果有黑色则目标元素透明度为0，如果蒙层为白色目标元素透明度为1</p>\n    ',html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <linearGradient id="mask-lg-l">\n            <stop offset="0" stop-color="black" />\n            <stop offset="1" stop-color="white" />\n        </linearGradient>\n        <mask id="mask-l">\n            <rect x="0" y="0" width="200" height="200" fill="url(#mask-lg-l)"  />\n        </mask>\n\n        <linearGradient id="mask-lg-r">\n            <stop offset="0" stop-color="white" />\n            <stop offset="1" stop-color="black" />\n        </linearGradient>\n        <mask id="mask-r">\n            <rect x="0" y="0" width="200" height="200" fill="url(#mask-lg-r)"  />\n        </mask>\n        <circle cx="100" cy="100" r="100" fill="green" mask="url(#mask-l)"/>\n        <rect x="0" y="0" width="200" height="200" fill="red" mask="url(#mask-r)" />\n    </svg>\n    '},{id:"animate",title:"利用animate移动图形",explain:'\n    <p class=".body-1"><code>animate</code>标签可以让元素的一个属性运动起来</p>\n    ',html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <rect x="0" y="0" width="100" height="100" fill="green">\n            <animate\n                attributeName="x" \n                from="0" \n                to="100"\n                dur="2s" \n                repeatCount="indefinite"\n            />\n            <animate \n                attributeName="y" \n                from="0" \n                to="100"\n                dur="2s" \n                repeatCount="indefinite"\n            />\n        </rect>\n    </svg>\n    '},{id:"use-animate",title:"利用animate绘制五角星",explain:'\n    <p class=".body-1">1. <code>use</code>标签的作用是将页面上一个元素剪切到自己内部</p>\n    <p class=".body-1">2. <code>defs</code>标签内部的元素不会渲染</p>\n    ',html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <clipPath id="am-cp">\n            <circle cx="50" cy="75" r="0">\n                <animate\n                    attributeName="r" \n                    from="0" \n                    to="60"\n                    dur="5s" \n                    repeatCount="indefinite"\n                />\n            </circle>\n        </clipPath>\n        <defs>\n            <polygon points="50,50 20,100 90,70 10,70 80,100" id="am-polygon"/>\n        </defs>\n        <use clip-path="url(#am-cp)" xlink:href="#am-polygon" fill="pink"/>\n    </svg>\n    '},{id:"animateMotion",title:"让一个图形沿着指定路径移动",explain:'\n    <p class=".body-1"><code>animateMotion</code>标签可以传入提前定义的路径，让图形沿着路径移动</p>\n    ',html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <path \n            d="M10 100 C 30,30 70,170 90,100 S 150,170 170,100" \n            fill="none" \n            stroke="black"\n            id="am-path"\n        />\n\n        <circle cx="0" cy="0" r="5" fill="green">\n            <animateMotion dur="6s" repeatCount="indefinite">\n                <mpath xlink:href="#am-path"/>\n            </animateMotion>\n        </circle>\n    </svg>\n    '},{id:"animateTransform",title:"过渡动画",explain:'\n    <p class=".body-1"><code>animateTransform</code>标签可以实现类似css的过渡动画，改变过渡的属性</p>\n    ',html:'\n    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">\n        <rect \n            x="50" \n            y="10" \n            width="30" \n            height="30"\n            fill="green">\n\n            <animateTransform \n                attributeName="transform"\n                type="rotate"\n                from="0 65 25"\n                to="360 65 25"\n                dur="3s"\n                repeatCount="indefinite"\n            />\n        </rect>\n    </svg>\n    '}]}}},d=i,l=(n("15f2"),n("2877")),o=n("6544"),c=n.n(o),v=n("b0af"),h=n("99d9"),p=n("12b2"),x=n("a523"),g=n("ce7e"),f=n("0e8f"),m=n("ce87"),y=n("a722"),w=n("71a3"),k=n("c671"),u=n("fe57"),b=Object(l["a"])(d,a,r,!1,null,null,null);e["default"]=b.exports;c()(b,{VCard:v["a"],VCardText:h["a"],VCardTitle:p["a"],VContainer:x["a"],VDivider:g["a"],VFlex:f["a"],VHover:m["a"],VLayout:y["a"],VTab:w["a"],VTabItem:k["a"],VTabs:u["a"]})},d2e6:function(t,e,n){"use strict";var a=n("221f"),r=n.n(a);r.a}}]);
//# sourceMappingURL=Basis.17f28d2a.js.map