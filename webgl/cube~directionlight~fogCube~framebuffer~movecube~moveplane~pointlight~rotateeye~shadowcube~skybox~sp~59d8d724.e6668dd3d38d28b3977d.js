(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["cube~directionlight~fogCube~framebuffer~movecube~moveplane~pointlight~rotateeye~shadowcube~skybox~sp~59d8d724"],{

/***/ "ae2N":
/*!****************************!*\
  !*** ./src/WebGlHelper.js ***!
  \****************************/
/*! exports provided: initWebGl, initBuffersForLaterUse, initElementBuffersForLaterUse, loadFile, loadBinaryFile, loadShader, initShaderProgram, setEyePosition, initTexture, setupTextureFilteringAndMips, initCubeMapTexture, initCubeMapTextureForLaterUse, setupCubeMapTextureFilteringAndMips, initFramebufferObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initWebGl", function() { return initWebGl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initBuffersForLaterUse", function() { return initBuffersForLaterUse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initElementBuffersForLaterUse", function() { return initElementBuffersForLaterUse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadFile", function() { return loadFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadBinaryFile", function() { return loadBinaryFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadShader", function() { return loadShader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initShaderProgram", function() { return initShaderProgram; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setEyePosition", function() { return setEyePosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initTexture", function() { return initTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setupTextureFilteringAndMips", function() { return setupTextureFilteringAndMips; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initCubeMapTexture", function() { return initCubeMapTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initCubeMapTextureForLaterUse", function() { return initCubeMapTextureForLaterUse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setupCubeMapTextureFilteringAndMips", function() { return setupCubeMapTextureFilteringAndMips; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initFramebufferObject", function() { return initFramebufferObject; });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "o0o1");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "yXPU");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);


function initWebGl(gl) {
  gl.clearColor(0.0, 0.0, 0.0, 1.0); // 设置背景色

  gl.clear(gl.COLOR_BUFFER_BIT); // 用设置的背景重绘canvas

  gl.clearDepth(1.0); // 清除canvas画布

  gl.enable(gl.DEPTH_TEST); // 开启深度测试，在后面的图形始终会被前面的图形覆盖不管图形在buffer中的坐标点在前还是在后

  gl.enable(gl.POLYGON_OFFSET_FILL); // 消除z-fighting

  gl.polygonOffset(1.0, 1.0);
  gl.depthFunc(gl.LEQUAL); // 设置深度检测的函数，LEQUAL表示后绘制的覆盖在先绘制之上

  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); // 清除canvas画布的颜色和深度，DEPTH_BUFFER_BIT可以清除被遮盖隐藏的图形
}
function initBuffersForLaterUse(gl, arr) {
  var buffer = gl.createBuffer();

  if (!buffer) {
    console.log('buffer创建失败');
    return;
  } // 绑定buffer对象


  gl.bindBuffer(gl.ARRAY_BUFFER, buffer); // 将数据写入到buffer对象中

  gl.bufferData(gl.ARRAY_BUFFER, arr, gl.STATIC_DRAW); // 清空当前的buffer缓冲区

  gl.bindBuffer(gl.ARRAY_BUFFER, null);
  return buffer;
}
function initElementBuffersForLaterUse(gl, arr) {
  var buffer = gl.createBuffer();

  if (!buffer) {
    console.log('buffer创建失败');
    return;
  } // 绑定buffer对象


  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer); // 将数据写入到buffer对象中

  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arr, gl.STATIC_DRAW); // 清空当前的buffer缓冲区

  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
  return buffer;
}
function loadFile(_x) {
  return _loadFile.apply(this, arguments);
}

function _loadFile() {
  _loadFile = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(url) {
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", new Promise(function (resolve, reject) {
              var request = new XMLHttpRequest();
              request.open('GET', url, true);

              request.onreadystatechange = function () {
                if (request.readyState === 4 && request.status != 404) {
                  resolve(request.responseText);
                } else if (request.status === 404) {
                  reject("\u52A0\u8F7D\u6587\u4EF6\uFF1A".concat(url, "\u5931\u8D25"));
                }
              };

              request.send();
            }));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _loadFile.apply(this, arguments);
}

function loadBinaryFile(_x2) {
  return _loadBinaryFile.apply(this, arguments);
}

function _loadBinaryFile() {
  _loadBinaryFile = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
  /*#__PURE__*/
  _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2(url) {
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", new Promise(function (resolve, reject) {
              var request = new XMLHttpRequest();
              request.open('GET', url, true);
              request.responseType = "arraybuffer";

              request.onreadystatechange = function () {
                if (request.readyState === 4 && request.status != 404) {
                  resolve(request.response);
                } else if (request.status === 404) {
                  reject("\u52A0\u8F7D\u4E8C\u8FDB\u5236\u6570\u636E\uFF1A".concat(url, "\u5931\u8D25"));
                }
              };

              request.send();
            }));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _loadBinaryFile.apply(this, arguments);
}

function loadShader(gl, type, source) {
  // 创建shader
  var shader = gl.createShader(type); // 将源码添加到shader对象中

  gl.shaderSource(shader, source); // 编译shader

  gl.compileShader(shader); // 如果执行失败

  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));
    gl.deleteShader(shader);
    return null;
  }

  return shader;
}
function initShaderProgram(gl, VSHADER_SOURCE, FSHADER_SOURCE) {
  var shaderProgram = gl.createProgram();
  gl.attachShader(shaderProgram, loadShader(gl, gl.VERTEX_SHADER, VSHADER_SOURCE));
  gl.attachShader(shaderProgram, loadShader(gl, gl.FRAGMENT_SHADER, FSHADER_SOURCE));
  gl.linkProgram(shaderProgram);

  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
    alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));
    return null;
  }

  return shaderProgram;
}
function setEyePosition(gl, viewMatrix, eyePosition) {
  // 设置视点位置
  var eyeMatrix = mat4.create();
  mat4.lookAt(eyeMatrix, // 视点位置
  new Float32Array(eyePosition), new Float32Array([// 视点看向的目标点
  0, 0, 0]), new Float32Array([// 视点的方位
  0, 1, 0]));
  gl.uniformMatrix4fv(viewMatrix, false, eyeMatrix);
  return eyeMatrix;
}
function initTexture(gl, image, textureSampler, texture, unit) {
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1); // 将图片的y坐标轴反转成纹理图片的t轴

  gl.activeTexture(gl["TEXTURE".concat(unit)]); // 激活纹理单位0，支持多个纹理

  gl.bindTexture(gl.TEXTURE_2D, texture); // 绑定纹理对象

  setupTextureFilteringAndMips(gl, image.width, image.height);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, // 图片内置格式 JPG使用RGB，PNG使用RGBA
  gl.RGBA, // 图片像素数据格式，必须和上面一致
  gl.UNSIGNED_BYTE, // 图片像素数据类型
  image);
  gl.uniform1i(textureSampler, unit); // 设置0单位的纹理采集器
}
function setupTextureFilteringAndMips(gl, width, height) {
  // 此函数检测图片是否是 mipmap
  function isPowerOf2(value) {
    return (value & value - 1) == 0;
  }

  if (isPowerOf2(width) && isPowerOf2(height)) {
    // the dimensions are power of 2 so generate mips and turn on 
    // tri-linear filtering.
    gl.generateMipmap(gl.TEXTURE_2D);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
  } else {
    // at least one of the dimensions is not a power of 2 so set the filtering
    // so WebGL will render it.

    /**
     * TEXTURE_MAG_FILTER 放大纹理图片
     * TEXTURE_MIN_FILTER 缩小纹理图片
     *      NEAREST
     *      LINEAR
     * TEXTURE_WRAP_S 图片左右边距
     * TEXTURE_WRAP_T 图片上下边距
     *      REPEAT
     *      MIRRORED_REPEAT 
     *      CLAMP_TO_EDGE 使用边界的颜色填充
     */
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  }
}
function initCubeMapTexture(gl, images, textureSampler, texture, unit) {
  gl.activeTexture(gl["TEXTURE".concat(unit)]); // 激活纹理单位0，支持多个纹理

  var targets = [gl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, gl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
  targets.forEach(function (item, index) {
    gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
    gl.texImage2D(item, 0, gl.RGBA, // 图片内置格式 JPG使用RGB，PNG使用RGBA
    gl.RGBA, // 图片像素数据格式，必须和上面一致
    gl.UNSIGNED_BYTE, // 图片像素数据类型
    images[index]);
    setupCubeMapTextureFilteringAndMips(gl, images[index].width, images[index].height);
  });
  gl.uniform1i(textureSampler, unit); // 设置0单位的纹理采集器
}
function initCubeMapTextureForLaterUse(gl, images, texture, unit) {
  gl.activeTexture(gl["TEXTURE".concat(unit)]); // 激活纹理单位0，支持多个纹理

  var targets = [gl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, gl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
  targets.forEach(function (item, index) {
    gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
    gl.texImage2D(item, 0, gl.RGBA, // 图片内置格式 JPG使用RGB，PNG使用RGBA
    gl.RGBA, // 图片像素数据格式，必须和上面一致
    gl.UNSIGNED_BYTE, // 图片像素数据类型
    images[index]);
    setupCubeMapTextureFilteringAndMips(gl, images[index].width, images[index].height);
  });
}
function setupCubeMapTextureFilteringAndMips(gl, width, height) {
  // 此函数检测图片是否是 mipmap
  function isPowerOf2(value) {
    return (value & value - 1) == 0;
  }

  if (isPowerOf2(width) && isPowerOf2(height)) {
    gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
  } else {
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  }
}
function initFramebufferObject(gl) {
  // 如果直接将物体绘制到color buffer中，会直接在页面上展示
  // framebuffer对象的作用，可以暂时存储绘制的图形，不会在页面上展示
  //      1. 如果你要使用 surface removal function，也就是 gl.depthFunc(gl.LEQUAL) 则必须使用Renderbuffer用来存储depthBuffer
  //      2. 在framebuffer中可以使用纹理buffer来存储 color buffer，方便后续当做纹理来使用
  var framebuffer = gl.createFramebuffer(); // 创建framebuffer

  var texture = gl.createTexture(); // 创建纹理buffer

  var depthBuffer = gl.createRenderbuffer(); // 创建renderbuffer

  if (!framebuffer && !texture && !depthBuffer) {
    console.log('创建framebuffer失败');
    if (framebuffer) gl.deleteFramebuffer(framebuffer);
    if (texture) gl.deleteTexture(texture);
    if (depthBuffer) gl.deleteRenderbuffer(depthBuffer);
  } // 初始化textureBuffer


  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, document.body.clientWidth, document.body.clientHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
  setupTextureFilteringAndMips(gl, document.body.clientWidth, document.body.clientHeight); // 初始化renderbuffer用来存储depthBuffer

  gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);
  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, document.body.clientWidth, document.body.clientHeight); // 将创建的纹理buffer和renderbuffer放到framebuffer中

  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);
  framebuffer.texture = texture;
  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  gl.bindTexture(gl.TEXTURE_2D, null);
  gl.bindRenderbuffer(gl.RENDERBUFFER, null);
  return framebuffer;
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,