(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["gltf"],{

/***/ "2aWw":
/*!**********************************************!*\
  !*** ./src/gltf/environment/skyImage/px.jpg ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "860f0456716c2c598160f613c1547812.jpg";

/***/ }),

/***/ "2xHt":
/*!**********************************************************!*\
  !*** ./src/gltf/environment/diffuse/bakedDiffuse_01.jpg ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "097d07998cad25c91e7deec6b58077f3.jpg";

/***/ }),

/***/ "72bG":
/*!**********************************************************!*\
  !*** ./src/gltf/environment/diffuse/bakedDiffuse_04.jpg ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "2c5497bb2e92473f3928f2ae177150a4.jpg";

/***/ }),

/***/ "92nj":
/*!**********************************************************!*\
  !*** ./src/gltf/environment/diffuse/bakedDiffuse_06.jpg ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "3630a9a5367feca4619aa786b1a8169b.jpg";

/***/ }),

/***/ "A6gx":
/*!***************************!*\
  !*** ./src/gltf/index.js ***!
  \***************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _load_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./load.js */ "auPR");

document.body.innerHTML = '';
Object(_load_js__WEBPACK_IMPORTED_MODULE_0__["Load"])();
document.body.insertAdjacentHTML('beforeend', "\n<button style=\"position:absolute;top: 10px;left:10px;\" type=\"button\" onclick=\"history.go(-1);\">\u8FD4\u56DE</button>\n");

/***/ }),

/***/ "DdL9":
/*!**********************************************************!*\
  !*** ./src/gltf/environment/diffuse/bakedDiffuse_03.jpg ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "ae4727ebf38417d90f4e3728671f2df6.jpg";

/***/ }),

/***/ "F/Yf":
/*!**********************************************!*\
  !*** ./src/gltf/environment/skyImage/ny.jpg ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "2ef4791b3a549bb043553c06db202feb.jpg";

/***/ }),

/***/ "I9tF":
/*!******************************************!*\
  !*** ./src/gltf/environment/brdfLUT.png ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "f4f5a74364771bf0c6d274a9e5821bad.png";

/***/ }),

/***/ "W9/m":
/*!**********************************************************!*\
  !*** ./src/gltf/environment/diffuse/bakedDiffuse_05.jpg ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "438cadb145cca4a164331d52da627543.jpg";

/***/ }),

/***/ "Wbx2":
/*!***********************************!*\
  !*** ./src/gltf/hand-phaser.gltf ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "39d5bf629e078e010d4b473cf8471fd3.gltf";

/***/ }),

/***/ "Xgum":
/*!**********************************************!*\
  !*** ./src/gltf/environment/skyImage/nz.jpg ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "01ba6e02c5b5a0100a30414e2295319d.jpg";

/***/ }),

/***/ "auPR":
/*!**************************!*\
  !*** ./src/gltf/load.js ***!
  \**************************/
/*! exports provided: Load */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Load", function() { return Load; });
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "cDf5");
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _environment_skyImage_px_jpg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment/skyImage/px.jpg */ "2aWw");
/* harmony import */ var _environment_skyImage_px_jpg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_environment_skyImage_px_jpg__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _environment_skyImage_nx_jpg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./environment/skyImage/nx.jpg */ "ktWD");
/* harmony import */ var _environment_skyImage_nx_jpg__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_environment_skyImage_nx_jpg__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _environment_skyImage_py_jpg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environment/skyImage/py.jpg */ "lKBT");
/* harmony import */ var _environment_skyImage_py_jpg__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_environment_skyImage_py_jpg__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _environment_skyImage_ny_jpg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./environment/skyImage/ny.jpg */ "F/Yf");
/* harmony import */ var _environment_skyImage_ny_jpg__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_environment_skyImage_ny_jpg__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _environment_skyImage_pz_jpg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./environment/skyImage/pz.jpg */ "sXTF");
/* harmony import */ var _environment_skyImage_pz_jpg__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_environment_skyImage_pz_jpg__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _environment_skyImage_nz_jpg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./environment/skyImage/nz.jpg */ "Xgum");
/* harmony import */ var _environment_skyImage_nz_jpg__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_environment_skyImage_nz_jpg__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _environment_diffuse_bakedDiffuse_01_jpg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./environment/diffuse/bakedDiffuse_01.jpg */ "2xHt");
/* harmony import */ var _environment_diffuse_bakedDiffuse_01_jpg__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_environment_diffuse_bakedDiffuse_01_jpg__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _environment_diffuse_bakedDiffuse_02_jpg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./environment/diffuse/bakedDiffuse_02.jpg */ "gY+e");
/* harmony import */ var _environment_diffuse_bakedDiffuse_02_jpg__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_environment_diffuse_bakedDiffuse_02_jpg__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _environment_diffuse_bakedDiffuse_03_jpg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./environment/diffuse/bakedDiffuse_03.jpg */ "DdL9");
/* harmony import */ var _environment_diffuse_bakedDiffuse_03_jpg__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_environment_diffuse_bakedDiffuse_03_jpg__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _environment_diffuse_bakedDiffuse_04_jpg__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./environment/diffuse/bakedDiffuse_04.jpg */ "72bG");
/* harmony import */ var _environment_diffuse_bakedDiffuse_04_jpg__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_environment_diffuse_bakedDiffuse_04_jpg__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _environment_diffuse_bakedDiffuse_05_jpg__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./environment/diffuse/bakedDiffuse_05.jpg */ "W9/m");
/* harmony import */ var _environment_diffuse_bakedDiffuse_05_jpg__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_environment_diffuse_bakedDiffuse_05_jpg__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _environment_diffuse_bakedDiffuse_06_jpg__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./environment/diffuse/bakedDiffuse_06.jpg */ "92nj");
/* harmony import */ var _environment_diffuse_bakedDiffuse_06_jpg__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_environment_diffuse_bakedDiffuse_06_jpg__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _environment_brdfLUT_png__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./environment/brdfLUT.png */ "I9tF");
/* harmony import */ var _environment_brdfLUT_png__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_environment_brdfLUT_png__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _hand_phaser_gltf__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./hand-phaser.gltf */ "Wbx2");
/* harmony import */ var _hand_phaser_gltf__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_hand_phaser_gltf__WEBPACK_IMPORTED_MODULE_14__);















function Load() {
  var gltfUrl = _hand_phaser_gltf__WEBPACK_IMPORTED_MODULE_14___default.a;
  var drawBoundingBox = false;
  var playAllAnimationTogether = true;
  var boundingBoxType = 'bvh'; // obb aabb bvh

  var curAnimationId = 0;
  var isDisplayRotation = true;
  /******/

  (function (modules) {
    // webpackBootstrap

    /******/
    // The module cache

    /******/
    var installedModules = {};
    /******/

    /******/
    // The require function

    /******/

    function __webpack_require__(moduleId) {
      /******/

      /******/
      // Check if module is in cache

      /******/
      if (installedModules[moduleId]) {
        /******/
        return installedModules[moduleId].exports;
        /******/
      }
      /******/
      // Create a new module (and put it into the cache)

      /******/


      var module = installedModules[moduleId] = {
        /******/
        i: moduleId,

        /******/
        l: false,

        /******/
        exports: {}
        /******/

      };
      /******/

      /******/
      // Execute the module function

      /******/

      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
      /******/

      /******/
      // Flag the module as loaded

      /******/

      module.l = true;
      /******/

      /******/
      // Return the exports of the module

      /******/

      return module.exports;
      /******/
    }
    /******/

    /******/

    /******/
    // expose the modules object (__webpack_modules__)

    /******/


    __webpack_require__.m = modules;
    /******/

    /******/
    // expose the module cache

    /******/

    __webpack_require__.c = installedModules;
    /******/

    /******/
    // define getter function for harmony exports

    /******/

    __webpack_require__.d = function (exports, name, getter) {
      /******/
      if (!__webpack_require__.o(exports, name)) {
        /******/
        Object.defineProperty(exports, name, {
          /******/
          configurable: false,

          /******/
          enumerable: true,

          /******/
          get: getter
          /******/

        });
        /******/
      }
      /******/

    };
    /******/

    /******/
    // getDefaultExport function for compatibility with non-harmony modules

    /******/


    __webpack_require__.n = function (module) {
      /******/
      var getter = module && module.__esModule ?
      /******/
      function getDefault() {
        return module['default'];
      } :
      /******/
      function getModuleExports() {
        return module;
      };
      /******/

      __webpack_require__.d(getter, 'a', getter);
      /******/


      return getter;
      /******/
    };
    /******/

    /******/
    // Object.prototype.hasOwnProperty.call

    /******/


    __webpack_require__.o = function (object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    /******/

    /******/
    // __webpack_public_path__

    /******/


    __webpack_require__.p = "";
    /******/

    /******/
    // Load entry module and return exports

    /******/

    return __webpack_require__(__webpack_require__.s = 7);
    /******/
  })(
  /************************************************************************/

  /******/
  [
  /* 0 */

  /***/
  function (module, __webpack_exports__, __webpack_require__) {
    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", {
      value: true
    });
    /* harmony export (binding) */

    __webpack_require__.d(__webpack_exports__, "EPSILON", function () {
      return EPSILON;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ARRAY_TYPE", function () {
      return ARRAY_TYPE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RANDOM", function () {
      return RANDOM;
    });
    /* harmony export (immutable) */


    __webpack_exports__["setMatrixArrayType"] = setMatrixArrayType;
    /* harmony export (immutable) */

    __webpack_exports__["toRadian"] = toRadian;
    /* harmony export (immutable) */

    __webpack_exports__["equals"] = equals;
    /**
     * Common utilities
     * @module glMatrix
     */
    // Configuration Constants

    var EPSILON = 0.000001;
    var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
    var RANDOM = Math.random;
    /**
     * Sets the type of array used when creating new vectors and matrices
     *
     * @param {Type} type Array type, such as Float32Array or Array
     */

    function setMatrixArrayType(type) {
      ARRAY_TYPE = type;
    }

    var degree = Math.PI / 180;
    /**
     * Convert Degree To Radian
     *
     * @param {Number} a Angle in Degrees
     */

    function toRadian(a) {
      return a * degree;
    }
    /**
     * Tests whether or not the arguments have approximately the same value, within an absolute
     * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
     * than or equal to 1.0, and a relative tolerance is used for larger values)
     *
     * @param {Number} a The first number to test.
     * @param {Number} b The second number to test.
     * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
     */


    function equals(a, b) {
      return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
    }
    /***/

  },
  /* 1 */

  /***/
  function (module, __webpack_exports__, __webpack_require__) {
    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", {
      value: true
    });
    /* harmony import */

    var __WEBPACK_IMPORTED_MODULE_0__gl_matrix_common_js__ = __webpack_require__(0);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_1__gl_matrix_mat2_js__ = __webpack_require__(8);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_2__gl_matrix_mat2d_js__ = __webpack_require__(9);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_3__gl_matrix_mat3_js__ = __webpack_require__(2);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_4__gl_matrix_mat4_js__ = __webpack_require__(3);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_5__gl_matrix_quat_js__ = __webpack_require__(4);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_6__gl_matrix_quat2_js__ = __webpack_require__(10);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_7__gl_matrix_vec2_js__ = __webpack_require__(11);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_8__gl_matrix_vec3_js__ = __webpack_require__(5);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_9__gl_matrix_vec4_js__ = __webpack_require__(6);
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "glMatrix", function () {
      return __WEBPACK_IMPORTED_MODULE_0__gl_matrix_common_js__;
    });
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "mat2", function () {
      return __WEBPACK_IMPORTED_MODULE_1__gl_matrix_mat2_js__;
    });
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "mat2d", function () {
      return __WEBPACK_IMPORTED_MODULE_2__gl_matrix_mat2d_js__;
    });
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "mat3", function () {
      return __WEBPACK_IMPORTED_MODULE_3__gl_matrix_mat3_js__;
    });
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "mat4", function () {
      return __WEBPACK_IMPORTED_MODULE_4__gl_matrix_mat4_js__;
    });
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "quat", function () {
      return __WEBPACK_IMPORTED_MODULE_5__gl_matrix_quat_js__;
    });
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "quat2", function () {
      return __WEBPACK_IMPORTED_MODULE_6__gl_matrix_quat2_js__;
    });
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "vec2", function () {
      return __WEBPACK_IMPORTED_MODULE_7__gl_matrix_vec2_js__;
    });
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "vec3", function () {
      return __WEBPACK_IMPORTED_MODULE_8__gl_matrix_vec3_js__;
    });
    /* harmony reexport (module object) */


    __webpack_require__.d(__webpack_exports__, "vec4", function () {
      return __WEBPACK_IMPORTED_MODULE_9__gl_matrix_vec4_js__;
    });
    /***/

  },
  /* 2 */

  /***/
  function (module, __webpack_exports__, __webpack_require__) {
    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", {
      value: true
    });
    /* harmony export (immutable) */

    __webpack_exports__["create"] = create;
    /* harmony export (immutable) */

    __webpack_exports__["fromMat4"] = fromMat4;
    /* harmony export (immutable) */

    __webpack_exports__["clone"] = clone;
    /* harmony export (immutable) */

    __webpack_exports__["copy"] = copy;
    /* harmony export (immutable) */

    __webpack_exports__["fromValues"] = fromValues;
    /* harmony export (immutable) */

    __webpack_exports__["set"] = set;
    /* harmony export (immutable) */

    __webpack_exports__["identity"] = identity;
    /* harmony export (immutable) */

    __webpack_exports__["transpose"] = transpose;
    /* harmony export (immutable) */

    __webpack_exports__["invert"] = invert;
    /* harmony export (immutable) */

    __webpack_exports__["adjoint"] = adjoint;
    /* harmony export (immutable) */

    __webpack_exports__["determinant"] = determinant;
    /* harmony export (immutable) */

    __webpack_exports__["multiply"] = multiply;
    /* harmony export (immutable) */

    __webpack_exports__["translate"] = translate;
    /* harmony export (immutable) */

    __webpack_exports__["rotate"] = rotate;
    /* harmony export (immutable) */

    __webpack_exports__["scale"] = scale;
    /* harmony export (immutable) */

    __webpack_exports__["fromTranslation"] = fromTranslation;
    /* harmony export (immutable) */

    __webpack_exports__["fromRotation"] = fromRotation;
    /* harmony export (immutable) */

    __webpack_exports__["fromScaling"] = fromScaling;
    /* harmony export (immutable) */

    __webpack_exports__["fromMat2d"] = fromMat2d;
    /* harmony export (immutable) */

    __webpack_exports__["fromQuat"] = fromQuat;
    /* harmony export (immutable) */

    __webpack_exports__["normalFromMat4"] = normalFromMat4;
    /* harmony export (immutable) */

    __webpack_exports__["projection"] = projection;
    /* harmony export (immutable) */

    __webpack_exports__["str"] = str;
    /* harmony export (immutable) */

    __webpack_exports__["frob"] = frob;
    /* harmony export (immutable) */

    __webpack_exports__["add"] = add;
    /* harmony export (immutable) */

    __webpack_exports__["subtract"] = subtract;
    /* harmony export (immutable) */

    __webpack_exports__["multiplyScalar"] = multiplyScalar;
    /* harmony export (immutable) */

    __webpack_exports__["multiplyScalarAndAdd"] = multiplyScalarAndAdd;
    /* harmony export (immutable) */

    __webpack_exports__["exactEquals"] = exactEquals;
    /* harmony export (immutable) */

    __webpack_exports__["equals"] = equals;
    /* harmony export (binding) */

    __webpack_require__.d(__webpack_exports__, "mul", function () {
      return mul;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sub", function () {
      return sub;
    });
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(0);
    /**
     * 3x3 Matrix
     * @module mat3
     */

    /**
     * Creates a new identity mat3
     *
     * @returns {mat3} a new 3x3 matrix
     */


    function create() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](9);

      if (__WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"] != Float32Array) {
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
      }

      out[0] = 1;
      out[4] = 1;
      out[8] = 1;
      return out;
    }
    /**
     * Copies the upper-left 3x3 values into the given mat3.
     *
     * @param {mat3} out the receiving 3x3 matrix
     * @param {mat4} a   the source 4x4 matrix
     * @returns {mat3} out
     */


    function fromMat4(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[4];
      out[4] = a[5];
      out[5] = a[6];
      out[6] = a[8];
      out[7] = a[9];
      out[8] = a[10];
      return out;
    }
    /**
     * Creates a new mat3 initialized with values from an existing matrix
     *
     * @param {mat3} a matrix to clone
     * @returns {mat3} a new 3x3 matrix
     */


    function clone(a) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](9);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[8] = a[8];
      return out;
    }
    /**
     * Copy the values from one mat3 to another
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */


    function copy(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[8] = a[8];
      return out;
    }
    /**
     * Create a new mat3 with the given values
     *
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m10 Component in column 1, row 0 position (index 3)
     * @param {Number} m11 Component in column 1, row 1 position (index 4)
     * @param {Number} m12 Component in column 1, row 2 position (index 5)
     * @param {Number} m20 Component in column 2, row 0 position (index 6)
     * @param {Number} m21 Component in column 2, row 1 position (index 7)
     * @param {Number} m22 Component in column 2, row 2 position (index 8)
     * @returns {mat3} A new mat3
     */


    function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](9);
      out[0] = m00;
      out[1] = m01;
      out[2] = m02;
      out[3] = m10;
      out[4] = m11;
      out[5] = m12;
      out[6] = m20;
      out[7] = m21;
      out[8] = m22;
      return out;
    }
    /**
     * Set the components of a mat3 to the given values
     *
     * @param {mat3} out the receiving matrix
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m10 Component in column 1, row 0 position (index 3)
     * @param {Number} m11 Component in column 1, row 1 position (index 4)
     * @param {Number} m12 Component in column 1, row 2 position (index 5)
     * @param {Number} m20 Component in column 2, row 0 position (index 6)
     * @param {Number} m21 Component in column 2, row 1 position (index 7)
     * @param {Number} m22 Component in column 2, row 2 position (index 8)
     * @returns {mat3} out
     */


    function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
      out[0] = m00;
      out[1] = m01;
      out[2] = m02;
      out[3] = m10;
      out[4] = m11;
      out[5] = m12;
      out[6] = m20;
      out[7] = m21;
      out[8] = m22;
      return out;
    }
    /**
     * Set a mat3 to the identity matrix
     *
     * @param {mat3} out the receiving matrix
     * @returns {mat3} out
     */


    function identity(out) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 1;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
      out[8] = 1;
      return out;
    }
    /**
     * Transpose the values of a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */


    function transpose(out, a) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (out === a) {
        var a01 = a[1],
            a02 = a[2],
            a12 = a[5];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a01;
        out[5] = a[7];
        out[6] = a02;
        out[7] = a12;
      } else {
        out[0] = a[0];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a[1];
        out[4] = a[4];
        out[5] = a[7];
        out[6] = a[2];
        out[7] = a[5];
        out[8] = a[8];
      }

      return out;
    }
    /**
     * Inverts a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */


    function invert(out, a) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2];
      var a10 = a[3],
          a11 = a[4],
          a12 = a[5];
      var a20 = a[6],
          a21 = a[7],
          a22 = a[8];
      var b01 = a22 * a11 - a12 * a21;
      var b11 = -a22 * a10 + a12 * a20;
      var b21 = a21 * a10 - a11 * a20; // Calculate the determinant

      var det = a00 * b01 + a01 * b11 + a02 * b21;

      if (!det) {
        return null;
      }

      det = 1.0 / det;
      out[0] = b01 * det;
      out[1] = (-a22 * a01 + a02 * a21) * det;
      out[2] = (a12 * a01 - a02 * a11) * det;
      out[3] = b11 * det;
      out[4] = (a22 * a00 - a02 * a20) * det;
      out[5] = (-a12 * a00 + a02 * a10) * det;
      out[6] = b21 * det;
      out[7] = (-a21 * a00 + a01 * a20) * det;
      out[8] = (a11 * a00 - a01 * a10) * det;
      return out;
    }
    /**
     * Calculates the adjugate of a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */


    function adjoint(out, a) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2];
      var a10 = a[3],
          a11 = a[4],
          a12 = a[5];
      var a20 = a[6],
          a21 = a[7],
          a22 = a[8];
      out[0] = a11 * a22 - a12 * a21;
      out[1] = a02 * a21 - a01 * a22;
      out[2] = a01 * a12 - a02 * a11;
      out[3] = a12 * a20 - a10 * a22;
      out[4] = a00 * a22 - a02 * a20;
      out[5] = a02 * a10 - a00 * a12;
      out[6] = a10 * a21 - a11 * a20;
      out[7] = a01 * a20 - a00 * a21;
      out[8] = a00 * a11 - a01 * a10;
      return out;
    }
    /**
     * Calculates the determinant of a mat3
     *
     * @param {mat3} a the source matrix
     * @returns {Number} determinant of a
     */


    function determinant(a) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2];
      var a10 = a[3],
          a11 = a[4],
          a12 = a[5];
      var a20 = a[6],
          a21 = a[7],
          a22 = a[8];
      return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
    }
    /**
     * Multiplies two mat3's
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @returns {mat3} out
     */


    function multiply(out, a, b) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2];
      var a10 = a[3],
          a11 = a[4],
          a12 = a[5];
      var a20 = a[6],
          a21 = a[7],
          a22 = a[8];
      var b00 = b[0],
          b01 = b[1],
          b02 = b[2];
      var b10 = b[3],
          b11 = b[4],
          b12 = b[5];
      var b20 = b[6],
          b21 = b[7],
          b22 = b[8];
      out[0] = b00 * a00 + b01 * a10 + b02 * a20;
      out[1] = b00 * a01 + b01 * a11 + b02 * a21;
      out[2] = b00 * a02 + b01 * a12 + b02 * a22;
      out[3] = b10 * a00 + b11 * a10 + b12 * a20;
      out[4] = b10 * a01 + b11 * a11 + b12 * a21;
      out[5] = b10 * a02 + b11 * a12 + b12 * a22;
      out[6] = b20 * a00 + b21 * a10 + b22 * a20;
      out[7] = b20 * a01 + b21 * a11 + b22 * a21;
      out[8] = b20 * a02 + b21 * a12 + b22 * a22;
      return out;
    }
    /**
     * Translate a mat3 by the given vector
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to translate
     * @param {vec2} v vector to translate by
     * @returns {mat3} out
     */


    function translate(out, a, v) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a10 = a[3],
          a11 = a[4],
          a12 = a[5],
          a20 = a[6],
          a21 = a[7],
          a22 = a[8],
          x = v[0],
          y = v[1];
      out[0] = a00;
      out[1] = a01;
      out[2] = a02;
      out[3] = a10;
      out[4] = a11;
      out[5] = a12;
      out[6] = x * a00 + y * a10 + a20;
      out[7] = x * a01 + y * a11 + a21;
      out[8] = x * a02 + y * a12 + a22;
      return out;
    }
    /**
     * Rotates a mat3 by the given angle
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat3} out
     */


    function rotate(out, a, rad) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a10 = a[3],
          a11 = a[4],
          a12 = a[5],
          a20 = a[6],
          a21 = a[7],
          a22 = a[8],
          s = Math.sin(rad),
          c = Math.cos(rad);
      out[0] = c * a00 + s * a10;
      out[1] = c * a01 + s * a11;
      out[2] = c * a02 + s * a12;
      out[3] = c * a10 - s * a00;
      out[4] = c * a11 - s * a01;
      out[5] = c * a12 - s * a02;
      out[6] = a20;
      out[7] = a21;
      out[8] = a22;
      return out;
    }

    ;
    /**
     * Scales the mat3 by the dimensions in the given vec2
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to rotate
     * @param {vec2} v the vec2 to scale the matrix by
     * @returns {mat3} out
     **/

    function scale(out, a, v) {
      var x = v[0],
          y = v[1];
      out[0] = x * a[0];
      out[1] = x * a[1];
      out[2] = x * a[2];
      out[3] = y * a[3];
      out[4] = y * a[4];
      out[5] = y * a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[8] = a[8];
      return out;
    }
    /**
     * Creates a matrix from a vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat3.identity(dest);
     *     mat3.translate(dest, dest, vec);
     *
     * @param {mat3} out mat3 receiving operation result
     * @param {vec2} v Translation vector
     * @returns {mat3} out
     */


    function fromTranslation(out, v) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 1;
      out[5] = 0;
      out[6] = v[0];
      out[7] = v[1];
      out[8] = 1;
      return out;
    }
    /**
     * Creates a matrix from a given angle
     * This is equivalent to (but much faster than):
     *
     *     mat3.identity(dest);
     *     mat3.rotate(dest, dest, rad);
     *
     * @param {mat3} out mat3 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat3} out
     */


    function fromRotation(out, rad) {
      var s = Math.sin(rad),
          c = Math.cos(rad);
      out[0] = c;
      out[1] = s;
      out[2] = 0;
      out[3] = -s;
      out[4] = c;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
      out[8] = 1;
      return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat3.identity(dest);
     *     mat3.scale(dest, dest, vec);
     *
     * @param {mat3} out mat3 receiving operation result
     * @param {vec2} v Scaling vector
     * @returns {mat3} out
     */


    function fromScaling(out, v) {
      out[0] = v[0];
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = v[1];
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
      out[8] = 1;
      return out;
    }
    /**
     * Copies the values from a mat2d into a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat2d} a the matrix to copy
     * @returns {mat3} out
     **/


    function fromMat2d(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = 0;
      out[3] = a[2];
      out[4] = a[3];
      out[5] = 0;
      out[6] = a[4];
      out[7] = a[5];
      out[8] = 1;
      return out;
    }
    /**
    * Calculates a 3x3 matrix from the given quaternion
    *
    * @param {mat3} out mat3 receiving operation result
    * @param {quat} q Quaternion to create matrix from
    *
    * @returns {mat3} out
    */


    function fromQuat(out, q) {
      var x = q[0],
          y = q[1],
          z = q[2],
          w = q[3];
      var x2 = x + x;
      var y2 = y + y;
      var z2 = z + z;
      var xx = x * x2;
      var yx = y * x2;
      var yy = y * y2;
      var zx = z * x2;
      var zy = z * y2;
      var zz = z * z2;
      var wx = w * x2;
      var wy = w * y2;
      var wz = w * z2;
      out[0] = 1 - yy - zz;
      out[3] = yx - wz;
      out[6] = zx + wy;
      out[1] = yx + wz;
      out[4] = 1 - xx - zz;
      out[7] = zy - wx;
      out[2] = zx - wy;
      out[5] = zy + wx;
      out[8] = 1 - xx - yy;
      return out;
    }
    /**
    * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
    *
    * @param {mat3} out mat3 receiving operation result
    * @param {mat4} a Mat4 to derive the normal matrix from
    *
    * @returns {mat3} out
    */


    function normalFromMat4(out, a) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3];
      var a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7];
      var a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11];
      var a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      var b00 = a00 * a11 - a01 * a10;
      var b01 = a00 * a12 - a02 * a10;
      var b02 = a00 * a13 - a03 * a10;
      var b03 = a01 * a12 - a02 * a11;
      var b04 = a01 * a13 - a03 * a11;
      var b05 = a02 * a13 - a03 * a12;
      var b06 = a20 * a31 - a21 * a30;
      var b07 = a20 * a32 - a22 * a30;
      var b08 = a20 * a33 - a23 * a30;
      var b09 = a21 * a32 - a22 * a31;
      var b10 = a21 * a33 - a23 * a31;
      var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

      var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

      if (!det) {
        return null;
      }

      det = 1.0 / det;
      out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
      out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
      out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
      out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
      out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
      out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
      out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
      out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
      out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
      return out;
    }
    /**
     * Generates a 2D projection matrix with the given bounds
     *
     * @param {mat3} out mat3 frustum matrix will be written into
     * @param {number} width Width of your gl context
     * @param {number} height Height of gl context
     * @returns {mat3} out
     */


    function projection(out, width, height) {
      out[0] = 2 / width;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = -2 / height;
      out[5] = 0;
      out[6] = -1;
      out[7] = 1;
      out[8] = 1;
      return out;
    }
    /**
     * Returns a string representation of a mat3
     *
     * @param {mat3} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */


    function str(a) {
      return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';
    }
    /**
     * Returns Frobenius norm of a mat3
     *
     * @param {mat3} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */


    function frob(a) {
      return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));
    }
    /**
     * Adds two mat3's
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @returns {mat3} out
     */


    function add(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
      out[3] = a[3] + b[3];
      out[4] = a[4] + b[4];
      out[5] = a[5] + b[5];
      out[6] = a[6] + b[6];
      out[7] = a[7] + b[7];
      out[8] = a[8] + b[8];
      return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @returns {mat3} out
     */


    function subtract(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      out[2] = a[2] - b[2];
      out[3] = a[3] - b[3];
      out[4] = a[4] - b[4];
      out[5] = a[5] - b[5];
      out[6] = a[6] - b[6];
      out[7] = a[7] - b[7];
      out[8] = a[8] - b[8];
      return out;
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat3} out
     */


    function multiplyScalar(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      out[2] = a[2] * b;
      out[3] = a[3] * b;
      out[4] = a[4] * b;
      out[5] = a[5] * b;
      out[6] = a[6] * b;
      out[7] = a[7] * b;
      out[8] = a[8] * b;
      return out;
    }
    /**
     * Adds two mat3's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat3} out the receiving vector
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat3} out
     */


    function multiplyScalarAndAdd(out, a, b, scale) {
      out[0] = a[0] + b[0] * scale;
      out[1] = a[1] + b[1] * scale;
      out[2] = a[2] + b[2] * scale;
      out[3] = a[3] + b[3] * scale;
      out[4] = a[4] + b[4] * scale;
      out[5] = a[5] + b[5] * scale;
      out[6] = a[6] + b[6] * scale;
      out[7] = a[7] + b[7] * scale;
      out[8] = a[8] + b[8] * scale;
      return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat3} a The first matrix.
     * @param {mat3} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */


    function exactEquals(a, b) {
      return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat3} a The first matrix.
     * @param {mat3} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */


    function equals(a, b) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3],
          a4 = a[4],
          a5 = a[5],
          a6 = a[6],
          a7 = a[7],
          a8 = a[8];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3],
          b4 = b[4],
          b5 = b[5],
          b6 = b[6],
          b7 = b[7],
          b8 = b[8];
      return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a8), Math.abs(b8));
    }
    /**
     * Alias for {@link mat3.multiply}
     * @function
     */


    var mul = multiply;
    /**
     * Alias for {@link mat3.subtract}
     * @function
     */

    var sub = subtract;
    /***/
  },
  /* 3 */

  /***/
  function (module, __webpack_exports__, __webpack_require__) {
    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", {
      value: true
    });
    /* harmony export (immutable) */

    __webpack_exports__["create"] = create;
    /* harmony export (immutable) */

    __webpack_exports__["clone"] = clone;
    /* harmony export (immutable) */

    __webpack_exports__["copy"] = copy;
    /* harmony export (immutable) */

    __webpack_exports__["fromValues"] = fromValues;
    /* harmony export (immutable) */

    __webpack_exports__["set"] = set;
    /* harmony export (immutable) */

    __webpack_exports__["identity"] = identity;
    /* harmony export (immutable) */

    __webpack_exports__["transpose"] = transpose;
    /* harmony export (immutable) */

    __webpack_exports__["invert"] = invert;
    /* harmony export (immutable) */

    __webpack_exports__["adjoint"] = adjoint;
    /* harmony export (immutable) */

    __webpack_exports__["determinant"] = determinant;
    /* harmony export (immutable) */

    __webpack_exports__["multiply"] = multiply;
    /* harmony export (immutable) */

    __webpack_exports__["translate"] = translate;
    /* harmony export (immutable) */

    __webpack_exports__["scale"] = scale;
    /* harmony export (immutable) */

    __webpack_exports__["rotate"] = rotate;
    /* harmony export (immutable) */

    __webpack_exports__["rotateX"] = rotateX;
    /* harmony export (immutable) */

    __webpack_exports__["rotateY"] = rotateY;
    /* harmony export (immutable) */

    __webpack_exports__["rotateZ"] = rotateZ;
    /* harmony export (immutable) */

    __webpack_exports__["fromTranslation"] = fromTranslation;
    /* harmony export (immutable) */

    __webpack_exports__["fromScaling"] = fromScaling;
    /* harmony export (immutable) */

    __webpack_exports__["fromRotation"] = fromRotation;
    /* harmony export (immutable) */

    __webpack_exports__["fromXRotation"] = fromXRotation;
    /* harmony export (immutable) */

    __webpack_exports__["fromYRotation"] = fromYRotation;
    /* harmony export (immutable) */

    __webpack_exports__["fromZRotation"] = fromZRotation;
    /* harmony export (immutable) */

    __webpack_exports__["fromRotationTranslation"] = fromRotationTranslation;
    /* harmony export (immutable) */

    __webpack_exports__["fromQuat2"] = fromQuat2;
    /* harmony export (immutable) */

    __webpack_exports__["getTranslation"] = getTranslation;
    /* harmony export (immutable) */

    __webpack_exports__["getScaling"] = getScaling;
    /* harmony export (immutable) */

    __webpack_exports__["getRotation"] = getRotation;
    /* harmony export (immutable) */

    __webpack_exports__["fromRotationTranslationScale"] = fromRotationTranslationScale;
    /* harmony export (immutable) */

    __webpack_exports__["fromRotationTranslationScaleOrigin"] = fromRotationTranslationScaleOrigin;
    /* harmony export (immutable) */

    __webpack_exports__["fromQuat"] = fromQuat;
    /* harmony export (immutable) */

    __webpack_exports__["frustum"] = frustum;
    /* harmony export (immutable) */

    __webpack_exports__["perspective"] = perspective;
    /* harmony export (immutable) */

    __webpack_exports__["perspectiveFromFieldOfView"] = perspectiveFromFieldOfView;
    /* harmony export (immutable) */

    __webpack_exports__["ortho"] = ortho;
    /* harmony export (immutable) */

    __webpack_exports__["lookAt"] = lookAt;
    /* harmony export (immutable) */

    __webpack_exports__["targetTo"] = targetTo;
    /* harmony export (immutable) */

    __webpack_exports__["str"] = str;
    /* harmony export (immutable) */

    __webpack_exports__["frob"] = frob;
    /* harmony export (immutable) */

    __webpack_exports__["add"] = add;
    /* harmony export (immutable) */

    __webpack_exports__["subtract"] = subtract;
    /* harmony export (immutable) */

    __webpack_exports__["multiplyScalar"] = multiplyScalar;
    /* harmony export (immutable) */

    __webpack_exports__["multiplyScalarAndAdd"] = multiplyScalarAndAdd;
    /* harmony export (immutable) */

    __webpack_exports__["exactEquals"] = exactEquals;
    /* harmony export (immutable) */

    __webpack_exports__["equals"] = equals;
    /* harmony export (binding) */

    __webpack_require__.d(__webpack_exports__, "mul", function () {
      return mul;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sub", function () {
      return sub;
    });
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(0);
    /**
     * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
     * @module mat4
     */

    /**
     * Creates a new identity mat4
     *
     * @returns {mat4} a new 4x4 matrix
     */


    function create() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](16);

      if (__WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"] != Float32Array) {
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
      }

      out[0] = 1;
      out[5] = 1;
      out[10] = 1;
      out[15] = 1;
      return out;
    }
    /**
     * Creates a new mat4 initialized with values from an existing matrix
     *
     * @param {mat4} a matrix to clone
     * @returns {mat4} a new 4x4 matrix
     */


    function clone(a) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](16);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[8] = a[8];
      out[9] = a[9];
      out[10] = a[10];
      out[11] = a[11];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
      return out;
    }
    /**
     * Copy the values from one mat4 to another
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */


    function copy(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[8] = a[8];
      out[9] = a[9];
      out[10] = a[10];
      out[11] = a[11];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
      return out;
    }
    /**
     * Create a new mat4 with the given values
     *
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m03 Component in column 0, row 3 position (index 3)
     * @param {Number} m10 Component in column 1, row 0 position (index 4)
     * @param {Number} m11 Component in column 1, row 1 position (index 5)
     * @param {Number} m12 Component in column 1, row 2 position (index 6)
     * @param {Number} m13 Component in column 1, row 3 position (index 7)
     * @param {Number} m20 Component in column 2, row 0 position (index 8)
     * @param {Number} m21 Component in column 2, row 1 position (index 9)
     * @param {Number} m22 Component in column 2, row 2 position (index 10)
     * @param {Number} m23 Component in column 2, row 3 position (index 11)
     * @param {Number} m30 Component in column 3, row 0 position (index 12)
     * @param {Number} m31 Component in column 3, row 1 position (index 13)
     * @param {Number} m32 Component in column 3, row 2 position (index 14)
     * @param {Number} m33 Component in column 3, row 3 position (index 15)
     * @returns {mat4} A new mat4
     */


    function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](16);
      out[0] = m00;
      out[1] = m01;
      out[2] = m02;
      out[3] = m03;
      out[4] = m10;
      out[5] = m11;
      out[6] = m12;
      out[7] = m13;
      out[8] = m20;
      out[9] = m21;
      out[10] = m22;
      out[11] = m23;
      out[12] = m30;
      out[13] = m31;
      out[14] = m32;
      out[15] = m33;
      return out;
    }
    /**
     * Set the components of a mat4 to the given values
     *
     * @param {mat4} out the receiving matrix
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m03 Component in column 0, row 3 position (index 3)
     * @param {Number} m10 Component in column 1, row 0 position (index 4)
     * @param {Number} m11 Component in column 1, row 1 position (index 5)
     * @param {Number} m12 Component in column 1, row 2 position (index 6)
     * @param {Number} m13 Component in column 1, row 3 position (index 7)
     * @param {Number} m20 Component in column 2, row 0 position (index 8)
     * @param {Number} m21 Component in column 2, row 1 position (index 9)
     * @param {Number} m22 Component in column 2, row 2 position (index 10)
     * @param {Number} m23 Component in column 2, row 3 position (index 11)
     * @param {Number} m30 Component in column 3, row 0 position (index 12)
     * @param {Number} m31 Component in column 3, row 1 position (index 13)
     * @param {Number} m32 Component in column 3, row 2 position (index 14)
     * @param {Number} m33 Component in column 3, row 3 position (index 15)
     * @returns {mat4} out
     */


    function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
      out[0] = m00;
      out[1] = m01;
      out[2] = m02;
      out[3] = m03;
      out[4] = m10;
      out[5] = m11;
      out[6] = m12;
      out[7] = m13;
      out[8] = m20;
      out[9] = m21;
      out[10] = m22;
      out[11] = m23;
      out[12] = m30;
      out[13] = m31;
      out[14] = m32;
      out[15] = m33;
      return out;
    }
    /**
     * Set a mat4 to the identity matrix
     *
     * @param {mat4} out the receiving matrix
     * @returns {mat4} out
     */


    function identity(out) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = 1;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = 1;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
    }
    /**
     * Transpose the values of a mat4
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */


    function transpose(out, a) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (out === a) {
        var a01 = a[1],
            a02 = a[2],
            a03 = a[3];
        var a12 = a[6],
            a13 = a[7];
        var a23 = a[11];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
      } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
      }

      return out;
    }
    /**
     * Inverts a mat4
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */


    function invert(out, a) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3];
      var a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7];
      var a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11];
      var a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      var b00 = a00 * a11 - a01 * a10;
      var b01 = a00 * a12 - a02 * a10;
      var b02 = a00 * a13 - a03 * a10;
      var b03 = a01 * a12 - a02 * a11;
      var b04 = a01 * a13 - a03 * a11;
      var b05 = a02 * a13 - a03 * a12;
      var b06 = a20 * a31 - a21 * a30;
      var b07 = a20 * a32 - a22 * a30;
      var b08 = a20 * a33 - a23 * a30;
      var b09 = a21 * a32 - a22 * a31;
      var b10 = a21 * a33 - a23 * a31;
      var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

      var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

      if (!det) {
        return null;
      }

      det = 1.0 / det;
      out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
      out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
      out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
      out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
      out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
      out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
      out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
      out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
      out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
      out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
      out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
      out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
      out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
      out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
      out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
      out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
      return out;
    }
    /**
     * Calculates the adjugate of a mat4
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */


    function adjoint(out, a) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3];
      var a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7];
      var a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11];
      var a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
      out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
      out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
      out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
      out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
      out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
      out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
      out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
      out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
      out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
      out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
      out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
      out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
      out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
      out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
      out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
      return out;
    }
    /**
     * Calculates the determinant of a mat4
     *
     * @param {mat4} a the source matrix
     * @returns {Number} determinant of a
     */


    function determinant(a) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3];
      var a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7];
      var a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11];
      var a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      var b00 = a00 * a11 - a01 * a10;
      var b01 = a00 * a12 - a02 * a10;
      var b02 = a00 * a13 - a03 * a10;
      var b03 = a01 * a12 - a02 * a11;
      var b04 = a01 * a13 - a03 * a11;
      var b05 = a02 * a13 - a03 * a12;
      var b06 = a20 * a31 - a21 * a30;
      var b07 = a20 * a32 - a22 * a30;
      var b08 = a20 * a33 - a23 * a30;
      var b09 = a21 * a32 - a22 * a31;
      var b10 = a21 * a33 - a23 * a31;
      var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

      return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    }
    /**
     * Multiplies two mat4s
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @returns {mat4} out
     */


    function multiply(out, a, b) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3];
      var a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7];
      var a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11];
      var a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15]; // Cache only the current line of the second matrix

      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[4];
      b1 = b[5];
      b2 = b[6];
      b3 = b[7];
      out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[8];
      b1 = b[9];
      b2 = b[10];
      b3 = b[11];
      out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[12];
      b1 = b[13];
      b2 = b[14];
      b3 = b[15];
      out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      return out;
    }
    /**
     * Translate a mat4 by the given vector
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to translate
     * @param {vec3} v vector to translate by
     * @returns {mat4} out
     */


    function translate(out, a, v) {
      var x = v[0],
          y = v[1],
          z = v[2];
      var a00 = void 0,
          a01 = void 0,
          a02 = void 0,
          a03 = void 0;
      var a10 = void 0,
          a11 = void 0,
          a12 = void 0,
          a13 = void 0;
      var a20 = void 0,
          a21 = void 0,
          a22 = void 0,
          a23 = void 0;

      if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
      } else {
        a00 = a[0];
        a01 = a[1];
        a02 = a[2];
        a03 = a[3];
        a10 = a[4];
        a11 = a[5];
        a12 = a[6];
        a13 = a[7];
        a20 = a[8];
        a21 = a[9];
        a22 = a[10];
        a23 = a[11];
        out[0] = a00;
        out[1] = a01;
        out[2] = a02;
        out[3] = a03;
        out[4] = a10;
        out[5] = a11;
        out[6] = a12;
        out[7] = a13;
        out[8] = a20;
        out[9] = a21;
        out[10] = a22;
        out[11] = a23;
        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
      }

      return out;
    }
    /**
     * Scales the mat4 by the dimensions in the given vec3 not using vectorization
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to scale
     * @param {vec3} v the vec3 to scale the matrix by
     * @returns {mat4} out
     **/


    function scale(out, a, v) {
      var x = v[0],
          y = v[1],
          z = v[2];
      out[0] = a[0] * x;
      out[1] = a[1] * x;
      out[2] = a[2] * x;
      out[3] = a[3] * x;
      out[4] = a[4] * y;
      out[5] = a[5] * y;
      out[6] = a[6] * y;
      out[7] = a[7] * y;
      out[8] = a[8] * z;
      out[9] = a[9] * z;
      out[10] = a[10] * z;
      out[11] = a[11] * z;
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
      return out;
    }
    /**
     * Rotates a mat4 by the given angle around the given axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @param {vec3} axis the axis to rotate around
     * @returns {mat4} out
     */


    function rotate(out, a, rad, axis) {
      var x = axis[0],
          y = axis[1],
          z = axis[2];
      var len = Math.sqrt(x * x + y * y + z * z);
      var s = void 0,
          c = void 0,
          t = void 0;
      var a00 = void 0,
          a01 = void 0,
          a02 = void 0,
          a03 = void 0;
      var a10 = void 0,
          a11 = void 0,
          a12 = void 0,
          a13 = void 0;
      var a20 = void 0,
          a21 = void 0,
          a22 = void 0,
          a23 = void 0;
      var b00 = void 0,
          b01 = void 0,
          b02 = void 0;
      var b10 = void 0,
          b11 = void 0,
          b12 = void 0;
      var b20 = void 0,
          b21 = void 0,
          b22 = void 0;

      if (len < __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"]) {
        return null;
      }

      len = 1 / len;
      x *= len;
      y *= len;
      z *= len;
      s = Math.sin(rad);
      c = Math.cos(rad);
      t = 1 - c;
      a00 = a[0];
      a01 = a[1];
      a02 = a[2];
      a03 = a[3];
      a10 = a[4];
      a11 = a[5];
      a12 = a[6];
      a13 = a[7];
      a20 = a[8];
      a21 = a[9];
      a22 = a[10];
      a23 = a[11]; // Construct the elements of the rotation matrix

      b00 = x * x * t + c;
      b01 = y * x * t + z * s;
      b02 = z * x * t - y * s;
      b10 = x * y * t - z * s;
      b11 = y * y * t + c;
      b12 = z * y * t + x * s;
      b20 = x * z * t + y * s;
      b21 = y * z * t - x * s;
      b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

      out[0] = a00 * b00 + a10 * b01 + a20 * b02;
      out[1] = a01 * b00 + a11 * b01 + a21 * b02;
      out[2] = a02 * b00 + a12 * b01 + a22 * b02;
      out[3] = a03 * b00 + a13 * b01 + a23 * b02;
      out[4] = a00 * b10 + a10 * b11 + a20 * b12;
      out[5] = a01 * b10 + a11 * b11 + a21 * b12;
      out[6] = a02 * b10 + a12 * b11 + a22 * b12;
      out[7] = a03 * b10 + a13 * b11 + a23 * b12;
      out[8] = a00 * b20 + a10 * b21 + a20 * b22;
      out[9] = a01 * b20 + a11 * b21 + a21 * b22;
      out[10] = a02 * b20 + a12 * b21 + a22 * b22;
      out[11] = a03 * b20 + a13 * b21 + a23 * b22;

      if (a !== out) {
        // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
      }

      return out;
    }
    /**
     * Rotates a matrix by the given angle around the X axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */


    function rotateX(out, a, rad) {
      var s = Math.sin(rad);
      var c = Math.cos(rad);
      var a10 = a[4];
      var a11 = a[5];
      var a12 = a[6];
      var a13 = a[7];
      var a20 = a[8];
      var a21 = a[9];
      var a22 = a[10];
      var a23 = a[11];

      if (a !== out) {
        // If the source and destination differ, copy the unchanged rows
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
      } // Perform axis-specific matrix multiplication


      out[4] = a10 * c + a20 * s;
      out[5] = a11 * c + a21 * s;
      out[6] = a12 * c + a22 * s;
      out[7] = a13 * c + a23 * s;
      out[8] = a20 * c - a10 * s;
      out[9] = a21 * c - a11 * s;
      out[10] = a22 * c - a12 * s;
      out[11] = a23 * c - a13 * s;
      return out;
    }
    /**
     * Rotates a matrix by the given angle around the Y axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */


    function rotateY(out, a, rad) {
      var s = Math.sin(rad);
      var c = Math.cos(rad);
      var a00 = a[0];
      var a01 = a[1];
      var a02 = a[2];
      var a03 = a[3];
      var a20 = a[8];
      var a21 = a[9];
      var a22 = a[10];
      var a23 = a[11];

      if (a !== out) {
        // If the source and destination differ, copy the unchanged rows
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
      } // Perform axis-specific matrix multiplication


      out[0] = a00 * c - a20 * s;
      out[1] = a01 * c - a21 * s;
      out[2] = a02 * c - a22 * s;
      out[3] = a03 * c - a23 * s;
      out[8] = a00 * s + a20 * c;
      out[9] = a01 * s + a21 * c;
      out[10] = a02 * s + a22 * c;
      out[11] = a03 * s + a23 * c;
      return out;
    }
    /**
     * Rotates a matrix by the given angle around the Z axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */


    function rotateZ(out, a, rad) {
      var s = Math.sin(rad);
      var c = Math.cos(rad);
      var a00 = a[0];
      var a01 = a[1];
      var a02 = a[2];
      var a03 = a[3];
      var a10 = a[4];
      var a11 = a[5];
      var a12 = a[6];
      var a13 = a[7];

      if (a !== out) {
        // If the source and destination differ, copy the unchanged last row
        out[8] = a[8];
        out[9] = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
      } // Perform axis-specific matrix multiplication


      out[0] = a00 * c + a10 * s;
      out[1] = a01 * c + a11 * s;
      out[2] = a02 * c + a12 * s;
      out[3] = a03 * c + a13 * s;
      out[4] = a10 * c - a00 * s;
      out[5] = a11 * c - a01 * s;
      out[6] = a12 * c - a02 * s;
      out[7] = a13 * c - a03 * s;
      return out;
    }
    /**
     * Creates a matrix from a vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, dest, vec);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {vec3} v Translation vector
     * @returns {mat4} out
     */


    function fromTranslation(out, v) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = 1;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = 1;
      out[11] = 0;
      out[12] = v[0];
      out[13] = v[1];
      out[14] = v[2];
      out[15] = 1;
      return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.scale(dest, dest, vec);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {vec3} v Scaling vector
     * @returns {mat4} out
     */


    function fromScaling(out, v) {
      out[0] = v[0];
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = v[1];
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = v[2];
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
    }
    /**
     * Creates a matrix from a given angle around a given axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotate(dest, dest, rad, axis);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @param {vec3} axis the axis to rotate around
     * @returns {mat4} out
     */


    function fromRotation(out, rad, axis) {
      var x = axis[0],
          y = axis[1],
          z = axis[2];
      var len = Math.sqrt(x * x + y * y + z * z);
      var s = void 0,
          c = void 0,
          t = void 0;

      if (len < __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"]) {
        return null;
      }

      len = 1 / len;
      x *= len;
      y *= len;
      z *= len;
      s = Math.sin(rad);
      c = Math.cos(rad);
      t = 1 - c; // Perform rotation-specific matrix multiplication

      out[0] = x * x * t + c;
      out[1] = y * x * t + z * s;
      out[2] = z * x * t - y * s;
      out[3] = 0;
      out[4] = x * y * t - z * s;
      out[5] = y * y * t + c;
      out[6] = z * y * t + x * s;
      out[7] = 0;
      out[8] = x * z * t + y * s;
      out[9] = y * z * t - x * s;
      out[10] = z * z * t + c;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
    }
    /**
     * Creates a matrix from the given angle around the X axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotateX(dest, dest, rad);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */


    function fromXRotation(out, rad) {
      var s = Math.sin(rad);
      var c = Math.cos(rad); // Perform axis-specific matrix multiplication

      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = c;
      out[6] = s;
      out[7] = 0;
      out[8] = 0;
      out[9] = -s;
      out[10] = c;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
    }
    /**
     * Creates a matrix from the given angle around the Y axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotateY(dest, dest, rad);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */


    function fromYRotation(out, rad) {
      var s = Math.sin(rad);
      var c = Math.cos(rad); // Perform axis-specific matrix multiplication

      out[0] = c;
      out[1] = 0;
      out[2] = -s;
      out[3] = 0;
      out[4] = 0;
      out[5] = 1;
      out[6] = 0;
      out[7] = 0;
      out[8] = s;
      out[9] = 0;
      out[10] = c;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
    }
    /**
     * Creates a matrix from the given angle around the Z axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotateZ(dest, dest, rad);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */


    function fromZRotation(out, rad) {
      var s = Math.sin(rad);
      var c = Math.cos(rad); // Perform axis-specific matrix multiplication

      out[0] = c;
      out[1] = s;
      out[2] = 0;
      out[3] = 0;
      out[4] = -s;
      out[5] = c;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = 1;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
    }
    /**
     * Creates a matrix from a quaternion rotation and vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, vec);
     *     let quatMat = mat4.create();
     *     quat4.toMat4(quat, quatMat);
     *     mat4.multiply(dest, quatMat);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat4} q Rotation quaternion
     * @param {vec3} v Translation vector
     * @returns {mat4} out
     */


    function fromRotationTranslation(out, q, v) {
      // Quaternion math
      var x = q[0],
          y = q[1],
          z = q[2],
          w = q[3];
      var x2 = x + x;
      var y2 = y + y;
      var z2 = z + z;
      var xx = x * x2;
      var xy = x * y2;
      var xz = x * z2;
      var yy = y * y2;
      var yz = y * z2;
      var zz = z * z2;
      var wx = w * x2;
      var wy = w * y2;
      var wz = w * z2;
      out[0] = 1 - (yy + zz);
      out[1] = xy + wz;
      out[2] = xz - wy;
      out[3] = 0;
      out[4] = xy - wz;
      out[5] = 1 - (xx + zz);
      out[6] = yz + wx;
      out[7] = 0;
      out[8] = xz + wy;
      out[9] = yz - wx;
      out[10] = 1 - (xx + yy);
      out[11] = 0;
      out[12] = v[0];
      out[13] = v[1];
      out[14] = v[2];
      out[15] = 1;
      return out;
    }
    /**
     * Creates a new mat4 from a dual quat.
     *
     * @param {mat4} out Matrix
     * @param {quat2} a Dual Quaternion
     * @returns {mat4} mat4 receiving operation result
     */


    function fromQuat2(out, a) {
      var translation = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](3);
      var bx = -a[0],
          by = -a[1],
          bz = -a[2],
          bw = a[3],
          ax = a[4],
          ay = a[5],
          az = a[6],
          aw = a[7];
      var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense

      if (magnitude > 0) {
        translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
        translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
        translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
      } else {
        translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
        translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
        translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
      }

      fromRotationTranslation(out, a, translation);
      return out;
    }
    /**
     * Returns the translation vector component of a transformation
     *  matrix. If a matrix is built with fromRotationTranslation,
     *  the returned vector will be the same as the translation vector
     *  originally supplied.
     * @param  {vec3} out Vector to receive translation component
     * @param  {mat4} mat Matrix to be decomposed (input)
     * @return {vec3} out
     */


    function getTranslation(out, mat) {
      out[0] = mat[12];
      out[1] = mat[13];
      out[2] = mat[14];
      return out;
    }
    /**
     * Returns the scaling factor component of a transformation
     *  matrix. If a matrix is built with fromRotationTranslationScale
     *  with a normalized Quaternion paramter, the returned vector will be
     *  the same as the scaling vector
     *  originally supplied.
     * @param  {vec3} out Vector to receive scaling factor component
     * @param  {mat4} mat Matrix to be decomposed (input)
     * @return {vec3} out
     */


    function getScaling(out, mat) {
      var m11 = mat[0];
      var m12 = mat[1];
      var m13 = mat[2];
      var m21 = mat[4];
      var m22 = mat[5];
      var m23 = mat[6];
      var m31 = mat[8];
      var m32 = mat[9];
      var m33 = mat[10];
      out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
      out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
      out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
      return out;
    }
    /**
     * Returns a quaternion representing the rotational component
     *  of a transformation matrix. If a matrix is built with
     *  fromRotationTranslation, the returned quaternion will be the
     *  same as the quaternion originally supplied.
     * @param {quat} out Quaternion to receive the rotation component
     * @param {mat4} mat Matrix to be decomposed (input)
     * @return {quat} out
     */


    function getRotation(out, mat) {
      // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
      var trace = mat[0] + mat[5] + mat[10];
      var S = 0;

      if (trace > 0) {
        S = Math.sqrt(trace + 1.0) * 2;
        out[3] = 0.25 * S;
        out[0] = (mat[6] - mat[9]) / S;
        out[1] = (mat[8] - mat[2]) / S;
        out[2] = (mat[1] - mat[4]) / S;
      } else if (mat[0] > mat[5] && mat[0] > mat[10]) {
        S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
        out[3] = (mat[6] - mat[9]) / S;
        out[0] = 0.25 * S;
        out[1] = (mat[1] + mat[4]) / S;
        out[2] = (mat[8] + mat[2]) / S;
      } else if (mat[5] > mat[10]) {
        S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
        out[3] = (mat[8] - mat[2]) / S;
        out[0] = (mat[1] + mat[4]) / S;
        out[1] = 0.25 * S;
        out[2] = (mat[6] + mat[9]) / S;
      } else {
        S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
        out[3] = (mat[1] - mat[4]) / S;
        out[0] = (mat[8] + mat[2]) / S;
        out[1] = (mat[6] + mat[9]) / S;
        out[2] = 0.25 * S;
      }

      return out;
    }
    /**
     * Creates a matrix from a quaternion rotation, vector translation and vector scale
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, vec);
     *     let quatMat = mat4.create();
     *     quat4.toMat4(quat, quatMat);
     *     mat4.multiply(dest, quatMat);
     *     mat4.scale(dest, scale)
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat4} q Rotation quaternion
     * @param {vec3} v Translation vector
     * @param {vec3} s Scaling vector
     * @returns {mat4} out
     */


    function fromRotationTranslationScale(out, q, v, s) {
      // Quaternion math
      var x = q[0],
          y = q[1],
          z = q[2],
          w = q[3];
      var x2 = x + x;
      var y2 = y + y;
      var z2 = z + z;
      var xx = x * x2;
      var xy = x * y2;
      var xz = x * z2;
      var yy = y * y2;
      var yz = y * z2;
      var zz = z * z2;
      var wx = w * x2;
      var wy = w * y2;
      var wz = w * z2;
      var sx = s[0];
      var sy = s[1];
      var sz = s[2];
      out[0] = (1 - (yy + zz)) * sx;
      out[1] = (xy + wz) * sx;
      out[2] = (xz - wy) * sx;
      out[3] = 0;
      out[4] = (xy - wz) * sy;
      out[5] = (1 - (xx + zz)) * sy;
      out[6] = (yz + wx) * sy;
      out[7] = 0;
      out[8] = (xz + wy) * sz;
      out[9] = (yz - wx) * sz;
      out[10] = (1 - (xx + yy)) * sz;
      out[11] = 0;
      out[12] = v[0];
      out[13] = v[1];
      out[14] = v[2];
      out[15] = 1;
      return out;
    }
    /**
     * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, vec);
     *     mat4.translate(dest, origin);
     *     let quatMat = mat4.create();
     *     quat4.toMat4(quat, quatMat);
     *     mat4.multiply(dest, quatMat);
     *     mat4.scale(dest, scale)
     *     mat4.translate(dest, negativeOrigin);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat4} q Rotation quaternion
     * @param {vec3} v Translation vector
     * @param {vec3} s Scaling vector
     * @param {vec3} o The origin vector around which to scale and rotate
     * @returns {mat4} out
     */


    function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
      // Quaternion math
      var x = q[0],
          y = q[1],
          z = q[2],
          w = q[3];
      var x2 = x + x;
      var y2 = y + y;
      var z2 = z + z;
      var xx = x * x2;
      var xy = x * y2;
      var xz = x * z2;
      var yy = y * y2;
      var yz = y * z2;
      var zz = z * z2;
      var wx = w * x2;
      var wy = w * y2;
      var wz = w * z2;
      var sx = s[0];
      var sy = s[1];
      var sz = s[2];
      var ox = o[0];
      var oy = o[1];
      var oz = o[2];
      var out0 = (1 - (yy + zz)) * sx;
      var out1 = (xy + wz) * sx;
      var out2 = (xz - wy) * sx;
      var out4 = (xy - wz) * sy;
      var out5 = (1 - (xx + zz)) * sy;
      var out6 = (yz + wx) * sy;
      var out8 = (xz + wy) * sz;
      var out9 = (yz - wx) * sz;
      var out10 = (1 - (xx + yy)) * sz;
      out[0] = out0;
      out[1] = out1;
      out[2] = out2;
      out[3] = 0;
      out[4] = out4;
      out[5] = out5;
      out[6] = out6;
      out[7] = 0;
      out[8] = out8;
      out[9] = out9;
      out[10] = out10;
      out[11] = 0;
      out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
      out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
      out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
      out[15] = 1;
      return out;
    }
    /**
     * Calculates a 4x4 matrix from the given quaternion
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat} q Quaternion to create matrix from
     *
     * @returns {mat4} out
     */


    function fromQuat(out, q) {
      var x = q[0],
          y = q[1],
          z = q[2],
          w = q[3];
      var x2 = x + x;
      var y2 = y + y;
      var z2 = z + z;
      var xx = x * x2;
      var yx = y * x2;
      var yy = y * y2;
      var zx = z * x2;
      var zy = z * y2;
      var zz = z * z2;
      var wx = w * x2;
      var wy = w * y2;
      var wz = w * z2;
      out[0] = 1 - yy - zz;
      out[1] = yx + wz;
      out[2] = zx - wy;
      out[3] = 0;
      out[4] = yx - wz;
      out[5] = 1 - xx - zz;
      out[6] = zy + wx;
      out[7] = 0;
      out[8] = zx + wy;
      out[9] = zy - wx;
      out[10] = 1 - xx - yy;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
    }
    /**
     * Generates a frustum matrix with the given bounds
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {Number} left Left bound of the frustum
     * @param {Number} right Right bound of the frustum
     * @param {Number} bottom Bottom bound of the frustum
     * @param {Number} top Top bound of the frustum
     * @param {Number} near Near bound of the frustum
     * @param {Number} far Far bound of the frustum
     * @returns {mat4} out
     */


    function frustum(out, left, right, bottom, top, near, far) {
      var rl = 1 / (right - left);
      var tb = 1 / (top - bottom);
      var nf = 1 / (near - far);
      out[0] = near * 2 * rl;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = near * 2 * tb;
      out[6] = 0;
      out[7] = 0;
      out[8] = (right + left) * rl;
      out[9] = (top + bottom) * tb;
      out[10] = (far + near) * nf;
      out[11] = -1;
      out[12] = 0;
      out[13] = 0;
      out[14] = far * near * 2 * nf;
      out[15] = 0;
      return out;
    }
    /**
     * Generates a perspective projection matrix with the given bounds.
     * Passing null/undefined/no value for far will generate infinite projection matrix.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {number} fovy Vertical field of view in radians
     * @param {number} aspect Aspect ratio. typically viewport width/height
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum, can be null or Infinity
     * @returns {mat4} out
     */


    function perspective(out, fovy, aspect, near, far) {
      var f = 1.0 / Math.tan(fovy / 2),
          nf = void 0;
      out[0] = f / aspect;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = f;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[11] = -1;
      out[12] = 0;
      out[13] = 0;
      out[15] = 0;

      if (far != null && far !== Infinity) {
        nf = 1 / (near - far);
        out[10] = (far + near) * nf;
        out[14] = 2 * far * near * nf;
      } else {
        out[10] = -1;
        out[14] = -2 * near;
      }

      return out;
    }
    /**
     * Generates a perspective projection matrix with the given field of view.
     * This is primarily useful for generating projection matrices to be used
     * with the still experiemental WebVR API.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum
     * @returns {mat4} out
     */


    function perspectiveFromFieldOfView(out, fov, near, far) {
      var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
      var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
      var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
      var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
      var xScale = 2.0 / (leftTan + rightTan);
      var yScale = 2.0 / (upTan + downTan);
      out[0] = xScale;
      out[1] = 0.0;
      out[2] = 0.0;
      out[3] = 0.0;
      out[4] = 0.0;
      out[5] = yScale;
      out[6] = 0.0;
      out[7] = 0.0;
      out[8] = -((leftTan - rightTan) * xScale * 0.5);
      out[9] = (upTan - downTan) * yScale * 0.5;
      out[10] = far / (near - far);
      out[11] = -1.0;
      out[12] = 0.0;
      out[13] = 0.0;
      out[14] = far * near / (near - far);
      out[15] = 0.0;
      return out;
    }
    /**
     * Generates a orthogonal projection matrix with the given bounds
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {number} left Left bound of the frustum
     * @param {number} right Right bound of the frustum
     * @param {number} bottom Bottom bound of the frustum
     * @param {number} top Top bound of the frustum
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum
     * @returns {mat4} out
     */


    function ortho(out, left, right, bottom, top, near, far) {
      var lr = 1 / (left - right);
      var bt = 1 / (bottom - top);
      var nf = 1 / (near - far);
      out[0] = -2 * lr;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = -2 * bt;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = 2 * nf;
      out[11] = 0;
      out[12] = (left + right) * lr;
      out[13] = (top + bottom) * bt;
      out[14] = (far + near) * nf;
      out[15] = 1;
      return out;
    }
    /**
     * Generates a look-at matrix with the given eye position, focal point, and up axis.
     * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {vec3} eye Position of the viewer
     * @param {vec3} center Point the viewer is looking at
     * @param {vec3} up vec3 pointing up
     * @returns {mat4} out
     */


    function lookAt(out, eye, center, up) {
      var x0 = void 0,
          x1 = void 0,
          x2 = void 0,
          y0 = void 0,
          y1 = void 0,
          y2 = void 0,
          z0 = void 0,
          z1 = void 0,
          z2 = void 0,
          len = void 0;
      var eyex = eye[0];
      var eyey = eye[1];
      var eyez = eye[2];
      var upx = up[0];
      var upy = up[1];
      var upz = up[2];
      var centerx = center[0];
      var centery = center[1];
      var centerz = center[2];

      if (Math.abs(eyex - centerx) < __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] && Math.abs(eyey - centery) < __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] && Math.abs(eyez - centerz) < __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"]) {
        return identity(out);
      }

      z0 = eyex - centerx;
      z1 = eyey - centery;
      z2 = eyez - centerz;
      len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
      z0 *= len;
      z1 *= len;
      z2 *= len;
      x0 = upy * z2 - upz * z1;
      x1 = upz * z0 - upx * z2;
      x2 = upx * z1 - upy * z0;
      len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);

      if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
      } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
      }

      y0 = z1 * x2 - z2 * x1;
      y1 = z2 * x0 - z0 * x2;
      y2 = z0 * x1 - z1 * x0;
      len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);

      if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
      } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
      }

      out[0] = x0;
      out[1] = y0;
      out[2] = z0;
      out[3] = 0;
      out[4] = x1;
      out[5] = y1;
      out[6] = z1;
      out[7] = 0;
      out[8] = x2;
      out[9] = y2;
      out[10] = z2;
      out[11] = 0;
      out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
      out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
      out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
      out[15] = 1;
      return out;
    }
    /**
     * Generates a matrix that makes something look at something else.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {vec3} eye Position of the viewer
     * @param {vec3} center Point the viewer is looking at
     * @param {vec3} up vec3 pointing up
     * @returns {mat4} out
     */


    function targetTo(out, eye, target, up) {
      var eyex = eye[0],
          eyey = eye[1],
          eyez = eye[2],
          upx = up[0],
          upy = up[1],
          upz = up[2];
      var z0 = eyex - target[0],
          z1 = eyey - target[1],
          z2 = eyez - target[2];
      var len = z0 * z0 + z1 * z1 + z2 * z2;

      if (len > 0) {
        len = 1 / Math.sqrt(len);
        z0 *= len;
        z1 *= len;
        z2 *= len;
      }

      var x0 = upy * z2 - upz * z1,
          x1 = upz * z0 - upx * z2,
          x2 = upx * z1 - upy * z0;
      len = x0 * x0 + x1 * x1 + x2 * x2;

      if (len > 0) {
        len = 1 / Math.sqrt(len);
        x0 *= len;
        x1 *= len;
        x2 *= len;
      }

      out[0] = x0;
      out[1] = x1;
      out[2] = x2;
      out[3] = 0;
      out[4] = z1 * x2 - z2 * x1;
      out[5] = z2 * x0 - z0 * x2;
      out[6] = z0 * x1 - z1 * x0;
      out[7] = 0;
      out[8] = z0;
      out[9] = z1;
      out[10] = z2;
      out[11] = 0;
      out[12] = eyex;
      out[13] = eyey;
      out[14] = eyez;
      out[15] = 1;
      return out;
    }

    ;
    /**
     * Returns a string representation of a mat4
     *
     * @param {mat4} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */

    function str(a) {
      return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
    }
    /**
     * Returns Frobenius norm of a mat4
     *
     * @param {mat4} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */


    function frob(a) {
      return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));
    }
    /**
     * Adds two mat4's
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @returns {mat4} out
     */


    function add(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
      out[3] = a[3] + b[3];
      out[4] = a[4] + b[4];
      out[5] = a[5] + b[5];
      out[6] = a[6] + b[6];
      out[7] = a[7] + b[7];
      out[8] = a[8] + b[8];
      out[9] = a[9] + b[9];
      out[10] = a[10] + b[10];
      out[11] = a[11] + b[11];
      out[12] = a[12] + b[12];
      out[13] = a[13] + b[13];
      out[14] = a[14] + b[14];
      out[15] = a[15] + b[15];
      return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @returns {mat4} out
     */


    function subtract(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      out[2] = a[2] - b[2];
      out[3] = a[3] - b[3];
      out[4] = a[4] - b[4];
      out[5] = a[5] - b[5];
      out[6] = a[6] - b[6];
      out[7] = a[7] - b[7];
      out[8] = a[8] - b[8];
      out[9] = a[9] - b[9];
      out[10] = a[10] - b[10];
      out[11] = a[11] - b[11];
      out[12] = a[12] - b[12];
      out[13] = a[13] - b[13];
      out[14] = a[14] - b[14];
      out[15] = a[15] - b[15];
      return out;
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat4} out
     */


    function multiplyScalar(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      out[2] = a[2] * b;
      out[3] = a[3] * b;
      out[4] = a[4] * b;
      out[5] = a[5] * b;
      out[6] = a[6] * b;
      out[7] = a[7] * b;
      out[8] = a[8] * b;
      out[9] = a[9] * b;
      out[10] = a[10] * b;
      out[11] = a[11] * b;
      out[12] = a[12] * b;
      out[13] = a[13] * b;
      out[14] = a[14] * b;
      out[15] = a[15] * b;
      return out;
    }
    /**
     * Adds two mat4's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat4} out the receiving vector
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat4} out
     */


    function multiplyScalarAndAdd(out, a, b, scale) {
      out[0] = a[0] + b[0] * scale;
      out[1] = a[1] + b[1] * scale;
      out[2] = a[2] + b[2] * scale;
      out[3] = a[3] + b[3] * scale;
      out[4] = a[4] + b[4] * scale;
      out[5] = a[5] + b[5] * scale;
      out[6] = a[6] + b[6] * scale;
      out[7] = a[7] + b[7] * scale;
      out[8] = a[8] + b[8] * scale;
      out[9] = a[9] + b[9] * scale;
      out[10] = a[10] + b[10] * scale;
      out[11] = a[11] + b[11] * scale;
      out[12] = a[12] + b[12] * scale;
      out[13] = a[13] + b[13] * scale;
      out[14] = a[14] + b[14] * scale;
      out[15] = a[15] + b[15] * scale;
      return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat4} a The first matrix.
     * @param {mat4} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */


    function exactEquals(a, b) {
      return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat4} a The first matrix.
     * @param {mat4} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */


    function equals(a, b) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3];
      var a4 = a[4],
          a5 = a[5],
          a6 = a[6],
          a7 = a[7];
      var a8 = a[8],
          a9 = a[9],
          a10 = a[10],
          a11 = a[11];
      var a12 = a[12],
          a13 = a[13],
          a14 = a[14],
          a15 = a[15];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      var b4 = b[4],
          b5 = b[5],
          b6 = b[6],
          b7 = b[7];
      var b8 = b[8],
          b9 = b[9],
          b10 = b[10],
          b11 = b[11];
      var b12 = b[12],
          b13 = b[13],
          b14 = b[14],
          b15 = b[15];
      return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a15), Math.abs(b15));
    }
    /**
     * Alias for {@link mat4.multiply}
     * @function
     */


    var mul = multiply;
    /**
     * Alias for {@link mat4.subtract}
     * @function
     */

    var sub = subtract;
    /***/
  },
  /* 4 */

  /***/
  function (module, __webpack_exports__, __webpack_require__) {
    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", {
      value: true
    });
    /* harmony export (immutable) */

    __webpack_exports__["create"] = create;
    /* harmony export (immutable) */

    __webpack_exports__["identity"] = identity;
    /* harmony export (immutable) */

    __webpack_exports__["setAxisAngle"] = setAxisAngle;
    /* harmony export (immutable) */

    __webpack_exports__["getAxisAngle"] = getAxisAngle;
    /* harmony export (immutable) */

    __webpack_exports__["multiply"] = multiply;
    /* harmony export (immutable) */

    __webpack_exports__["rotateX"] = rotateX;
    /* harmony export (immutable) */

    __webpack_exports__["rotateY"] = rotateY;
    /* harmony export (immutable) */

    __webpack_exports__["rotateZ"] = rotateZ;
    /* harmony export (immutable) */

    __webpack_exports__["calculateW"] = calculateW;
    /* harmony export (immutable) */

    __webpack_exports__["slerp"] = slerp;
    /* harmony export (immutable) */

    __webpack_exports__["random"] = random;
    /* harmony export (immutable) */

    __webpack_exports__["invert"] = invert;
    /* harmony export (immutable) */

    __webpack_exports__["conjugate"] = conjugate;
    /* harmony export (immutable) */

    __webpack_exports__["fromMat3"] = fromMat3;
    /* harmony export (immutable) */

    __webpack_exports__["fromEuler"] = fromEuler;
    /* harmony export (immutable) */

    __webpack_exports__["str"] = str;
    /* harmony export (binding) */

    __webpack_require__.d(__webpack_exports__, "clone", function () {
      return clone;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "fromValues", function () {
      return fromValues;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "copy", function () {
      return copy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "set", function () {
      return set;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "add", function () {
      return add;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "mul", function () {
      return mul;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "scale", function () {
      return scale;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "dot", function () {
      return dot;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "lerp", function () {
      return lerp;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "length", function () {
      return length;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "len", function () {
      return len;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "squaredLength", function () {
      return squaredLength;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sqrLen", function () {
      return sqrLen;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "normalize", function () {
      return normalize;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "exactEquals", function () {
      return exactEquals;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "equals", function () {
      return equals;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "rotationTo", function () {
      return rotationTo;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sqlerp", function () {
      return sqlerp;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "setAxes", function () {
      return setAxes;
    });
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(0);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_1__mat3_js__ = __webpack_require__(2);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_2__vec3_js__ = __webpack_require__(5);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_3__vec4_js__ = __webpack_require__(6);
    /**
     * Quaternion
     * @module quat
     */

    /**
     * Creates a new identity quat
     *
     * @returns {quat} a new quaternion
     */


    function create() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](4);

      if (__WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"] != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
      }

      out[3] = 1;
      return out;
    }
    /**
     * Set a quat to the identity quaternion
     *
     * @param {quat} out the receiving quaternion
     * @returns {quat} out
     */


    function identity(out) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    }
    /**
     * Sets a quat from the given angle and rotation axis,
     * then returns it.
     *
     * @param {quat} out the receiving quaternion
     * @param {vec3} axis the axis around which to rotate
     * @param {Number} rad the angle in radians
     * @returns {quat} out
     **/


    function setAxisAngle(out, axis, rad) {
      rad = rad * 0.5;
      var s = Math.sin(rad);
      out[0] = s * axis[0];
      out[1] = s * axis[1];
      out[2] = s * axis[2];
      out[3] = Math.cos(rad);
      return out;
    }
    /**
     * Gets the rotation axis and angle for a given
     *  quaternion. If a quaternion is created with
     *  setAxisAngle, this method will return the same
     *  values as providied in the original parameter list
     *  OR functionally equivalent values.
     * Example: The quaternion formed by axis [0, 0, 1] and
     *  angle -90 is the same as the quaternion formed by
     *  [0, 0, 1] and 270. This method favors the latter.
     * @param  {vec3} out_axis  Vector receiving the axis of rotation
     * @param  {quat} q     Quaternion to be decomposed
     * @return {Number}     Angle, in radians, of the rotation
     */


    function getAxisAngle(out_axis, q) {
      var rad = Math.acos(q[3]) * 2.0;
      var s = Math.sin(rad / 2.0);

      if (s > __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"]) {
        out_axis[0] = q[0] / s;
        out_axis[1] = q[1] / s;
        out_axis[2] = q[2] / s;
      } else {
        // If s is zero, return any axis (no rotation - axis does not matter)
        out_axis[0] = 1;
        out_axis[1] = 0;
        out_axis[2] = 0;
      }

      return rad;
    }
    /**
     * Multiplies two quat's
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @returns {quat} out
     */


    function multiply(out, a, b) {
      var ax = a[0],
          ay = a[1],
          az = a[2],
          aw = a[3];
      var bx = b[0],
          by = b[1],
          bz = b[2],
          bw = b[3];
      out[0] = ax * bw + aw * bx + ay * bz - az * by;
      out[1] = ay * bw + aw * by + az * bx - ax * bz;
      out[2] = az * bw + aw * bz + ax * by - ay * bx;
      out[3] = aw * bw - ax * bx - ay * by - az * bz;
      return out;
    }
    /**
     * Rotates a quaternion by the given angle about the X axis
     *
     * @param {quat} out quat receiving operation result
     * @param {quat} a quat to rotate
     * @param {number} rad angle (in radians) to rotate
     * @returns {quat} out
     */


    function rotateX(out, a, rad) {
      rad *= 0.5;
      var ax = a[0],
          ay = a[1],
          az = a[2],
          aw = a[3];
      var bx = Math.sin(rad),
          bw = Math.cos(rad);
      out[0] = ax * bw + aw * bx;
      out[1] = ay * bw + az * bx;
      out[2] = az * bw - ay * bx;
      out[3] = aw * bw - ax * bx;
      return out;
    }
    /**
     * Rotates a quaternion by the given angle about the Y axis
     *
     * @param {quat} out quat receiving operation result
     * @param {quat} a quat to rotate
     * @param {number} rad angle (in radians) to rotate
     * @returns {quat} out
     */


    function rotateY(out, a, rad) {
      rad *= 0.5;
      var ax = a[0],
          ay = a[1],
          az = a[2],
          aw = a[3];
      var by = Math.sin(rad),
          bw = Math.cos(rad);
      out[0] = ax * bw - az * by;
      out[1] = ay * bw + aw * by;
      out[2] = az * bw + ax * by;
      out[3] = aw * bw - ay * by;
      return out;
    }
    /**
     * Rotates a quaternion by the given angle about the Z axis
     *
     * @param {quat} out quat receiving operation result
     * @param {quat} a quat to rotate
     * @param {number} rad angle (in radians) to rotate
     * @returns {quat} out
     */


    function rotateZ(out, a, rad) {
      rad *= 0.5;
      var ax = a[0],
          ay = a[1],
          az = a[2],
          aw = a[3];
      var bz = Math.sin(rad),
          bw = Math.cos(rad);
      out[0] = ax * bw + ay * bz;
      out[1] = ay * bw - ax * bz;
      out[2] = az * bw + aw * bz;
      out[3] = aw * bw - az * bz;
      return out;
    }
    /**
     * Calculates the W component of a quat from the X, Y, and Z components.
     * Assumes that quaternion is 1 unit in length.
     * Any existing W component will be ignored.
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quat to calculate W component of
     * @returns {quat} out
     */


    function calculateW(out, a) {
      var x = a[0],
          y = a[1],
          z = a[2];
      out[0] = x;
      out[1] = y;
      out[2] = z;
      out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
      return out;
    }
    /**
     * Performs a spherical linear interpolation between two quat
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat} out
     */


    function slerp(out, a, b, t) {
      // benchmarks:
      //    http://jsperf.com/quaternion-slerp-implementations
      var ax = a[0],
          ay = a[1],
          az = a[2],
          aw = a[3];
      var bx = b[0],
          by = b[1],
          bz = b[2],
          bw = b[3];
      var omega = void 0,
          cosom = void 0,
          sinom = void 0,
          scale0 = void 0,
          scale1 = void 0; // calc cosine

      cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

      if (cosom < 0.0) {
        cosom = -cosom;
        bx = -bx;
        by = -by;
        bz = -bz;
        bw = -bw;
      } // calculate coefficients


      if (1.0 - cosom > __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"]) {
        // standard case (slerp)
        omega = Math.acos(cosom);
        sinom = Math.sin(omega);
        scale0 = Math.sin((1.0 - t) * omega) / sinom;
        scale1 = Math.sin(t * omega) / sinom;
      } else {
        // "from" and "to" quaternions are very close
        //  ... so we can do a linear interpolation
        scale0 = 1.0 - t;
        scale1 = t;
      } // calculate final values


      out[0] = scale0 * ax + scale1 * bx;
      out[1] = scale0 * ay + scale1 * by;
      out[2] = scale0 * az + scale1 * bz;
      out[3] = scale0 * aw + scale1 * bw;
      return out;
    }
    /**
     * Generates a random quaternion
     *
     * @param {quat} out the receiving quaternion
     * @returns {quat} out
     */


    function random(out) {
      // Implementation of http://planning.cs.uiuc.edu/node198.html
      // TODO: Calling random 3 times is probably not the fastest solution
      var u1 = __WEBPACK_IMPORTED_MODULE_0__common_js__["RANDOM"]();

      var u2 = __WEBPACK_IMPORTED_MODULE_0__common_js__["RANDOM"]();

      var u3 = __WEBPACK_IMPORTED_MODULE_0__common_js__["RANDOM"]();

      var sqrt1MinusU1 = Math.sqrt(1 - u1);
      var sqrtU1 = Math.sqrt(u1);
      out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
      out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
      out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
      out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
      return out;
    }
    /**
     * Calculates the inverse of a quat
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quat to calculate inverse of
     * @returns {quat} out
     */


    function invert(out, a) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3];
      var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
      var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

      out[0] = -a0 * invDot;
      out[1] = -a1 * invDot;
      out[2] = -a2 * invDot;
      out[3] = a3 * invDot;
      return out;
    }
    /**
     * Calculates the conjugate of a quat
     * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quat to calculate conjugate of
     * @returns {quat} out
     */


    function conjugate(out, a) {
      out[0] = -a[0];
      out[1] = -a[1];
      out[2] = -a[2];
      out[3] = a[3];
      return out;
    }
    /**
     * Creates a quaternion from the given 3x3 rotation matrix.
     *
     * NOTE: The resultant quaternion is not normalized, so you should be sure
     * to renormalize the quaternion yourself where necessary.
     *
     * @param {quat} out the receiving quaternion
     * @param {mat3} m rotation matrix
     * @returns {quat} out
     * @function
     */


    function fromMat3(out, m) {
      // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
      // article "Quaternion Calculus and Fast Animation".
      var fTrace = m[0] + m[4] + m[8];
      var fRoot = void 0;

      if (fTrace > 0.0) {
        // |w| > 1/2, may as well choose w > 1/2
        fRoot = Math.sqrt(fTrace + 1.0); // 2w

        out[3] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot; // 1/(4w)

        out[0] = (m[5] - m[7]) * fRoot;
        out[1] = (m[6] - m[2]) * fRoot;
        out[2] = (m[1] - m[3]) * fRoot;
      } else {
        // |w| <= 1/2
        var i = 0;
        if (m[4] > m[0]) i = 1;
        if (m[8] > m[i * 3 + i]) i = 2;
        var j = (i + 1) % 3;
        var k = (i + 2) % 3;
        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
        out[i] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot;
        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
      }

      return out;
    }
    /**
     * Creates a quaternion from the given euler angle x, y, z.
     *
     * @param {quat} out the receiving quaternion
     * @param {x} Angle to rotate around X axis in degrees.
     * @param {y} Angle to rotate around Y axis in degrees.
     * @param {z} Angle to rotate around Z axis in degrees.
     * @returns {quat} out
     * @function
     */


    function fromEuler(out, x, y, z) {
      var halfToRad = 0.5 * Math.PI / 180.0;
      x *= halfToRad;
      y *= halfToRad;
      z *= halfToRad;
      var sx = Math.sin(x);
      var cx = Math.cos(x);
      var sy = Math.sin(y);
      var cy = Math.cos(y);
      var sz = Math.sin(z);
      var cz = Math.cos(z);
      out[0] = sx * cy * cz - cx * sy * sz;
      out[1] = cx * sy * cz + sx * cy * sz;
      out[2] = cx * cy * sz - sx * sy * cz;
      out[3] = cx * cy * cz + sx * sy * sz;
      return out;
    }
    /**
     * Returns a string representation of a quatenion
     *
     * @param {quat} a vector to represent as a string
     * @returns {String} string representation of the vector
     */


    function str(a) {
      return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
    }
    /**
     * Creates a new quat initialized with values from an existing quaternion
     *
     * @param {quat} a quaternion to clone
     * @returns {quat} a new quaternion
     * @function
     */


    var clone = __WEBPACK_IMPORTED_MODULE_3__vec4_js__["clone"];
    /**
     * Creates a new quat initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {quat} a new quaternion
     * @function
     */

    var fromValues = __WEBPACK_IMPORTED_MODULE_3__vec4_js__["fromValues"];
    /**
     * Copy the values from one quat to another
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the source quaternion
     * @returns {quat} out
     * @function
     */

    var copy = __WEBPACK_IMPORTED_MODULE_3__vec4_js__["copy"];
    /**
     * Set the components of a quat to the given values
     *
     * @param {quat} out the receiving quaternion
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {quat} out
     * @function
     */

    var set = __WEBPACK_IMPORTED_MODULE_3__vec4_js__["set"];
    /**
     * Adds two quat's
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @returns {quat} out
     * @function
     */

    var add = __WEBPACK_IMPORTED_MODULE_3__vec4_js__["add"];
    /**
     * Alias for {@link quat.multiply}
     * @function
     */

    var mul = multiply;
    /**
     * Scales a quat by a scalar number
     *
     * @param {quat} out the receiving vector
     * @param {quat} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {quat} out
     * @function
     */

    var scale = __WEBPACK_IMPORTED_MODULE_3__vec4_js__["scale"];
    /**
     * Calculates the dot product of two quat's
     *
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @returns {Number} dot product of a and b
     * @function
     */

    var dot = __WEBPACK_IMPORTED_MODULE_3__vec4_js__["dot"];
    /**
     * Performs a linear interpolation between two quat's
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat} out
     * @function
     */

    var lerp = __WEBPACK_IMPORTED_MODULE_3__vec4_js__["lerp"];
    /**
     * Calculates the length of a quat
     *
     * @param {quat} a vector to calculate length of
     * @returns {Number} length of a
     */

    var length = __WEBPACK_IMPORTED_MODULE_3__vec4_js__["length"];
    /**
     * Alias for {@link quat.length}
     * @function
     */

    var len = length;
    /**
     * Calculates the squared length of a quat
     *
     * @param {quat} a vector to calculate squared length of
     * @returns {Number} squared length of a
     * @function
     */

    var squaredLength = __WEBPACK_IMPORTED_MODULE_3__vec4_js__["squaredLength"];
    /**
     * Alias for {@link quat.squaredLength}
     * @function
     */

    var sqrLen = squaredLength;
    /**
     * Normalize a quat
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quaternion to normalize
     * @returns {quat} out
     * @function
     */

    var normalize = __WEBPACK_IMPORTED_MODULE_3__vec4_js__["normalize"];
    /**
     * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
     *
     * @param {quat} a The first quaternion.
     * @param {quat} b The second quaternion.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */

    var exactEquals = __WEBPACK_IMPORTED_MODULE_3__vec4_js__["exactEquals"];
    /**
     * Returns whether or not the quaternions have approximately the same elements in the same position.
     *
     * @param {quat} a The first vector.
     * @param {quat} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */

    var equals = __WEBPACK_IMPORTED_MODULE_3__vec4_js__["equals"];
    /**
     * Sets a quaternion to represent the shortest rotation from one
     * vector to another.
     *
     * Both vectors are assumed to be unit length.
     *
     * @param {quat} out the receiving quaternion.
     * @param {vec3} a the initial vector
     * @param {vec3} b the destination vector
     * @returns {quat} out
     */

    var rotationTo = function () {
      var tmpvec3 = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["create"]();

      var xUnitVec3 = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["fromValues"](1, 0, 0);

      var yUnitVec3 = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["fromValues"](0, 1, 0);

      return function (out, a, b) {
        var dot = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["dot"](a, b);

        if (dot < -0.999999) {
          __WEBPACK_IMPORTED_MODULE_2__vec3_js__["cross"](tmpvec3, xUnitVec3, a);

          if (__WEBPACK_IMPORTED_MODULE_2__vec3_js__["len"](tmpvec3) < 0.000001) __WEBPACK_IMPORTED_MODULE_2__vec3_js__["cross"](tmpvec3, yUnitVec3, a);

          __WEBPACK_IMPORTED_MODULE_2__vec3_js__["normalize"](tmpvec3, tmpvec3);

          setAxisAngle(out, tmpvec3, Math.PI);
          return out;
        } else if (dot > 0.999999) {
          out[0] = 0;
          out[1] = 0;
          out[2] = 0;
          out[3] = 1;
          return out;
        } else {
          __WEBPACK_IMPORTED_MODULE_2__vec3_js__["cross"](tmpvec3, a, b);

          out[0] = tmpvec3[0];
          out[1] = tmpvec3[1];
          out[2] = tmpvec3[2];
          out[3] = 1 + dot;
          return normalize(out, out);
        }
      };
    }();
    /**
     * Performs a spherical linear interpolation with two control points
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @param {quat} c the third operand
     * @param {quat} d the fourth operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat} out
     */


    var sqlerp = function () {
      var temp1 = create();
      var temp2 = create();
      return function (out, a, b, c, d, t) {
        slerp(temp1, a, d, t);
        slerp(temp2, b, c, t);
        slerp(out, temp1, temp2, 2 * t * (1 - t));
        return out;
      };
    }();
    /**
     * Sets the specified quaternion with values corresponding to the given
     * axes. Each axis is a vec3 and is expected to be unit length and
     * perpendicular to all other specified axes.
     *
     * @param {vec3} view  the vector representing the viewing direction
     * @param {vec3} right the vector representing the local "right" direction
     * @param {vec3} up    the vector representing the local "up" direction
     * @returns {quat} out
     */


    var setAxes = function () {
      var matr = __WEBPACK_IMPORTED_MODULE_1__mat3_js__["create"]();

      return function (out, view, right, up) {
        matr[0] = right[0];
        matr[3] = right[1];
        matr[6] = right[2];
        matr[1] = up[0];
        matr[4] = up[1];
        matr[7] = up[2];
        matr[2] = -view[0];
        matr[5] = -view[1];
        matr[8] = -view[2];
        return normalize(out, fromMat3(out, matr));
      };
    }();
    /***/

  },
  /* 5 */

  /***/
  function (module, __webpack_exports__, __webpack_require__) {
    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", {
      value: true
    });
    /* harmony export (immutable) */

    __webpack_exports__["create"] = create;
    /* harmony export (immutable) */

    __webpack_exports__["clone"] = clone;
    /* harmony export (immutable) */

    __webpack_exports__["length"] = length;
    /* harmony export (immutable) */

    __webpack_exports__["fromValues"] = fromValues;
    /* harmony export (immutable) */

    __webpack_exports__["copy"] = copy;
    /* harmony export (immutable) */

    __webpack_exports__["set"] = set;
    /* harmony export (immutable) */

    __webpack_exports__["add"] = add;
    /* harmony export (immutable) */

    __webpack_exports__["subtract"] = subtract;
    /* harmony export (immutable) */

    __webpack_exports__["multiply"] = multiply;
    /* harmony export (immutable) */

    __webpack_exports__["divide"] = divide;
    /* harmony export (immutable) */

    __webpack_exports__["ceil"] = ceil;
    /* harmony export (immutable) */

    __webpack_exports__["floor"] = floor;
    /* harmony export (immutable) */

    __webpack_exports__["min"] = min;
    /* harmony export (immutable) */

    __webpack_exports__["max"] = max;
    /* harmony export (immutable) */

    __webpack_exports__["round"] = round;
    /* harmony export (immutable) */

    __webpack_exports__["scale"] = scale;
    /* harmony export (immutable) */

    __webpack_exports__["scaleAndAdd"] = scaleAndAdd;
    /* harmony export (immutable) */

    __webpack_exports__["distance"] = distance;
    /* harmony export (immutable) */

    __webpack_exports__["squaredDistance"] = squaredDistance;
    /* harmony export (immutable) */

    __webpack_exports__["squaredLength"] = squaredLength;
    /* harmony export (immutable) */

    __webpack_exports__["negate"] = negate;
    /* harmony export (immutable) */

    __webpack_exports__["inverse"] = inverse;
    /* harmony export (immutable) */

    __webpack_exports__["normalize"] = normalize;
    /* harmony export (immutable) */

    __webpack_exports__["dot"] = dot;
    /* harmony export (immutable) */

    __webpack_exports__["cross"] = cross;
    /* harmony export (immutable) */

    __webpack_exports__["lerp"] = lerp;
    /* harmony export (immutable) */

    __webpack_exports__["hermite"] = hermite;
    /* harmony export (immutable) */

    __webpack_exports__["bezier"] = bezier;
    /* harmony export (immutable) */

    __webpack_exports__["random"] = random;
    /* harmony export (immutable) */

    __webpack_exports__["transformMat4"] = transformMat4;
    /* harmony export (immutable) */

    __webpack_exports__["transformMat3"] = transformMat3;
    /* harmony export (immutable) */

    __webpack_exports__["transformQuat"] = transformQuat;
    /* harmony export (immutable) */

    __webpack_exports__["rotateX"] = rotateX;
    /* harmony export (immutable) */

    __webpack_exports__["rotateY"] = rotateY;
    /* harmony export (immutable) */

    __webpack_exports__["rotateZ"] = rotateZ;
    /* harmony export (immutable) */

    __webpack_exports__["angle"] = angle;
    /* harmony export (immutable) */

    __webpack_exports__["str"] = str;
    /* harmony export (immutable) */

    __webpack_exports__["exactEquals"] = exactEquals;
    /* harmony export (immutable) */

    __webpack_exports__["equals"] = equals;
    /* harmony export (binding) */

    __webpack_require__.d(__webpack_exports__, "sub", function () {
      return sub;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "mul", function () {
      return mul;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "div", function () {
      return div;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "dist", function () {
      return dist;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sqrDist", function () {
      return sqrDist;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "len", function () {
      return len;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sqrLen", function () {
      return sqrLen;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "forEach", function () {
      return forEach;
    });
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(0);
    /**
     * 3 Dimensional Vector
     * @module vec3
     */

    /**
     * Creates a new, empty vec3
     *
     * @returns {vec3} a new 3D vector
     */


    function create() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](3);

      if (__WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"] != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
      }

      return out;
    }
    /**
     * Creates a new vec3 initialized with values from an existing vector
     *
     * @param {vec3} a vector to clone
     * @returns {vec3} a new 3D vector
     */


    function clone(a) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](3);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      return out;
    }
    /**
     * Calculates the length of a vec3
     *
     * @param {vec3} a vector to calculate length of
     * @returns {Number} length of a
     */


    function length(a) {
      var x = a[0];
      var y = a[1];
      var z = a[2];
      return Math.sqrt(x * x + y * y + z * z);
    }
    /**
     * Creates a new vec3 initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @returns {vec3} a new 3D vector
     */


    function fromValues(x, y, z) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](3);
      out[0] = x;
      out[1] = y;
      out[2] = z;
      return out;
    }
    /**
     * Copy the values from one vec3 to another
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the source vector
     * @returns {vec3} out
     */


    function copy(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      return out;
    }
    /**
     * Set the components of a vec3 to the given values
     *
     * @param {vec3} out the receiving vector
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @returns {vec3} out
     */


    function set(out, x, y, z) {
      out[0] = x;
      out[1] = y;
      out[2] = z;
      return out;
    }
    /**
     * Adds two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */


    function add(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
      return out;
    }
    /**
     * Subtracts vector b from vector a
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */


    function subtract(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      out[2] = a[2] - b[2];
      return out;
    }
    /**
     * Multiplies two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */


    function multiply(out, a, b) {
      out[0] = a[0] * b[0];
      out[1] = a[1] * b[1];
      out[2] = a[2] * b[2];
      return out;
    }
    /**
     * Divides two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */


    function divide(out, a, b) {
      out[0] = a[0] / b[0];
      out[1] = a[1] / b[1];
      out[2] = a[2] / b[2];
      return out;
    }
    /**
     * Math.ceil the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to ceil
     * @returns {vec3} out
     */


    function ceil(out, a) {
      out[0] = Math.ceil(a[0]);
      out[1] = Math.ceil(a[1]);
      out[2] = Math.ceil(a[2]);
      return out;
    }
    /**
     * Math.floor the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to floor
     * @returns {vec3} out
     */


    function floor(out, a) {
      out[0] = Math.floor(a[0]);
      out[1] = Math.floor(a[1]);
      out[2] = Math.floor(a[2]);
      return out;
    }
    /**
     * Returns the minimum of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */


    function min(out, a, b) {
      out[0] = Math.min(a[0], b[0]);
      out[1] = Math.min(a[1], b[1]);
      out[2] = Math.min(a[2], b[2]);
      return out;
    }
    /**
     * Returns the maximum of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */


    function max(out, a, b) {
      out[0] = Math.max(a[0], b[0]);
      out[1] = Math.max(a[1], b[1]);
      out[2] = Math.max(a[2], b[2]);
      return out;
    }
    /**
     * Math.round the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to round
     * @returns {vec3} out
     */


    function round(out, a) {
      out[0] = Math.round(a[0]);
      out[1] = Math.round(a[1]);
      out[2] = Math.round(a[2]);
      return out;
    }
    /**
     * Scales a vec3 by a scalar number
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {vec3} out
     */


    function scale(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      out[2] = a[2] * b;
      return out;
    }
    /**
     * Adds two vec3's after scaling the second operand by a scalar value
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {Number} scale the amount to scale b by before adding
     * @returns {vec3} out
     */


    function scaleAndAdd(out, a, b, scale) {
      out[0] = a[0] + b[0] * scale;
      out[1] = a[1] + b[1] * scale;
      out[2] = a[2] + b[2] * scale;
      return out;
    }
    /**
     * Calculates the euclidian distance between two vec3's
     *
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {Number} distance between a and b
     */


    function distance(a, b) {
      var x = b[0] - a[0];
      var y = b[1] - a[1];
      var z = b[2] - a[2];
      return Math.sqrt(x * x + y * y + z * z);
    }
    /**
     * Calculates the squared euclidian distance between two vec3's
     *
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {Number} squared distance between a and b
     */


    function squaredDistance(a, b) {
      var x = b[0] - a[0];
      var y = b[1] - a[1];
      var z = b[2] - a[2];
      return x * x + y * y + z * z;
    }
    /**
     * Calculates the squared length of a vec3
     *
     * @param {vec3} a vector to calculate squared length of
     * @returns {Number} squared length of a
     */


    function squaredLength(a) {
      var x = a[0];
      var y = a[1];
      var z = a[2];
      return x * x + y * y + z * z;
    }
    /**
     * Negates the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to negate
     * @returns {vec3} out
     */


    function negate(out, a) {
      out[0] = -a[0];
      out[1] = -a[1];
      out[2] = -a[2];
      return out;
    }
    /**
     * Returns the inverse of the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to invert
     * @returns {vec3} out
     */


    function inverse(out, a) {
      out[0] = 1.0 / a[0];
      out[1] = 1.0 / a[1];
      out[2] = 1.0 / a[2];
      return out;
    }
    /**
     * Normalize a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to normalize
     * @returns {vec3} out
     */


    function normalize(out, a) {
      var x = a[0];
      var y = a[1];
      var z = a[2];
      var len = x * x + y * y + z * z;

      if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
      }

      return out;
    }
    /**
     * Calculates the dot product of two vec3's
     *
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {Number} dot product of a and b
     */


    function dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }
    /**
     * Computes the cross product of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */


    function cross(out, a, b) {
      var ax = a[0],
          ay = a[1],
          az = a[2];
      var bx = b[0],
          by = b[1],
          bz = b[2];
      out[0] = ay * bz - az * by;
      out[1] = az * bx - ax * bz;
      out[2] = ax * by - ay * bx;
      return out;
    }
    /**
     * Performs a linear interpolation between two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec3} out
     */


    function lerp(out, a, b, t) {
      var ax = a[0];
      var ay = a[1];
      var az = a[2];
      out[0] = ax + t * (b[0] - ax);
      out[1] = ay + t * (b[1] - ay);
      out[2] = az + t * (b[2] - az);
      return out;
    }
    /**
     * Performs a hermite interpolation with two control points
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {vec3} c the third operand
     * @param {vec3} d the fourth operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec3} out
     */


    function hermite(out, a, b, c, d, t) {
      var factorTimes2 = t * t;
      var factor1 = factorTimes2 * (2 * t - 3) + 1;
      var factor2 = factorTimes2 * (t - 2) + t;
      var factor3 = factorTimes2 * (t - 1);
      var factor4 = factorTimes2 * (3 - 2 * t);
      out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
      out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
      out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
      return out;
    }
    /**
     * Performs a bezier interpolation with two control points
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {vec3} c the third operand
     * @param {vec3} d the fourth operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec3} out
     */


    function bezier(out, a, b, c, d, t) {
      var inverseFactor = 1 - t;
      var inverseFactorTimesTwo = inverseFactor * inverseFactor;
      var factorTimes2 = t * t;
      var factor1 = inverseFactorTimesTwo * inverseFactor;
      var factor2 = 3 * t * inverseFactorTimesTwo;
      var factor3 = 3 * factorTimes2 * inverseFactor;
      var factor4 = factorTimes2 * t;
      out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
      out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
      out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
      return out;
    }
    /**
     * Generates a random vector with the given scale
     *
     * @param {vec3} out the receiving vector
     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {vec3} out
     */


    function random(out, scale) {
      scale = scale || 1.0;
      var r = __WEBPACK_IMPORTED_MODULE_0__common_js__["RANDOM"]() * 2.0 * Math.PI;
      var z = __WEBPACK_IMPORTED_MODULE_0__common_js__["RANDOM"]() * 2.0 - 1.0;
      var zScale = Math.sqrt(1.0 - z * z) * scale;
      out[0] = Math.cos(r) * zScale;
      out[1] = Math.sin(r) * zScale;
      out[2] = z * scale;
      return out;
    }
    /**
     * Transforms the vec3 with a mat4.
     * 4th vector component is implicitly '1'
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to transform
     * @param {mat4} m matrix to transform with
     * @returns {vec3} out
     */


    function transformMat4(out, a, m) {
      var x = a[0],
          y = a[1],
          z = a[2];
      var w = m[3] * x + m[7] * y + m[11] * z + m[15];
      w = w || 1.0;
      out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
      out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
      out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
      return out;
    }
    /**
     * Transforms the vec3 with a mat3.
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to transform
     * @param {mat3} m the 3x3 matrix to transform with
     * @returns {vec3} out
     */


    function transformMat3(out, a, m) {
      var x = a[0],
          y = a[1],
          z = a[2];
      out[0] = x * m[0] + y * m[3] + z * m[6];
      out[1] = x * m[1] + y * m[4] + z * m[7];
      out[2] = x * m[2] + y * m[5] + z * m[8];
      return out;
    }
    /**
     * Transforms the vec3 with a quat
     * Can also be used for dual quaternions. (Multiply it with the real part)
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to transform
     * @param {quat} q quaternion to transform with
     * @returns {vec3} out
     */


    function transformQuat(out, a, q) {
      // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
      var qx = q[0],
          qy = q[1],
          qz = q[2],
          qw = q[3];
      var x = a[0],
          y = a[1],
          z = a[2]; // var qvec = [qx, qy, qz];
      // var uv = vec3.cross([], qvec, a);

      var uvx = qy * z - qz * y,
          uvy = qz * x - qx * z,
          uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);

      var uuvx = qy * uvz - qz * uvy,
          uuvy = qz * uvx - qx * uvz,
          uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);

      var w2 = qw * 2;
      uvx *= w2;
      uvy *= w2;
      uvz *= w2; // vec3.scale(uuv, uuv, 2);

      uuvx *= 2;
      uuvy *= 2;
      uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));

      out[0] = x + uvx + uuvx;
      out[1] = y + uvy + uuvy;
      out[2] = z + uvz + uuvz;
      return out;
    }
    /**
     * Rotate a 3D vector around the x-axis
     * @param {vec3} out The receiving vec3
     * @param {vec3} a The vec3 point to rotate
     * @param {vec3} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec3} out
     */


    function rotateX(out, a, b, c) {
      var p = [],
          r = []; //Translate point to the origin

      p[0] = a[0] - b[0];
      p[1] = a[1] - b[1];
      p[2] = a[2] - b[2]; //perform rotation

      r[0] = p[0];
      r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
      r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position

      out[0] = r[0] + b[0];
      out[1] = r[1] + b[1];
      out[2] = r[2] + b[2];
      return out;
    }
    /**
     * Rotate a 3D vector around the y-axis
     * @param {vec3} out The receiving vec3
     * @param {vec3} a The vec3 point to rotate
     * @param {vec3} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec3} out
     */


    function rotateY(out, a, b, c) {
      var p = [],
          r = []; //Translate point to the origin

      p[0] = a[0] - b[0];
      p[1] = a[1] - b[1];
      p[2] = a[2] - b[2]; //perform rotation

      r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
      r[1] = p[1];
      r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position

      out[0] = r[0] + b[0];
      out[1] = r[1] + b[1];
      out[2] = r[2] + b[2];
      return out;
    }
    /**
     * Rotate a 3D vector around the z-axis
     * @param {vec3} out The receiving vec3
     * @param {vec3} a The vec3 point to rotate
     * @param {vec3} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec3} out
     */


    function rotateZ(out, a, b, c) {
      var p = [],
          r = []; //Translate point to the origin

      p[0] = a[0] - b[0];
      p[1] = a[1] - b[1];
      p[2] = a[2] - b[2]; //perform rotation

      r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
      r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
      r[2] = p[2]; //translate to correct position

      out[0] = r[0] + b[0];
      out[1] = r[1] + b[1];
      out[2] = r[2] + b[2];
      return out;
    }
    /**
     * Get the angle between two 3D vectors
     * @param {vec3} a The first operand
     * @param {vec3} b The second operand
     * @returns {Number} The angle in radians
     */


    function angle(a, b) {
      var tempA = fromValues(a[0], a[1], a[2]);
      var tempB = fromValues(b[0], b[1], b[2]);
      normalize(tempA, tempA);
      normalize(tempB, tempB);
      var cosine = dot(tempA, tempB);

      if (cosine > 1.0) {
        return 0;
      } else if (cosine < -1.0) {
        return Math.PI;
      } else {
        return Math.acos(cosine);
      }
    }
    /**
     * Returns a string representation of a vector
     *
     * @param {vec3} a vector to represent as a string
     * @returns {String} string representation of the vector
     */


    function str(a) {
      return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
    }
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     *
     * @param {vec3} a The first vector.
     * @param {vec3} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */


    function exactEquals(a, b) {
      return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     *
     * @param {vec3} a The first vector.
     * @param {vec3} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */


    function equals(a, b) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2];
      return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2));
    }
    /**
     * Alias for {@link vec3.subtract}
     * @function
     */


    var sub = subtract;
    /**
     * Alias for {@link vec3.multiply}
     * @function
     */

    var mul = multiply;
    /**
     * Alias for {@link vec3.divide}
     * @function
     */

    var div = divide;
    /**
     * Alias for {@link vec3.distance}
     * @function
     */

    var dist = distance;
    /**
     * Alias for {@link vec3.squaredDistance}
     * @function
     */

    var sqrDist = squaredDistance;
    /**
     * Alias for {@link vec3.length}
     * @function
     */

    var len = length;
    /**
     * Alias for {@link vec3.squaredLength}
     * @function
     */

    var sqrLen = squaredLength;
    /**
     * Perform some operation over an array of vec3s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */

    var forEach = function () {
      var vec = create();
      return function (a, stride, offset, count, fn, arg) {
        var i = void 0,
            l = void 0;

        if (!stride) {
          stride = 3;
        }

        if (!offset) {
          offset = 0;
        }

        if (count) {
          l = Math.min(count * stride + offset, a.length);
        } else {
          l = a.length;
        }

        for (i = offset; i < l; i += stride) {
          vec[0] = a[i];
          vec[1] = a[i + 1];
          vec[2] = a[i + 2];
          fn(vec, vec, arg);
          a[i] = vec[0];
          a[i + 1] = vec[1];
          a[i + 2] = vec[2];
        }

        return a;
      };
    }();
    /***/

  },
  /* 6 */

  /***/
  function (module, __webpack_exports__, __webpack_require__) {
    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", {
      value: true
    });
    /* harmony export (immutable) */

    __webpack_exports__["create"] = create;
    /* harmony export (immutable) */

    __webpack_exports__["clone"] = clone;
    /* harmony export (immutable) */

    __webpack_exports__["fromValues"] = fromValues;
    /* harmony export (immutable) */

    __webpack_exports__["copy"] = copy;
    /* harmony export (immutable) */

    __webpack_exports__["set"] = set;
    /* harmony export (immutable) */

    __webpack_exports__["add"] = add;
    /* harmony export (immutable) */

    __webpack_exports__["subtract"] = subtract;
    /* harmony export (immutable) */

    __webpack_exports__["multiply"] = multiply;
    /* harmony export (immutable) */

    __webpack_exports__["divide"] = divide;
    /* harmony export (immutable) */

    __webpack_exports__["ceil"] = ceil;
    /* harmony export (immutable) */

    __webpack_exports__["floor"] = floor;
    /* harmony export (immutable) */

    __webpack_exports__["min"] = min;
    /* harmony export (immutable) */

    __webpack_exports__["max"] = max;
    /* harmony export (immutable) */

    __webpack_exports__["round"] = round;
    /* harmony export (immutable) */

    __webpack_exports__["scale"] = scale;
    /* harmony export (immutable) */

    __webpack_exports__["scaleAndAdd"] = scaleAndAdd;
    /* harmony export (immutable) */

    __webpack_exports__["distance"] = distance;
    /* harmony export (immutable) */

    __webpack_exports__["squaredDistance"] = squaredDistance;
    /* harmony export (immutable) */

    __webpack_exports__["length"] = length;
    /* harmony export (immutable) */

    __webpack_exports__["squaredLength"] = squaredLength;
    /* harmony export (immutable) */

    __webpack_exports__["negate"] = negate;
    /* harmony export (immutable) */

    __webpack_exports__["inverse"] = inverse;
    /* harmony export (immutable) */

    __webpack_exports__["normalize"] = normalize;
    /* harmony export (immutable) */

    __webpack_exports__["dot"] = dot;
    /* harmony export (immutable) */

    __webpack_exports__["lerp"] = lerp;
    /* harmony export (immutable) */

    __webpack_exports__["random"] = random;
    /* harmony export (immutable) */

    __webpack_exports__["transformMat4"] = transformMat4;
    /* harmony export (immutable) */

    __webpack_exports__["transformQuat"] = transformQuat;
    /* harmony export (immutable) */

    __webpack_exports__["str"] = str;
    /* harmony export (immutable) */

    __webpack_exports__["exactEquals"] = exactEquals;
    /* harmony export (immutable) */

    __webpack_exports__["equals"] = equals;
    /* harmony export (binding) */

    __webpack_require__.d(__webpack_exports__, "sub", function () {
      return sub;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "mul", function () {
      return mul;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "div", function () {
      return div;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "dist", function () {
      return dist;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sqrDist", function () {
      return sqrDist;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "len", function () {
      return len;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sqrLen", function () {
      return sqrLen;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "forEach", function () {
      return forEach;
    });
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(0);
    /**
     * 4 Dimensional Vector
     * @module vec4
     */

    /**
     * Creates a new, empty vec4
     *
     * @returns {vec4} a new 4D vector
     */


    function create() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](4);

      if (__WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"] != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
      }

      return out;
    }
    /**
     * Creates a new vec4 initialized with values from an existing vector
     *
     * @param {vec4} a vector to clone
     * @returns {vec4} a new 4D vector
     */


    function clone(a) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](4);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      return out;
    }
    /**
     * Creates a new vec4 initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {vec4} a new 4D vector
     */


    function fromValues(x, y, z, w) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](4);
      out[0] = x;
      out[1] = y;
      out[2] = z;
      out[3] = w;
      return out;
    }
    /**
     * Copy the values from one vec4 to another
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the source vector
     * @returns {vec4} out
     */


    function copy(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      return out;
    }
    /**
     * Set the components of a vec4 to the given values
     *
     * @param {vec4} out the receiving vector
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {vec4} out
     */


    function set(out, x, y, z, w) {
      out[0] = x;
      out[1] = y;
      out[2] = z;
      out[3] = w;
      return out;
    }
    /**
     * Adds two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */


    function add(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
      out[3] = a[3] + b[3];
      return out;
    }
    /**
     * Subtracts vector b from vector a
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */


    function subtract(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      out[2] = a[2] - b[2];
      out[3] = a[3] - b[3];
      return out;
    }
    /**
     * Multiplies two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */


    function multiply(out, a, b) {
      out[0] = a[0] * b[0];
      out[1] = a[1] * b[1];
      out[2] = a[2] * b[2];
      out[3] = a[3] * b[3];
      return out;
    }
    /**
     * Divides two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */


    function divide(out, a, b) {
      out[0] = a[0] / b[0];
      out[1] = a[1] / b[1];
      out[2] = a[2] / b[2];
      out[3] = a[3] / b[3];
      return out;
    }
    /**
     * Math.ceil the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to ceil
     * @returns {vec4} out
     */


    function ceil(out, a) {
      out[0] = Math.ceil(a[0]);
      out[1] = Math.ceil(a[1]);
      out[2] = Math.ceil(a[2]);
      out[3] = Math.ceil(a[3]);
      return out;
    }
    /**
     * Math.floor the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to floor
     * @returns {vec4} out
     */


    function floor(out, a) {
      out[0] = Math.floor(a[0]);
      out[1] = Math.floor(a[1]);
      out[2] = Math.floor(a[2]);
      out[3] = Math.floor(a[3]);
      return out;
    }
    /**
     * Returns the minimum of two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */


    function min(out, a, b) {
      out[0] = Math.min(a[0], b[0]);
      out[1] = Math.min(a[1], b[1]);
      out[2] = Math.min(a[2], b[2]);
      out[3] = Math.min(a[3], b[3]);
      return out;
    }
    /**
     * Returns the maximum of two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */


    function max(out, a, b) {
      out[0] = Math.max(a[0], b[0]);
      out[1] = Math.max(a[1], b[1]);
      out[2] = Math.max(a[2], b[2]);
      out[3] = Math.max(a[3], b[3]);
      return out;
    }
    /**
     * Math.round the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to round
     * @returns {vec4} out
     */


    function round(out, a) {
      out[0] = Math.round(a[0]);
      out[1] = Math.round(a[1]);
      out[2] = Math.round(a[2]);
      out[3] = Math.round(a[3]);
      return out;
    }
    /**
     * Scales a vec4 by a scalar number
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {vec4} out
     */


    function scale(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      out[2] = a[2] * b;
      out[3] = a[3] * b;
      return out;
    }
    /**
     * Adds two vec4's after scaling the second operand by a scalar value
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @param {Number} scale the amount to scale b by before adding
     * @returns {vec4} out
     */


    function scaleAndAdd(out, a, b, scale) {
      out[0] = a[0] + b[0] * scale;
      out[1] = a[1] + b[1] * scale;
      out[2] = a[2] + b[2] * scale;
      out[3] = a[3] + b[3] * scale;
      return out;
    }
    /**
     * Calculates the euclidian distance between two vec4's
     *
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {Number} distance between a and b
     */


    function distance(a, b) {
      var x = b[0] - a[0];
      var y = b[1] - a[1];
      var z = b[2] - a[2];
      var w = b[3] - a[3];
      return Math.sqrt(x * x + y * y + z * z + w * w);
    }
    /**
     * Calculates the squared euclidian distance between two vec4's
     *
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {Number} squared distance between a and b
     */


    function squaredDistance(a, b) {
      var x = b[0] - a[0];
      var y = b[1] - a[1];
      var z = b[2] - a[2];
      var w = b[3] - a[3];
      return x * x + y * y + z * z + w * w;
    }
    /**
     * Calculates the length of a vec4
     *
     * @param {vec4} a vector to calculate length of
     * @returns {Number} length of a
     */


    function length(a) {
      var x = a[0];
      var y = a[1];
      var z = a[2];
      var w = a[3];
      return Math.sqrt(x * x + y * y + z * z + w * w);
    }
    /**
     * Calculates the squared length of a vec4
     *
     * @param {vec4} a vector to calculate squared length of
     * @returns {Number} squared length of a
     */


    function squaredLength(a) {
      var x = a[0];
      var y = a[1];
      var z = a[2];
      var w = a[3];
      return x * x + y * y + z * z + w * w;
    }
    /**
     * Negates the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to negate
     * @returns {vec4} out
     */


    function negate(out, a) {
      out[0] = -a[0];
      out[1] = -a[1];
      out[2] = -a[2];
      out[3] = -a[3];
      return out;
    }
    /**
     * Returns the inverse of the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to invert
     * @returns {vec4} out
     */


    function inverse(out, a) {
      out[0] = 1.0 / a[0];
      out[1] = 1.0 / a[1];
      out[2] = 1.0 / a[2];
      out[3] = 1.0 / a[3];
      return out;
    }
    /**
     * Normalize a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to normalize
     * @returns {vec4} out
     */


    function normalize(out, a) {
      var x = a[0];
      var y = a[1];
      var z = a[2];
      var w = a[3];
      var len = x * x + y * y + z * z + w * w;

      if (len > 0) {
        len = 1 / Math.sqrt(len);
        out[0] = x * len;
        out[1] = y * len;
        out[2] = z * len;
        out[3] = w * len;
      }

      return out;
    }
    /**
     * Calculates the dot product of two vec4's
     *
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {Number} dot product of a and b
     */


    function dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
    }
    /**
     * Performs a linear interpolation between two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec4} out
     */


    function lerp(out, a, b, t) {
      var ax = a[0];
      var ay = a[1];
      var az = a[2];
      var aw = a[3];
      out[0] = ax + t * (b[0] - ax);
      out[1] = ay + t * (b[1] - ay);
      out[2] = az + t * (b[2] - az);
      out[3] = aw + t * (b[3] - aw);
      return out;
    }
    /**
     * Generates a random vector with the given scale
     *
     * @param {vec4} out the receiving vector
     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {vec4} out
     */


    function random(out, scale) {
      scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a
      // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.
      // http://projecteuclid.org/euclid.aoms/1177692644;

      var v1, v2, v3, v4;
      var s1, s2;

      do {
        v1 = __WEBPACK_IMPORTED_MODULE_0__common_js__["RANDOM"]() * 2 - 1;
        v2 = __WEBPACK_IMPORTED_MODULE_0__common_js__["RANDOM"]() * 2 - 1;
        s1 = v1 * v1 + v2 * v2;
      } while (s1 >= 1);

      do {
        v3 = __WEBPACK_IMPORTED_MODULE_0__common_js__["RANDOM"]() * 2 - 1;
        v4 = __WEBPACK_IMPORTED_MODULE_0__common_js__["RANDOM"]() * 2 - 1;
        s2 = v3 * v3 + v4 * v4;
      } while (s2 >= 1);

      var d = Math.sqrt((1 - s1) / s2);
      out[0] = scale * v1;
      out[1] = scale * v2;
      out[2] = scale * v3 * d;
      out[3] = scale * v4 * d;
      return out;
    }
    /**
     * Transforms the vec4 with a mat4.
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the vector to transform
     * @param {mat4} m matrix to transform with
     * @returns {vec4} out
     */


    function transformMat4(out, a, m) {
      var x = a[0],
          y = a[1],
          z = a[2],
          w = a[3];
      out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
      out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
      out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
      out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
      return out;
    }
    /**
     * Transforms the vec4 with a quat
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the vector to transform
     * @param {quat} q quaternion to transform with
     * @returns {vec4} out
     */


    function transformQuat(out, a, q) {
      var x = a[0],
          y = a[1],
          z = a[2];
      var qx = q[0],
          qy = q[1],
          qz = q[2],
          qw = q[3]; // calculate quat * vec

      var ix = qw * x + qy * z - qz * y;
      var iy = qw * y + qz * x - qx * z;
      var iz = qw * z + qx * y - qy * x;
      var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

      out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
      out[3] = a[3];
      return out;
    }
    /**
     * Returns a string representation of a vector
     *
     * @param {vec4} a vector to represent as a string
     * @returns {String} string representation of the vector
     */


    function str(a) {
      return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
    }
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     *
     * @param {vec4} a The first vector.
     * @param {vec4} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */


    function exactEquals(a, b) {
      return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     *
     * @param {vec4} a The first vector.
     * @param {vec4} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */


    function equals(a, b) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3));
    }
    /**
     * Alias for {@link vec4.subtract}
     * @function
     */


    var sub = subtract;
    /**
     * Alias for {@link vec4.multiply}
     * @function
     */

    var mul = multiply;
    /**
     * Alias for {@link vec4.divide}
     * @function
     */

    var div = divide;
    /**
     * Alias for {@link vec4.distance}
     * @function
     */

    var dist = distance;
    /**
     * Alias for {@link vec4.squaredDistance}
     * @function
     */

    var sqrDist = squaredDistance;
    /**
     * Alias for {@link vec4.length}
     * @function
     */

    var len = length;
    /**
     * Alias for {@link vec4.squaredLength}
     * @function
     */

    var sqrLen = squaredLength;
    /**
     * Perform some operation over an array of vec4s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */

    var forEach = function () {
      var vec = create();
      return function (a, stride, offset, count, fn, arg) {
        var i = void 0,
            l = void 0;

        if (!stride) {
          stride = 4;
        }

        if (!offset) {
          offset = 0;
        }

        if (count) {
          l = Math.min(count * stride + offset, a.length);
        } else {
          l = a.length;
        }

        for (i = offset; i < l; i += stride) {
          vec[0] = a[i];
          vec[1] = a[i + 1];
          vec[2] = a[i + 2];
          vec[3] = a[i + 3];
          fn(vec, vec, arg);
          a[i] = vec[0];
          a[i + 1] = vec[1];
          a[i + 2] = vec[2];
          a[i + 3] = vec[3];
        }

        return a;
      };
    }();
    /***/

  },
  /* 7 */

  /***/
  function (module, __webpack_exports__, __webpack_require__) {
    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", {
      value: true
    });
    /* harmony import */

    var __WEBPACK_IMPORTED_MODULE_0_gl_matrix__ = __webpack_require__(1);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_1__css_style_css__ = __webpack_require__(13);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_1__css_style_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__css_style_css__);

    var MinimalGLTFLoader = __webpack_require__(12); // require('./lib/minimal-gltf-loader.js');
    // utils


    var Utils = Utils || {};

    (function () {
      'use strict';

      Utils.getShaderSource = function (id) {
        return document.getElementById(id).textContent.replace(/^\s+|\s+$/g, '');
      };

      function createShader(gl, source, type) {
        var shader = gl.createShader(type);
        gl.shaderSource(shader, source);
        gl.compileShader(shader);
        return shader;
      }

      Utils.createProgram = function (gl, vertexShaderSource, fragmentShaderSource) {
        var program = gl.createProgram();
        var vshader = createShader(gl, vertexShaderSource, gl.VERTEX_SHADER);
        var fshader = createShader(gl, fragmentShaderSource, gl.FRAGMENT_SHADER);
        gl.attachShader(program, vshader);
        gl.deleteShader(vshader);
        gl.attachShader(program, fshader);
        gl.deleteShader(fshader);
        gl.linkProgram(program);
        var log = gl.getProgramInfoLog(program);

        if (log) {
          console.log(log);
        }

        log = gl.getShaderInfoLog(vshader);

        if (log) {
          console.log(log);
        }

        log = gl.getShaderInfoLog(fshader);

        if (log) {
          console.log(log);
        }

        return program;
      };

      var loadImage = Utils.loadImage = function (url, onload) {
        var img = new Image();
        img.crossOrigin = "Anonymous";
        img.src = url; // img.onload = function() {
        //     onload(img);
        // };

        img.onload = onload;
        return img;
      };

      Utils.loadImages = function (urls, onload) {
        var imgs = [];
        var imgsToLoad = urls.length;

        function onImgLoad() {
          if (--imgsToLoad <= 0) {
            onload(imgs);
          }
        }

        for (var i = 0; i < imgsToLoad; ++i) {
          imgs.push(loadImage(urls[i], onImgLoad));
        }
      };
    })();

    (function () {
      'use strict';

      var animationSelectionList = [];
      var canvas = document.createElement('canvas'); // canvas.width = Math.min(window.innerWidth, window.innerHeight);
      // canvas.height = canvas.width;

      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      document.body.appendChild(canvas);
      var gl = canvas.getContext('webgl2', {
        antialias: true
      });
      var isWebGL2 = !!gl;

      if (!isWebGL2) {
        document.getElementById('info').innerHTML = 'WebGL 2 is not available.  See <a href="https://www.khronos.org/webgl/wiki/Getting_a_WebGL_Implementation">How to get a WebGL 2 implementation</a>';
        return;
      }

      canvas.oncontextmenu = function (e) {
        e.preventDefault();
      }; // Scene object for runtime renderer


      var Scene = function Scene(glTFScene, glTF, id) {
        this.glTFScene = glTFScene;
        this.glTF = glTF;
        this.id = id; // runtime renderer context

        this.rootTransform = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create(); // @temp, assume every node is in current scene

        this.nodeMatrix = new Array(glTF.nodes.length);
        var i, len;

        for (i = 0, len = this.nodeMatrix.length; i < len; i++) {
          this.nodeMatrix[i] = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create();
        } // TODO: runtime joint matrix

      };

      var BOUNDING_BOX = {
        vertexData: new Float32Array([0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0]),
        vertexArray: gl.createVertexArray(),
        vertexBuffer: gl.createBuffer(),
        program: Utils.createProgram(gl, __webpack_require__(18), __webpack_require__(19)),
        positionLocation: 0,
        uniformMvpLocation: 0,
        draw: function () {
          var MVP = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create();

          return function (bbox, nodeTransform, V, P) {
            // gl.useProgram(this.program);
            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(MVP, nodeTransform, bbox.transform);

            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(MVP, V, MVP);

            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(MVP, P, MVP);

            gl.uniformMatrix4fv(this.uniformMvpLocation, false, MVP); // gl.bindVertexArray(this.vertexArray);

            gl.drawArrays(gl.LINES, 0, 24); // gl.bindVertexArray(null);
          };
        }()
      };
      var defaultSampler = gl.createSampler();
      gl.samplerParameteri(defaultSampler, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);
      gl.samplerParameteri(defaultSampler, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.samplerParameteri(defaultSampler, gl.TEXTURE_WRAP_S, gl.REPEAT);
      gl.samplerParameteri(defaultSampler, gl.TEXTURE_WRAP_T, gl.REPEAT); // gl.samplerParameteri(defaultSampler, gl.TEXTURE_WRAP_R, gl.REPEAT);
      // gl.samplerParameterf(defaultSampler, gl.TEXTURE_MIN_LOD, -1000.0);
      // gl.samplerParameterf(defaultSampler, gl.TEXTURE_MAX_LOD, 1000.0);
      // gl.samplerParameteri(defaultSampler, gl.TEXTURE_COMPARE_MODE, gl.NONE);
      // gl.samplerParameteri(defaultSampler, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL);

      BOUNDING_BOX.uniformMvpLocation = gl.getUniformLocation(BOUNDING_BOX.program, "u_MVP");
      gl.bindVertexArray(BOUNDING_BOX.vertexArray);
      gl.bindBuffer(gl.ARRAY_BUFFER, BOUNDING_BOX.vertexBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, BOUNDING_BOX.vertexData, gl.STATIC_DRAW);
      gl.vertexAttribPointer(BOUNDING_BOX.positionLocation, 3, gl.FLOAT, false, 0, 0);
      gl.enableVertexAttribArray(BOUNDING_BOX.positionLocation);
      gl.bindVertexArray(null);
      var BRDF_LUT = {
        texture: null,
        textureIndex: 29,
        createTexture: function createTexture(img) {
          this.texture = gl.createTexture();
          gl.bindTexture(gl.TEXTURE_2D, this.texture);
          gl.texImage2D(gl.TEXTURE_2D, // assumed
          0, // Level of details
          gl.RG16F, // Format
          gl.RG, // gl.RGBA, // Format
          // gl.RGBA,
          // gl.UNSIGNED_BYTE, // Size of each channel
          gl.FLOAT, img);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
          gl.bindTexture(gl.TEXTURE_2D, null);
        } // Environment maps

      };
      var CUBE_MAP = {
        textureIndex: 31,
        texture: null,
        // IBL
        textureIBLDiffuseIndex: 30,
        textureIBLDiffuse: null,
        // loading asset --------------------
        // TODO: use webpack to pack these
        uris: [_environment_skyImage_px_jpg__WEBPACK_IMPORTED_MODULE_1___default.a, _environment_skyImage_nx_jpg__WEBPACK_IMPORTED_MODULE_2___default.a, _environment_skyImage_py_jpg__WEBPACK_IMPORTED_MODULE_3___default.a, _environment_skyImage_ny_jpg__WEBPACK_IMPORTED_MODULE_4___default.a, _environment_skyImage_pz_jpg__WEBPACK_IMPORTED_MODULE_5___default.a, _environment_skyImage_nz_jpg__WEBPACK_IMPORTED_MODULE_6___default.a, _environment_diffuse_bakedDiffuse_01_jpg__WEBPACK_IMPORTED_MODULE_7___default.a, _environment_diffuse_bakedDiffuse_02_jpg__WEBPACK_IMPORTED_MODULE_8___default.a, _environment_diffuse_bakedDiffuse_03_jpg__WEBPACK_IMPORTED_MODULE_9___default.a, _environment_diffuse_bakedDiffuse_04_jpg__WEBPACK_IMPORTED_MODULE_10___default.a, _environment_diffuse_bakedDiffuse_05_jpg__WEBPACK_IMPORTED_MODULE_11___default.a, _environment_diffuse_bakedDiffuse_06_jpg__WEBPACK_IMPORTED_MODULE_12___default.a, _environment_brdfLUT_png__WEBPACK_IMPORTED_MODULE_13___default.a],
        images: null,
        loadAll: function loadAll() {
          Utils.loadImages(this.uris, this.onloadAll.bind(this));
        },
        onloadAll: function onloadAll(imgs) {
          this.images = imgs;
          console.log('all cube maps loaded');
          this.texture = gl.createTexture();
          gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.NONE);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL);

          for (var i = 0; i < 6; i++) {
            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.images[i]);
          }

          gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
          gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
          this.textureIBLDiffuse = gl.createTexture();
          gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.textureIBLDiffuse);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.NONE);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL);

          for (var i = 0; i < 6; i++) {
            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.images[i + 6]);
          }

          gl.bindTexture(gl.TEXTURE_CUBE_MAP, null); // @tmp

          BRDF_LUT.createTexture(this.images[this.images.length - 1]);

          if (this.finishLoadingCallback) {
            this.finishLoadingCallback();
          }
        },
        finishLoadingCallback: null,
        // runtime stuffs -------------------------
        vertexData: new Float32Array([-1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0]),
        vertexArray: gl.createVertexArray(),
        vertexBuffer: gl.createBuffer(),
        program: Utils.createProgram(gl, __webpack_require__(20), __webpack_require__(21)),
        positionLocation: 0,
        uniformMvpLocation: 0,
        uniformEnvironmentLocation: 0,
        draw: function () {
          var MVP = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create();

          return function (V, P) {
            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].copy(MVP, V);

            MVP[12] = 0.0;
            MVP[13] = 0.0;
            MVP[14] = 0.0;
            MVP[15] = 1.0;

            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(MVP, P, MVP);

            gl.useProgram(this.program);
            gl.activeTexture(gl.TEXTURE0 + this.textureIndex);
            gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture);
            gl.uniformMatrix4fv(this.uniformMvpLocation, false, MVP);
            gl.uniform1i(this.uniformEnvironmentLocation, this.textureIndex);
            gl.bindVertexArray(this.vertexArray);
            gl.drawArrays(gl.TRIANGLES, 0, 36);
            gl.bindVertexArray(null);
          };
        }()
      };
      CUBE_MAP.uniformMvpLocation = gl.getUniformLocation(CUBE_MAP.program, "u_MVP");
      CUBE_MAP.uniformEnvironmentLocation = gl.getUniformLocation(CUBE_MAP.program, "u_environment");
      gl.bindVertexArray(CUBE_MAP.vertexArray);
      gl.bindBuffer(gl.ARRAY_BUFFER, CUBE_MAP.vertexBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, CUBE_MAP.vertexData, gl.STATIC_DRAW);
      gl.vertexAttribPointer(CUBE_MAP.positionLocation, 3, gl.FLOAT, false, 0, 0);
      gl.enableVertexAttribArray(CUBE_MAP.positionLocation);
      gl.bindVertexArray(null);
      var Shader_Static = {
        shaderVersionLine: '#version 300 es\n',
        bitMasks: {
          // vertex shader
          HAS_SKIN: 1,
          SKIN_VEC8: 2,
          // fragment shader
          HAS_BASECOLORMAP: 4,
          HAS_NORMALMAP: 8,
          HAS_METALROUGHNESSMAP: 16,
          HAS_OCCLUSIONMAP: 32,
          HAS_EMISSIVEMAP: 64
        },
        vsMasterCode: __webpack_require__(22),
        fsMasterCode: __webpack_require__(23),
        programObjects: {} // < flags, Shader Object >

      };

      var Shader = function Shader() {
        this.flags = 0;
        this.programObject = null;
      };

      Shader.prototype.hasSkin = function () {
        return this.flags & Shader_Static.bitMasks.HAS_SKIN;
      };

      Shader.prototype.hasBaseColorMap = function () {
        return this.flags & Shader_Static.bitMasks.HAS_BASECOLORMAP;
      };

      Shader.prototype.hasNormalMap = function () {
        return this.flags & Shader_Static.bitMasks.HAS_NORMALMAP;
      };

      Shader.prototype.hasMetalRoughnessMap = function () {
        return this.flags & Shader_Static.bitMasks.HAS_METALROUGHNESSMAP;
      };

      Shader.prototype.hasOcclusionMap = function () {
        return this.flags & Shader_Static.bitMasks.HAS_OCCLUSIONMAP;
      };

      Shader.prototype.hasEmissiveMap = function () {
        return this.flags & Shader_Static.bitMasks.HAS_EMISSIVEMAP;
      };

      Shader.prototype.defineMacro = function (macro) {
        if (Shader_Static.bitMasks[macro] !== undefined) {
          this.flags = Shader_Static.bitMasks[macro] | this.flags;
        } else {
          console.log('WARNING: ' + macro + ' is not a valid macro');
        }
      };

      Shader.prototype.compile = function () {
        var existingProgramObject = Shader_Static.programObjects[this.flags];

        if (existingProgramObject) {
          this.programObject = existingProgramObject;
          return;
        } // new program


        var vsDefine = '';
        var fsDefine = ''; // define macros

        if (this.flags & Shader_Static.bitMasks.HAS_SKIN) {
          vsDefine += '#define HAS_SKIN\n';
        }

        if (this.flags & Shader_Static.bitMasks.SKIN_VEC8) {
          vsDefine += '#define SKIN_VEC8\n';
        }

        if (this.flags & Shader_Static.bitMasks.HAS_BASECOLORMAP) {
          fsDefine += '#define HAS_BASECOLORMAP\n';
        }

        if (this.flags & Shader_Static.bitMasks.HAS_NORMALMAP) {
          fsDefine += '#define HAS_NORMALMAP\n';
        }

        if (this.flags & Shader_Static.bitMasks.HAS_METALROUGHNESSMAP) {
          fsDefine += '#define HAS_METALROUGHNESSMAP\n';
        }

        if (this.flags & Shader_Static.bitMasks.HAS_OCCLUSIONMAP) {
          fsDefine += '#define HAS_OCCLUSIONMAP\n';
        }

        if (this.flags & Shader_Static.bitMasks.HAS_EMISSIVEMAP) {
          fsDefine += '#define HAS_EMISSIVEMAP\n';
        } // concat


        var vertexShaderSource = Shader_Static.shaderVersionLine + vsDefine + Shader_Static.vsMasterCode;
        var fragmentShaderSource = Shader_Static.shaderVersionLine + fsDefine + Shader_Static.fsMasterCode; // compile

        var program = Utils.createProgram(gl, vertexShaderSource, fragmentShaderSource);
        this.programObject = {
          program: program,
          uniformLocations: {},
          uniformBlockIndices: {}
        }; // uniform block id

        if (this.flags & Shader_Static.bitMasks.HAS_SKIN) {
          this.programObject.uniformBlockIndices.JointMatrix = gl.getUniformBlockIndex(program, "JointMatrix");
        } // uniform locations


        var us = this.programObject.uniformLocations;
        us.MVP = gl.getUniformLocation(program, 'u_MVP');
        us.MVNormal = gl.getUniformLocation(program, 'u_MVNormal');
        us.MV = gl.getUniformLocation(program, 'u_MV');
        us.baseColorFactor = gl.getUniformLocation(program, 'u_baseColorFactor');
        us.metallicFactor = gl.getUniformLocation(program, 'u_metallicFactor');
        us.roughnessFactor = gl.getUniformLocation(program, 'u_roughnessFactor');

        if (this.flags & Shader_Static.bitMasks.HAS_BASECOLORMAP) {
          us.baseColorTexture = gl.getUniformLocation(program, 'u_baseColorTexture');
        }

        if (this.flags & Shader_Static.bitMasks.HAS_NORMALMAP) {
          us.normalTexture = gl.getUniformLocation(program, 'u_normalTexture');
          us.normalTextureScale = gl.getUniformLocation(program, 'u_normalTextureScale');
        }

        if (this.flags & Shader_Static.bitMasks.HAS_METALROUGHNESSMAP) {
          us.metallicRoughnessTexture = gl.getUniformLocation(program, 'u_metallicRoughnessTexture');
        }

        if (this.flags & Shader_Static.bitMasks.HAS_OCCLUSIONMAP) {
          us.occlusionTexture = gl.getUniformLocation(program, 'u_occlusionTexture');
          us.occlusionStrength = gl.getUniformLocation(program, 'u_occlusionStrength');
        }

        if (this.flags & Shader_Static.bitMasks.HAS_EMISSIVEMAP) {
          us.emissiveTexture = gl.getUniformLocation(program, 'u_emissiveTexture');
          us.emissiveFactor = gl.getUniformLocation(program, 'u_emissiveFactor');
        }

        us.diffuseEnvSampler = gl.getUniformLocation(program, 'u_DiffuseEnvSampler');
        us.specularEnvSampler = gl.getUniformLocation(program, 'u_SpecularEnvSampler');
        us.brdfLUT = gl.getUniformLocation(program, 'u_brdfLUT'); // set static uniform values in cubemap

        gl.useProgram(program);
        gl.uniform1i(us.brdfLUT, BRDF_LUT.textureIndex);
        gl.uniform1i(us.specularEnvSampler, CUBE_MAP.textureIndex);
        gl.uniform1i(us.diffuseEnvSampler, CUBE_MAP.textureIBLDiffuseIndex);
        gl.useProgram(null);
        Shader_Static.programObjects[this.flags] = this.programObject;
      }; // -- Initialize vertex array


      var POSITION_LOCATION = 0; // set with GLSL layout qualifier

      var NORMAL_LOCATION = 1; // set with GLSL layout qualifier

      var TEXCOORD_0_LOCATION = 2; // set with GLSL layout qualifier

      var JOINTS_0_LOCATION = 3; // set with GLSL layout qualifier

      var JOINTS_1_LOCATION = 5; // set with GLSL layout qualifier

      var WEIGHTS_0_LOCATION = 4; // set with GLSL layout qualifier

      var WEIGHTS_1_LOCATION = 6; // set with GLSL layout qualifier
      // -- Mouse Behaviour

      var s = 1;
      var eulerX = 0;
      var eulerY = 0; // var s = 1;
      // var t = -100;

      var translate = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].create(); // var t = -5;


      var modelMatrix = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create();

      var mouseDown = false;
      var mouseButtonId = 0;
      var lastMouseY = 0;
      var lastMouseX = 0;

      var identityQ = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["quat"].create();

      window.onmousedown = function (event) {
        mouseDown = true;
        mouseButtonId = event.which;
        lastMouseY = event.clientY;
        lastMouseX = event.clientX;

        if (mouseButtonId === 1) {
          isDisplayRotation = false;
        }
      };

      window.onmouseup = function (event) {
        mouseDown = false;
        isDisplayRotation = true;
      };

      window.onmousemove = function (event) {
        if (!mouseDown) {
          return;
        }

        var newY = event.clientY;
        var newX = event.clientX;
        var deltaY = newY - lastMouseY;
        var deltaX = newX - lastMouseX; // s *= (1 + deltaY / 1000);

        switch (mouseButtonId) {
          case 1:
            // left: rotation
            eulerX += -deltaY * 0.01;
            eulerY += deltaX * 0.01;
            break;

          case 3:
            // right
            translate[0] += deltaX * 0.001;
            translate[1] += -deltaY * 0.001;
            break;
        }

        lastMouseY = newY;
        lastMouseX = newX;
      };

      window.onwheel = function (event) {
        translate[2] += -event.deltaY * 0.001; // translate[2] *= 1 + (-event.deltaY * 0.01);
      };

      var glTFLoader = new MinimalGLTFLoader.glTFLoader(gl);
      var glTFModelCount = 1;
      var scenes = [];
      gl.enable(gl.CULL_FACE);
      gl.cullFace(gl.BACK);
      gl.frontFace(gl.CCW);
      var isFaceCulling = true;

      function setupScene(glTF, replaceScene) {
        var i, len; // update animation list

        for (i = animationSelectionList.length - 1; i >= 0; i--) {
          animationSelectionList.remove(i);
        }

        if (glTF.animations) {
          var option;

          for (i = 0, len = glTF.animations.length; i < len; i++) {
            animationSelectionList.push(glTF.animations[i].name || i);
          }
        }

        console.log(animationSelectionList);
        curAnimationId = 0; // ----------------

        var curGltfScene = glTF.scenes[glTF.defaultScene];

        var sceneDeltaTranslate = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].fromValues(curGltfScene.boundingBox.transform[0] * 1.2, 0, 0);

        var tmpVec3Translate = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].create();

        var newGltfRuntimeScene;

        if (!replaceScene) {
          newGltfRuntimeScene = new Scene(curGltfScene, glTF, scenes.length);
          scenes.push(newGltfRuntimeScene);
        } else {
          newGltfRuntimeScene = scenes[replaceScene.id] = new Scene(curGltfScene, glTF, replaceScene.id);
        } // for (i = 0, len = glTFModelCount; i < len; i++) {
        //     scenes.push(new Scene(curGltfScene, glTF));
        //     // vec3.scale(tmpVec3Translate, sceneDeltaTranslate, i);
        //     // mat4.fromTranslation(scenes[i].rootTransform, tmpVec3Translate);
        // }


        if (scenes.length === 1) {
          // first model, adjust camera
          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].identity(modelMatrix); // center


          s = 1.0 / Math.max(curGltfScene.boundingBox.transform[0], Math.max(curGltfScene.boundingBox.transform[5], curGltfScene.boundingBox.transform[10]));

          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].getTranslation(translate, curGltfScene.boundingBox.transform);

          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].scale(translate, translate, -1);

          translate[0] += -0.5 * curGltfScene.boundingBox.transform[0];
          translate[1] += -0.5 * curGltfScene.boundingBox.transform[5];
          translate[2] += -0.5 * curGltfScene.boundingBox.transform[10];
          s *= 0.5;
          modelMatrix[0] = s;
          modelMatrix[5] = s;
          modelMatrix[10] = s;

          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].translate(modelMatrix, modelMatrix, translate);

          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].set(translate, 0, 0, -1.5);

          s = 1;
        } // var in loop


        var mesh;
        var primitive;
        var vertexBuffer;
        var indexBuffer;
        var vertexArray;
        var nid, lenNodes;
        var mid, lenMeshes;
        var attribute;
        var material;
        var image, texture, sampler;
        var accessor, bufferView;
        var animation, animationSampler, channel;
        var skin; // create buffers

        for (i = 0, len = glTF.bufferViews.length; i < len; i++) {
          bufferView = glTF.bufferViews[i];
          bufferView.createBuffer(gl);
          bufferView.bindData(gl);
        } // create textures


        if (glTF.textures) {
          for (i = 0, len = glTF.textures.length; i < len; i++) {
            texture = glTF.textures[i];
            texture.createTexture(gl);
          }
        } // create samplers


        if (glTF.samplers) {
          for (i = 0, len = glTF.samplers.length; i < len; i++) {
            sampler = glTF.samplers[i];
            sampler.createSampler(gl);
          }
        }

        if (glTF.skins) {
          // gl.useProgram(programSkinBaseColor.program);
          // gl.uniformBlockBinding(programSkinBaseColor.program, programSkinBaseColor.uniformBlockIndexJointMatrix, 0);
          // gl.useProgram(null);
          for (i = 0, len = glTF.skins.length; i < len; i++) {
            skin = glTF.skins[i];
            skin.jointMatrixUniformBuffer = gl.createBuffer(); // gl.bindBufferBase(gl.UNIFORM_BUFFER, i, skin.jointMatrixUniformBuffer);

            gl.bindBufferBase(gl.UNIFORM_BUFFER, skin.uniformBlockID, skin.jointMatrixUniformBuffer);
            gl.bindBuffer(gl.UNIFORM_BUFFER, skin.jointMatrixUniformBuffer);
            gl.bufferData(gl.UNIFORM_BUFFER, skin.jointMatrixUnidormBufferData, gl.DYNAMIC_DRAW);
            gl.bufferSubData(gl.UNIFORM_BUFFER, 0, skin.jointMatrixUnidormBufferData);
            gl.bindBuffer(gl.UNIFORM_BUFFER, null);
          }
        }

        function setupAttribuite(attrib, location) {
          if (attrib !== undefined) {
            // var accessor = glTF.accessors[ attrib ];
            var accessor = attrib;
            var bufferView = accessor.bufferView;

            if (bufferView.target === null) {
              // console.log('WARNING: the bufferview of this accessor should have a target, or it should represent non buffer data (like animation)');
              gl.bindBuffer(gl.ARRAY_BUFFER, bufferView.buffer);
              gl.bufferData(gl.ARRAY_BUFFER, bufferView.data, gl.STATIC_DRAW);
            } else {
              gl.bindBuffer(bufferView.target, bufferView.buffer);
            }

            accessor.prepareVertexAttrib(location, gl);
            return true;
          }

          return false;
        } // create vaos & materials shader source setup


        for (mid = 0, lenMeshes = glTF.meshes.length; mid < lenMeshes; mid++) {
          mesh = glTF.meshes[mid]; // vertexArrayMaps[mid] = [];

          for (i = 0, len = mesh.primitives.length; i < len; ++i) {
            primitive = mesh.primitives[i];
            primitive.shader = new Shader(); // WebGL2: create vertexArray

            primitive.vertexArray = vertexArray = gl.createVertexArray();
            gl.bindVertexArray(vertexArray);
            setupAttribuite(primitive.attributes.POSITION, POSITION_LOCATION);
            setupAttribuite(primitive.attributes.NORMAL, NORMAL_LOCATION); // @tmp, should consider together with material

            setupAttribuite(primitive.attributes.TEXCOORD_0, TEXCOORD_0_LOCATION);

            if (setupAttribuite(primitive.attributes.JOINTS_0, JOINTS_0_LOCATION) && setupAttribuite(primitive.attributes.WEIGHTS_0, WEIGHTS_0_LOCATION)) {
              // assume these two attributes always appear together
              primitive.shader.defineMacro('HAS_SKIN');
            }

            if (setupAttribuite(primitive.attributes.JOINTS_1, JOINTS_1_LOCATION) && setupAttribuite(primitive.attributes.WEIGHTS_1, WEIGHTS_1_LOCATION)) {
              // assume these two attributes always appear together
              primitive.shader.defineMacro('SKIN_VEC8');
            } // indices ( assume use indices )


            if (primitive.indices !== null) {
              accessor = glTF.accessors[primitive.indices];
              bufferView = accessor.bufferView;

              if (bufferView.target === null) {
                // console.log('WARNING: the bufferview of this accessor should have a target, or it should represent non buffer data (like animation)');
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferView.buffer);
                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, bufferView.data, gl.STATIC_DRAW);
              } else {
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferView.buffer);
              }
            }

            gl.bindVertexArray(null);
            gl.bindBuffer(gl.ARRAY_BUFFER, null);
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null); // material shader setup

            material = primitive.material;

            if (material) {
              if (material.pbrMetallicRoughness.baseColorTexture) {
                primitive.shader.defineMacro('HAS_BASECOLORMAP');
              }

              if (material.pbrMetallicRoughness.metallicRoughnessTexture) {
                primitive.shader.defineMacro('HAS_METALROUGHNESSMAP');
              }

              if (material.normalTexture) {
                primitive.shader.defineMacro('HAS_NORMALMAP');
              }

              if (material.occlusionTexture) {
                primitive.shader.defineMacro('HAS_OCCLUSIONMAP');
              }

              if (material.emissiveTexture) {
                primitive.shader.defineMacro('HAS_EMISSIVEMAP');
              }
            }

            primitive.shader.compile();
          }
        }

        return newGltfRuntimeScene;
      } // -- Render preparation


      gl.enable(gl.DEPTH_TEST);
      gl.depthFunc(gl.LEQUAL);
      var Renderer = Renderer || {};
      var program = null; // current program object

      (function () {
        'use strict';

        var scale = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].create();

        var r = 0.0;
        var rotationSpeedY = 0.001; // var rotationSpeedY= 0.0;

        var perspective = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create();

        __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].perspective(perspective, 0.785, canvas.width / canvas.height, 0.01, 100);

        var modelView = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create();

        var localMV = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create();

        var localMVP = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create();

        var localMVNormal = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create();

        var VP = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create();

        var hasIndices = true;
        var hasSkin = false;
        var uniformBlockID; // same for uniform block binding id

        var curScene;

        function activeAndBindTexture(uniformLocation, textureInfo) {
          gl.uniform1i(uniformLocation, textureInfo.index);
          gl.activeTexture(gl.TEXTURE0 + textureInfo.index);
          var texture = curScene.glTF.textures[textureInfo.index];
          gl.bindTexture(gl.TEXTURE_2D, texture.texture);
          var sampler;

          if (texture.sampler) {
            sampler = texture.sampler.sampler;
          } else {
            sampler = defaultSampler;
          }

          gl.bindSampler(textureInfo.index, sampler);
        }

        var defaultColor = [1.0, 1.0, 1.0, 1.0];

        var drawPrimitive = Renderer.drawPrimitive = function (primitive, matrix) {
          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].multiply(localMV, modelView, matrix);

          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].multiply(localMVP, perspective, localMV); // mat4.multiply(localMVP, VP, matrix);


          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].invert(localMVNormal, localMV);

          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].transpose(localMVNormal, localMVNormal);

          var texture, sampler;
          var baseColor = defaultColor;
          var shader = primitive.shader;
          var material = primitive.material;

          if (material !== null) {
            var pbrMetallicRoughness = material.pbrMetallicRoughness;
            baseColor = pbrMetallicRoughness.baseColorFactor;

            if (primitive.material.doubleSided === isFaceCulling) {
              isFaceCulling = !primitive.material.doubleSided;

              if (isFaceCulling) {
                gl.enable(gl.CULL_FACE);
              } else {
                gl.disable(gl.CULL_FACE);
              }
            }
          }

          if (program != primitive.shader.programObject) {
            program = primitive.shader.programObject;
            gl.useProgram(program.program);
          }

          if (material) {
            // base color texture
            if (shader.hasBaseColorMap()) {
              activeAndBindTexture(program.uniformLocations.baseColorTexture, pbrMetallicRoughness.baseColorTexture);
            } // normal texture


            if (shader.hasNormalMap()) {
              activeAndBindTexture(program.uniformLocations.normalTexture, material.normalTexture);
              gl.uniform1f(program.uniformLocations.normalTextureScale, material.normalTexture.scale);
            } // metallic roughness texture


            if (shader.hasMetalRoughnessMap()) {
              activeAndBindTexture(program.uniformLocations.metallicRoughnessTexture, pbrMetallicRoughness.metallicRoughnessTexture);
            }

            gl.uniform1f(program.uniformLocations.metallicFactor, pbrMetallicRoughness.metallicFactor);
            gl.uniform1f(program.uniformLocations.roughnessFactor, pbrMetallicRoughness.roughnessFactor); // occlusion texture

            if (shader.hasOcclusionMap()) {
              activeAndBindTexture(program.uniformLocations.occlusionTexture, material.occlusionTexture);
              gl.uniform1f(program.uniformLocations.occlusionStrength, material.occlusionTexture.strength);
            } // emissive texture


            if (shader.hasEmissiveMap()) {
              activeAndBindTexture(program.uniformLocations.emissiveTexture, material.emissiveTexture);
              gl.uniform3fv(program.uniformLocations.emissiveFactor, material.emissiveFactor);
            }
          } // TODO: skin JointMatrix uniform block


          if (shader.hasSkin()) {
            gl.uniformBlockBinding(program.program, program.uniformBlockIndices.JointMatrix, uniformBlockID);
          }

          gl.activeTexture(gl.TEXTURE0 + BRDF_LUT.textureIndex);
          gl.bindTexture(gl.TEXTURE_2D, BRDF_LUT.texture); // console.log( (gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S)).toString(16) );            

          gl.activeTexture(gl.TEXTURE0 + CUBE_MAP.textureIndex);
          gl.bindTexture(gl.TEXTURE_CUBE_MAP, CUBE_MAP.texture);
          gl.activeTexture(gl.TEXTURE0 + CUBE_MAP.textureIBLDiffuseIndex);
          gl.bindTexture(gl.TEXTURE_CUBE_MAP, CUBE_MAP.textureIBLDiffuse);
          gl.uniform4fv(program.uniformLocations.baseColorFactor, baseColor);
          gl.uniformMatrix4fv(program.uniformLocations.MV, false, localMV);
          gl.uniformMatrix4fv(program.uniformLocations.MVP, false, localMVP);
          gl.uniformMatrix4fv(program.uniformLocations.MVNormal, false, localMVNormal);
          gl.bindVertexArray(primitive.vertexArray);

          if (primitive.indices !== null) {
            gl.drawElements(primitive.mode, primitive.indicesLength, primitive.indicesComponentType, primitive.indicesOffset);
          } else {
            gl.drawArrays(primitive.mode, primitive.drawArraysOffset, primitive.drawArraysCount);
          }

          gl.bindVertexArray(null);
        };

        var tmpMat4 = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create();

        var inverseTransformMat4 = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create(); // @todo: 
        // in a real engine, it is better to simply parse the node tree stucture
        // to compute transform matrices,
        // then sort node array by material and render use a for loop
        // to minimize context switch


        var drawNode = Renderer.drawNode = function (node, nodeID, nodeMatrix, parentModelMatrix) {
          var matrix = nodeMatrix[nodeID];

          if (parentModelMatrix !== undefined) {
            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(matrix, parentModelMatrix, node.matrix);
          } else {
            // from scene root, parent is identity
            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].copy(matrix, node.matrix);
          } // mat4.mul(matrix, parentModelMatrix, node.matrix);


          hasSkin = false;

          if (node.skin !== null) {
            // mesh node with skin
            hasSkin = true;
            var skin = node.skin;
            uniformBlockID = skin.uniformBlockID;
            var joints = node.skin.joints;
            var jointNode;

            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].invert(inverseTransformMat4, matrix); // @tmp: assume joint nodes are always in the front of the scene node list
            // so that their matrices are ready to use


            for (i = 0, len = joints.length; i < len; i++) {
              jointNode = joints[i];

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(tmpMat4, nodeMatrix[jointNode.nodeID], skin.inverseBindMatrix[i]);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(tmpMat4, inverseTransformMat4, tmpMat4); // if (skin.skeleton !== null) {
              //     mat4.mul(tmpMat4, inverseSkeletonRootMat4, tmpMat4);
              // }


              skin.jointMatrixUnidormBufferData.set(tmpMat4, i * 16);
            }

            gl.bindBuffer(gl.UNIFORM_BUFFER, skin.jointMatrixUniformBuffer);
            gl.bufferSubData(gl.UNIFORM_BUFFER, 0, skin.jointMatrixUnidormBufferData, 0, skin.jointMatrixUnidormBufferData.length);
          }

          var i, len; // draw cur node's mesh

          if (node.mesh !== null) {
            // drawMesh(glTF.meshes[node.mesh], matrix);
            // var mesh = glTF.meshes[node.mesh];
            var mesh = node.mesh;

            for (i = 0, len = mesh.primitives.length; i < len; i++) {
              // draw primitive
              drawPrimitive(mesh.primitives[i], matrix);
            } // BOUNDING_BOX.draw(mesh.boundingBox, matrix, modelView, perspective);
            // gl.useProgram(program);

          }

          if (node.skin !== null) {
            gl.bindBuffer(gl.UNIFORM_BUFFER, null);
          } // draw children


          var childNodeID;

          for (i = 0, len = node.children.length; i < len; i++) {
            // childNodeID = node.children[i];
            // drawNode(glTF.nodes[childNodeID], childNodeID, matrix);
            drawNode(node.children[i], node.children[i].nodeID, nodeMatrix, matrix);
          }
        };

        function applyAnimation(animation, glTF) {
          var j, lenj;
          var channel, animationSampler, node;

          for (j = 0, lenj = animation.samplers.length; j < lenj; j++) {
            animation.samplers[j].getValue(timeParameter);
          }

          for (j = 0, lenj = animation.channels.length; j < lenj; j++) {
            channel = animation.channels[j];
            animationSampler = channel.sampler;
            node = glTF.nodes[channel.target.nodeID];

            switch (channel.target.path) {
              case 'rotation':
                __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec4"].copy(node.rotation, animationSampler.curValue);

                break;

              case 'translation':
                __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].copy(node.translation, animationSampler.curValue);

                break;

              case 'scale':
                __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].copy(node.scale, animationSampler.curValue);

                break;
            }

            node.updateMatrixFromTRS();
          }
        }

        var drawScene = Renderer.drawScene = function (scene) {
          // animation
          var animation;
          var i, len;
          var glTF = scene.glTF;

          if (glTF.animations) {
            if (playAllAnimationTogether) {
              for (i = 0, len = glTF.animations.length; i < len; i++) {
                animation = glTF.animations[i];
                applyAnimation(animation, glTF);
              }
            } else {
              animation = glTF.animations[curAnimationId];
              applyAnimation(animation, glTF);
            }
          }

          for (var i = 0, len = scene.glTFScene.nodes.length; i < len; i++) {
            drawNode(scene.glTFScene.nodes[i], scene.glTFScene.nodes[i].nodeID, scene.nodeMatrix, scene.rootTransform);
          }
        };

        var drawSceneBBox = Renderer.drawSceneBBox = function (glTF, scene, bboxType) {
          var node, mesh, bbox; // @temp: assume all nodes are in cur scene
          // @potential fix: can label each node's scene at the setup

          var i, len;

          for (i = 0, len = scene.nodeMatrix.length; i < len; i++) {
            node = glTF.nodes[i];

            if (bboxType == 'bvh') {
              // bvh
              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(localMVP, scene.rootTransform, node.bvh.transform);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(localMVP, VP, localMVP);

              gl.uniformMatrix4fv(BOUNDING_BOX.uniformMvpLocation, false, localMVP);
              gl.drawArrays(gl.LINES, 0, 24);
            } else if (node.mesh !== null) {
              // mesh = glTF.meshes[node.mesh];
              mesh = node.mesh;

              if (bboxType == 'aabb') {
                // aabb
                __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(localMVP, scene.rootTransform, node.aabb.transform);

                __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(localMVP, VP, localMVP);
              } else {
                // obb (assume object node is static)
                __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(localMVP, scene.nodeMatrix[i], mesh.boundingBox.transform);

                __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(localMVP, VP, localMVP);
              }

              gl.uniformMatrix4fv(BOUNDING_BOX.uniformMvpLocation, false, localMVP);
              gl.drawArrays(gl.LINES, 0, 24);
            }
          } // // scene bounding box
          // mat4.mul(localMVP, scene.rootTransform, scene.glTFScene.boundingBox.transform);
          // mat4.mul(localMVP, VP, localMVP);
          // gl.uniformMatrix4fv(BOUNDING_BOX.uniformMvpLocation, false, localMVP);
          // gl.drawArrays(gl.LINES, 0, 24);

        };

        var timeStampZero = performance.now();
        var timeParameter = 0; // -- Render loop
        // function render() {

        var render = Renderer.render = function (timestamp) {
          var i, len;
          var j, lenj;
          var node;
          gl.clearColor(0.0, 0.0, 0.0, 1.0);
          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].set(scale, s, s, s); // mat4.identity(modelView);
          // mat4.translate(modelView, modelView, translate);
          // mat4.scale(modelView, modelView, scale);
          // mat4.fromRotationTranslationScale(modelView, identityQ, translate, scale);
          // mat4.mul(modelView, modelView, modelMatrix);


          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].identity(modelView);

          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].translate(modelView, modelView, translate);

          if (isDisplayRotation) {
            r += rotationSpeedY;
          }

          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].rotateX(modelView, modelView, eulerX);

          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].rotateY(modelView, modelView, r);

          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].scale(modelView, modelView, scale);

          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(modelView, modelView, modelMatrix);

          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].rotateY(modelView, modelView, eulerY);

          __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(VP, perspective, modelView);

          for (i = 0, len = scenes.length; i < len; i++) {
            curScene = scenes[i];
            drawScene(scenes[i]);
          }

          if (drawBoundingBox) {
            gl.useProgram(BOUNDING_BOX.program);
            gl.bindVertexArray(BOUNDING_BOX.vertexArray);

            for (i = 0, len = scenes.length; i < len; i++) {
              drawSceneBBox(scenes[i].glTF, scenes[i], boundingBoxType);
            }

            gl.bindVertexArray(null);
          } // cube map


          CUBE_MAP.draw(modelView, perspective);
          program = null;
          timeParameter = (timestamp - timeStampZero) * 0.001;
          requestAnimationFrame(render);
        };
      })();

      CUBE_MAP.finishLoadingCallback = function () {
        glTFLoader.loadGLTF(gltfUrl, function (glTF) {
          setupScene(glTF);
          Renderer.render();
        });
      };

      CUBE_MAP.loadAll();
    })();
    /***/

  },
  /* 8 */

  /***/
  function (module, __webpack_exports__, __webpack_require__) {
    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", {
      value: true
    });
    /* harmony export (immutable) */

    __webpack_exports__["create"] = create;
    /* harmony export (immutable) */

    __webpack_exports__["clone"] = clone;
    /* harmony export (immutable) */

    __webpack_exports__["copy"] = copy;
    /* harmony export (immutable) */

    __webpack_exports__["identity"] = identity;
    /* harmony export (immutable) */

    __webpack_exports__["fromValues"] = fromValues;
    /* harmony export (immutable) */

    __webpack_exports__["set"] = set;
    /* harmony export (immutable) */

    __webpack_exports__["transpose"] = transpose;
    /* harmony export (immutable) */

    __webpack_exports__["invert"] = invert;
    /* harmony export (immutable) */

    __webpack_exports__["adjoint"] = adjoint;
    /* harmony export (immutable) */

    __webpack_exports__["determinant"] = determinant;
    /* harmony export (immutable) */

    __webpack_exports__["multiply"] = multiply;
    /* harmony export (immutable) */

    __webpack_exports__["rotate"] = rotate;
    /* harmony export (immutable) */

    __webpack_exports__["scale"] = scale;
    /* harmony export (immutable) */

    __webpack_exports__["fromRotation"] = fromRotation;
    /* harmony export (immutable) */

    __webpack_exports__["fromScaling"] = fromScaling;
    /* harmony export (immutable) */

    __webpack_exports__["str"] = str;
    /* harmony export (immutable) */

    __webpack_exports__["frob"] = frob;
    /* harmony export (immutable) */

    __webpack_exports__["LDU"] = LDU;
    /* harmony export (immutable) */

    __webpack_exports__["add"] = add;
    /* harmony export (immutable) */

    __webpack_exports__["subtract"] = subtract;
    /* harmony export (immutable) */

    __webpack_exports__["exactEquals"] = exactEquals;
    /* harmony export (immutable) */

    __webpack_exports__["equals"] = equals;
    /* harmony export (immutable) */

    __webpack_exports__["multiplyScalar"] = multiplyScalar;
    /* harmony export (immutable) */

    __webpack_exports__["multiplyScalarAndAdd"] = multiplyScalarAndAdd;
    /* harmony export (binding) */

    __webpack_require__.d(__webpack_exports__, "mul", function () {
      return mul;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sub", function () {
      return sub;
    });
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(0);
    /**
     * 2x2 Matrix
     * @module mat2
     */

    /**
     * Creates a new identity mat2
     *
     * @returns {mat2} a new 2x2 matrix
     */


    function create() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](4);

      if (__WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"] != Float32Array) {
        out[1] = 0;
        out[2] = 0;
      }

      out[0] = 1;
      out[3] = 1;
      return out;
    }
    /**
     * Creates a new mat2 initialized with values from an existing matrix
     *
     * @param {mat2} a matrix to clone
     * @returns {mat2} a new 2x2 matrix
     */


    function clone(a) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](4);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      return out;
    }
    /**
     * Copy the values from one mat2 to another
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */


    function copy(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      return out;
    }
    /**
     * Set a mat2 to the identity matrix
     *
     * @param {mat2} out the receiving matrix
     * @returns {mat2} out
     */


    function identity(out) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    }
    /**
     * Create a new mat2 with the given values
     *
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m10 Component in column 1, row 0 position (index 2)
     * @param {Number} m11 Component in column 1, row 1 position (index 3)
     * @returns {mat2} out A new 2x2 matrix
     */


    function fromValues(m00, m01, m10, m11) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](4);
      out[0] = m00;
      out[1] = m01;
      out[2] = m10;
      out[3] = m11;
      return out;
    }
    /**
     * Set the components of a mat2 to the given values
     *
     * @param {mat2} out the receiving matrix
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m10 Component in column 1, row 0 position (index 2)
     * @param {Number} m11 Component in column 1, row 1 position (index 3)
     * @returns {mat2} out
     */


    function set(out, m00, m01, m10, m11) {
      out[0] = m00;
      out[1] = m01;
      out[2] = m10;
      out[3] = m11;
      return out;
    }
    /**
     * Transpose the values of a mat2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */


    function transpose(out, a) {
      // If we are transposing ourselves we can skip a few steps but have to cache
      // some values
      if (out === a) {
        var a1 = a[1];
        out[1] = a[2];
        out[2] = a1;
      } else {
        out[0] = a[0];
        out[1] = a[2];
        out[2] = a[1];
        out[3] = a[3];
      }

      return out;
    }
    /**
     * Inverts a mat2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */


    function invert(out, a) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3]; // Calculate the determinant

      var det = a0 * a3 - a2 * a1;

      if (!det) {
        return null;
      }

      det = 1.0 / det;
      out[0] = a3 * det;
      out[1] = -a1 * det;
      out[2] = -a2 * det;
      out[3] = a0 * det;
      return out;
    }
    /**
     * Calculates the adjugate of a mat2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */


    function adjoint(out, a) {
      // Caching this value is nessecary if out == a
      var a0 = a[0];
      out[0] = a[3];
      out[1] = -a[1];
      out[2] = -a[2];
      out[3] = a0;
      return out;
    }
    /**
     * Calculates the determinant of a mat2
     *
     * @param {mat2} a the source matrix
     * @returns {Number} determinant of a
     */


    function determinant(a) {
      return a[0] * a[3] - a[2] * a[1];
    }
    /**
     * Multiplies two mat2's
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @returns {mat2} out
     */


    function multiply(out, a, b) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      out[0] = a0 * b0 + a2 * b1;
      out[1] = a1 * b0 + a3 * b1;
      out[2] = a0 * b2 + a2 * b3;
      out[3] = a1 * b2 + a3 * b3;
      return out;
    }
    /**
     * Rotates a mat2 by the given angle
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2} out
     */


    function rotate(out, a, rad) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3];
      var s = Math.sin(rad);
      var c = Math.cos(rad);
      out[0] = a0 * c + a2 * s;
      out[1] = a1 * c + a3 * s;
      out[2] = a0 * -s + a2 * c;
      out[3] = a1 * -s + a3 * c;
      return out;
    }
    /**
     * Scales the mat2 by the dimensions in the given vec2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the matrix to rotate
     * @param {vec2} v the vec2 to scale the matrix by
     * @returns {mat2} out
     **/


    function scale(out, a, v) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3];
      var v0 = v[0],
          v1 = v[1];
      out[0] = a0 * v0;
      out[1] = a1 * v0;
      out[2] = a2 * v1;
      out[3] = a3 * v1;
      return out;
    }
    /**
     * Creates a matrix from a given angle
     * This is equivalent to (but much faster than):
     *
     *     mat2.identity(dest);
     *     mat2.rotate(dest, dest, rad);
     *
     * @param {mat2} out mat2 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2} out
     */


    function fromRotation(out, rad) {
      var s = Math.sin(rad);
      var c = Math.cos(rad);
      out[0] = c;
      out[1] = s;
      out[2] = -s;
      out[3] = c;
      return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat2.identity(dest);
     *     mat2.scale(dest, dest, vec);
     *
     * @param {mat2} out mat2 receiving operation result
     * @param {vec2} v Scaling vector
     * @returns {mat2} out
     */


    function fromScaling(out, v) {
      out[0] = v[0];
      out[1] = 0;
      out[2] = 0;
      out[3] = v[1];
      return out;
    }
    /**
     * Returns a string representation of a mat2
     *
     * @param {mat2} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */


    function str(a) {
      return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
    }
    /**
     * Returns Frobenius norm of a mat2
     *
     * @param {mat2} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */


    function frob(a) {
      return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));
    }
    /**
     * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
     * @param {mat2} L the lower triangular matrix
     * @param {mat2} D the diagonal matrix
     * @param {mat2} U the upper triangular matrix
     * @param {mat2} a the input matrix to factorize
     */


    function LDU(L, D, U, a) {
      L[2] = a[2] / a[0];
      U[0] = a[0];
      U[1] = a[1];
      U[3] = a[3] - L[2] * U[1];
      return [L, D, U];
    }
    /**
     * Adds two mat2's
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @returns {mat2} out
     */


    function add(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
      out[3] = a[3] + b[3];
      return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @returns {mat2} out
     */


    function subtract(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      out[2] = a[2] - b[2];
      out[3] = a[3] - b[3];
      return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat2} a The first matrix.
     * @param {mat2} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */


    function exactEquals(a, b) {
      return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat2} a The first matrix.
     * @param {mat2} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */


    function equals(a, b) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3));
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat2} out
     */


    function multiplyScalar(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      out[2] = a[2] * b;
      out[3] = a[3] * b;
      return out;
    }
    /**
     * Adds two mat2's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat2} out the receiving vector
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat2} out
     */


    function multiplyScalarAndAdd(out, a, b, scale) {
      out[0] = a[0] + b[0] * scale;
      out[1] = a[1] + b[1] * scale;
      out[2] = a[2] + b[2] * scale;
      out[3] = a[3] + b[3] * scale;
      return out;
    }
    /**
     * Alias for {@link mat2.multiply}
     * @function
     */


    var mul = multiply;
    /**
     * Alias for {@link mat2.subtract}
     * @function
     */

    var sub = subtract;
    /***/
  },
  /* 9 */

  /***/
  function (module, __webpack_exports__, __webpack_require__) {
    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", {
      value: true
    });
    /* harmony export (immutable) */

    __webpack_exports__["create"] = create;
    /* harmony export (immutable) */

    __webpack_exports__["clone"] = clone;
    /* harmony export (immutable) */

    __webpack_exports__["copy"] = copy;
    /* harmony export (immutable) */

    __webpack_exports__["identity"] = identity;
    /* harmony export (immutable) */

    __webpack_exports__["fromValues"] = fromValues;
    /* harmony export (immutable) */

    __webpack_exports__["set"] = set;
    /* harmony export (immutable) */

    __webpack_exports__["invert"] = invert;
    /* harmony export (immutable) */

    __webpack_exports__["determinant"] = determinant;
    /* harmony export (immutable) */

    __webpack_exports__["multiply"] = multiply;
    /* harmony export (immutable) */

    __webpack_exports__["rotate"] = rotate;
    /* harmony export (immutable) */

    __webpack_exports__["scale"] = scale;
    /* harmony export (immutable) */

    __webpack_exports__["translate"] = translate;
    /* harmony export (immutable) */

    __webpack_exports__["fromRotation"] = fromRotation;
    /* harmony export (immutable) */

    __webpack_exports__["fromScaling"] = fromScaling;
    /* harmony export (immutable) */

    __webpack_exports__["fromTranslation"] = fromTranslation;
    /* harmony export (immutable) */

    __webpack_exports__["str"] = str;
    /* harmony export (immutable) */

    __webpack_exports__["frob"] = frob;
    /* harmony export (immutable) */

    __webpack_exports__["add"] = add;
    /* harmony export (immutable) */

    __webpack_exports__["subtract"] = subtract;
    /* harmony export (immutable) */

    __webpack_exports__["multiplyScalar"] = multiplyScalar;
    /* harmony export (immutable) */

    __webpack_exports__["multiplyScalarAndAdd"] = multiplyScalarAndAdd;
    /* harmony export (immutable) */

    __webpack_exports__["exactEquals"] = exactEquals;
    /* harmony export (immutable) */

    __webpack_exports__["equals"] = equals;
    /* harmony export (binding) */

    __webpack_require__.d(__webpack_exports__, "mul", function () {
      return mul;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sub", function () {
      return sub;
    });
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(0);
    /**
     * 2x3 Matrix
     * @module mat2d
     *
     * @description
     * A mat2d contains six elements defined as:
     * <pre>
     * [a, c, tx,
     *  b, d, ty]
     * </pre>
     * This is a short form for the 3x3 matrix:
     * <pre>
     * [a, c, tx,
     *  b, d, ty,
     *  0, 0, 1]
     * </pre>
     * The last row is ignored so the array is shorter and operations are faster.
     */

    /**
     * Creates a new identity mat2d
     *
     * @returns {mat2d} a new 2x3 matrix
     */


    function create() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](6);

      if (__WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"] != Float32Array) {
        out[1] = 0;
        out[2] = 0;
        out[4] = 0;
        out[5] = 0;
      }

      out[0] = 1;
      out[3] = 1;
      return out;
    }
    /**
     * Creates a new mat2d initialized with values from an existing matrix
     *
     * @param {mat2d} a matrix to clone
     * @returns {mat2d} a new 2x3 matrix
     */


    function clone(a) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](6);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      return out;
    }
    /**
     * Copy the values from one mat2d to another
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the source matrix
     * @returns {mat2d} out
     */


    function copy(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      return out;
    }
    /**
     * Set a mat2d to the identity matrix
     *
     * @param {mat2d} out the receiving matrix
     * @returns {mat2d} out
     */


    function identity(out) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      out[4] = 0;
      out[5] = 0;
      return out;
    }
    /**
     * Create a new mat2d with the given values
     *
     * @param {Number} a Component A (index 0)
     * @param {Number} b Component B (index 1)
     * @param {Number} c Component C (index 2)
     * @param {Number} d Component D (index 3)
     * @param {Number} tx Component TX (index 4)
     * @param {Number} ty Component TY (index 5)
     * @returns {mat2d} A new mat2d
     */


    function fromValues(a, b, c, d, tx, ty) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](6);
      out[0] = a;
      out[1] = b;
      out[2] = c;
      out[3] = d;
      out[4] = tx;
      out[5] = ty;
      return out;
    }
    /**
     * Set the components of a mat2d to the given values
     *
     * @param {mat2d} out the receiving matrix
     * @param {Number} a Component A (index 0)
     * @param {Number} b Component B (index 1)
     * @param {Number} c Component C (index 2)
     * @param {Number} d Component D (index 3)
     * @param {Number} tx Component TX (index 4)
     * @param {Number} ty Component TY (index 5)
     * @returns {mat2d} out
     */


    function set(out, a, b, c, d, tx, ty) {
      out[0] = a;
      out[1] = b;
      out[2] = c;
      out[3] = d;
      out[4] = tx;
      out[5] = ty;
      return out;
    }
    /**
     * Inverts a mat2d
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the source matrix
     * @returns {mat2d} out
     */


    function invert(out, a) {
      var aa = a[0],
          ab = a[1],
          ac = a[2],
          ad = a[3];
      var atx = a[4],
          aty = a[5];
      var det = aa * ad - ab * ac;

      if (!det) {
        return null;
      }

      det = 1.0 / det;
      out[0] = ad * det;
      out[1] = -ab * det;
      out[2] = -ac * det;
      out[3] = aa * det;
      out[4] = (ac * aty - ad * atx) * det;
      out[5] = (ab * atx - aa * aty) * det;
      return out;
    }
    /**
     * Calculates the determinant of a mat2d
     *
     * @param {mat2d} a the source matrix
     * @returns {Number} determinant of a
     */


    function determinant(a) {
      return a[0] * a[3] - a[1] * a[2];
    }
    /**
     * Multiplies two mat2d's
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @returns {mat2d} out
     */


    function multiply(out, a, b) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3],
          a4 = a[4],
          a5 = a[5];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3],
          b4 = b[4],
          b5 = b[5];
      out[0] = a0 * b0 + a2 * b1;
      out[1] = a1 * b0 + a3 * b1;
      out[2] = a0 * b2 + a2 * b3;
      out[3] = a1 * b2 + a3 * b3;
      out[4] = a0 * b4 + a2 * b5 + a4;
      out[5] = a1 * b4 + a3 * b5 + a5;
      return out;
    }
    /**
     * Rotates a mat2d by the given angle
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2d} out
     */


    function rotate(out, a, rad) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3],
          a4 = a[4],
          a5 = a[5];
      var s = Math.sin(rad);
      var c = Math.cos(rad);
      out[0] = a0 * c + a2 * s;
      out[1] = a1 * c + a3 * s;
      out[2] = a0 * -s + a2 * c;
      out[3] = a1 * -s + a3 * c;
      out[4] = a4;
      out[5] = a5;
      return out;
    }
    /**
     * Scales the mat2d by the dimensions in the given vec2
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to translate
     * @param {vec2} v the vec2 to scale the matrix by
     * @returns {mat2d} out
     **/


    function scale(out, a, v) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3],
          a4 = a[4],
          a5 = a[5];
      var v0 = v[0],
          v1 = v[1];
      out[0] = a0 * v0;
      out[1] = a1 * v0;
      out[2] = a2 * v1;
      out[3] = a3 * v1;
      out[4] = a4;
      out[5] = a5;
      return out;
    }
    /**
     * Translates the mat2d by the dimensions in the given vec2
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to translate
     * @param {vec2} v the vec2 to translate the matrix by
     * @returns {mat2d} out
     **/


    function translate(out, a, v) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3],
          a4 = a[4],
          a5 = a[5];
      var v0 = v[0],
          v1 = v[1];
      out[0] = a0;
      out[1] = a1;
      out[2] = a2;
      out[3] = a3;
      out[4] = a0 * v0 + a2 * v1 + a4;
      out[5] = a1 * v0 + a3 * v1 + a5;
      return out;
    }
    /**
     * Creates a matrix from a given angle
     * This is equivalent to (but much faster than):
     *
     *     mat2d.identity(dest);
     *     mat2d.rotate(dest, dest, rad);
     *
     * @param {mat2d} out mat2d receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2d} out
     */


    function fromRotation(out, rad) {
      var s = Math.sin(rad),
          c = Math.cos(rad);
      out[0] = c;
      out[1] = s;
      out[2] = -s;
      out[3] = c;
      out[4] = 0;
      out[5] = 0;
      return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat2d.identity(dest);
     *     mat2d.scale(dest, dest, vec);
     *
     * @param {mat2d} out mat2d receiving operation result
     * @param {vec2} v Scaling vector
     * @returns {mat2d} out
     */


    function fromScaling(out, v) {
      out[0] = v[0];
      out[1] = 0;
      out[2] = 0;
      out[3] = v[1];
      out[4] = 0;
      out[5] = 0;
      return out;
    }
    /**
     * Creates a matrix from a vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat2d.identity(dest);
     *     mat2d.translate(dest, dest, vec);
     *
     * @param {mat2d} out mat2d receiving operation result
     * @param {vec2} v Translation vector
     * @returns {mat2d} out
     */


    function fromTranslation(out, v) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      out[4] = v[0];
      out[5] = v[1];
      return out;
    }
    /**
     * Returns a string representation of a mat2d
     *
     * @param {mat2d} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */


    function str(a) {
      return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';
    }
    /**
     * Returns Frobenius norm of a mat2d
     *
     * @param {mat2d} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */


    function frob(a) {
      return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);
    }
    /**
     * Adds two mat2d's
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @returns {mat2d} out
     */


    function add(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
      out[3] = a[3] + b[3];
      out[4] = a[4] + b[4];
      out[5] = a[5] + b[5];
      return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @returns {mat2d} out
     */


    function subtract(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      out[2] = a[2] - b[2];
      out[3] = a[3] - b[3];
      out[4] = a[4] - b[4];
      out[5] = a[5] - b[5];
      return out;
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat2d} out
     */


    function multiplyScalar(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      out[2] = a[2] * b;
      out[3] = a[3] * b;
      out[4] = a[4] * b;
      out[5] = a[5] * b;
      return out;
    }
    /**
     * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat2d} out the receiving vector
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat2d} out
     */


    function multiplyScalarAndAdd(out, a, b, scale) {
      out[0] = a[0] + b[0] * scale;
      out[1] = a[1] + b[1] * scale;
      out[2] = a[2] + b[2] * scale;
      out[3] = a[3] + b[3] * scale;
      out[4] = a[4] + b[4] * scale;
      out[5] = a[5] + b[5] * scale;
      return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat2d} a The first matrix.
     * @param {mat2d} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */


    function exactEquals(a, b) {
      return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat2d} a The first matrix.
     * @param {mat2d} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */


    function equals(a, b) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3],
          a4 = a[4],
          a5 = a[5];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3],
          b4 = b[4],
          b5 = b[5];
      return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5));
    }
    /**
     * Alias for {@link mat2d.multiply}
     * @function
     */


    var mul = multiply;
    /**
     * Alias for {@link mat2d.subtract}
     * @function
     */

    var sub = subtract;
    /***/
  },
  /* 10 */

  /***/
  function (module, __webpack_exports__, __webpack_require__) {
    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", {
      value: true
    });
    /* harmony export (immutable) */

    __webpack_exports__["create"] = create;
    /* harmony export (immutable) */

    __webpack_exports__["clone"] = clone;
    /* harmony export (immutable) */

    __webpack_exports__["fromValues"] = fromValues;
    /* harmony export (immutable) */

    __webpack_exports__["fromRotationTranslationValues"] = fromRotationTranslationValues;
    /* harmony export (immutable) */

    __webpack_exports__["fromRotationTranslation"] = fromRotationTranslation;
    /* harmony export (immutable) */

    __webpack_exports__["fromTranslation"] = fromTranslation;
    /* harmony export (immutable) */

    __webpack_exports__["fromRotation"] = fromRotation;
    /* harmony export (immutable) */

    __webpack_exports__["fromMat4"] = fromMat4;
    /* harmony export (immutable) */

    __webpack_exports__["copy"] = copy;
    /* harmony export (immutable) */

    __webpack_exports__["identity"] = identity;
    /* harmony export (immutable) */

    __webpack_exports__["set"] = set;
    /* harmony export (binding) */

    __webpack_require__.d(__webpack_exports__, "getReal", function () {
      return getReal;
    });
    /* harmony export (immutable) */


    __webpack_exports__["getDual"] = getDual;
    /* harmony export (binding) */

    __webpack_require__.d(__webpack_exports__, "setReal", function () {
      return setReal;
    });
    /* harmony export (immutable) */


    __webpack_exports__["setDual"] = setDual;
    /* harmony export (immutable) */

    __webpack_exports__["getTranslation"] = getTranslation;
    /* harmony export (immutable) */

    __webpack_exports__["translate"] = translate;
    /* harmony export (immutable) */

    __webpack_exports__["rotateX"] = rotateX;
    /* harmony export (immutable) */

    __webpack_exports__["rotateY"] = rotateY;
    /* harmony export (immutable) */

    __webpack_exports__["rotateZ"] = rotateZ;
    /* harmony export (immutable) */

    __webpack_exports__["rotateByQuatAppend"] = rotateByQuatAppend;
    /* harmony export (immutable) */

    __webpack_exports__["rotateByQuatPrepend"] = rotateByQuatPrepend;
    /* harmony export (immutable) */

    __webpack_exports__["rotateAroundAxis"] = rotateAroundAxis;
    /* harmony export (immutable) */

    __webpack_exports__["add"] = add;
    /* harmony export (immutable) */

    __webpack_exports__["multiply"] = multiply;
    /* harmony export (binding) */

    __webpack_require__.d(__webpack_exports__, "mul", function () {
      return mul;
    });
    /* harmony export (immutable) */


    __webpack_exports__["scale"] = scale;
    /* harmony export (binding) */

    __webpack_require__.d(__webpack_exports__, "dot", function () {
      return dot;
    });
    /* harmony export (immutable) */


    __webpack_exports__["lerp"] = lerp;
    /* harmony export (immutable) */

    __webpack_exports__["invert"] = invert;
    /* harmony export (immutable) */

    __webpack_exports__["conjugate"] = conjugate;
    /* harmony export (binding) */

    __webpack_require__.d(__webpack_exports__, "length", function () {
      return length;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "len", function () {
      return len;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "squaredLength", function () {
      return squaredLength;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sqrLen", function () {
      return sqrLen;
    });
    /* harmony export (immutable) */


    __webpack_exports__["normalize"] = normalize;
    /* harmony export (immutable) */

    __webpack_exports__["str"] = str;
    /* harmony export (immutable) */

    __webpack_exports__["exactEquals"] = exactEquals;
    /* harmony export (immutable) */

    __webpack_exports__["equals"] = equals;
    /* harmony import */

    var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(0);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_1__quat_js__ = __webpack_require__(4);
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_2__mat4_js__ = __webpack_require__(3);
    /**
     * Dual Quaternion<br>
     * Format: [real, dual]<br>
     * Quaternion format: XYZW<br>
     * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>
     * @module quat2
     */

    /**
     * Creates a new identity dual quat
     *
     * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]
     */


    function create() {
      var dq = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](8);

      if (__WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"] != Float32Array) {
        dq[0] = 0;
        dq[1] = 0;
        dq[2] = 0;
        dq[4] = 0;
        dq[5] = 0;
        dq[6] = 0;
        dq[7] = 0;
      }

      dq[3] = 1;
      return dq;
    }
    /**
     * Creates a new quat initialized with values from an existing quaternion
     *
     * @param {quat2} a dual quaternion to clone
     * @returns {quat2} new dual quaternion
     * @function
     */


    function clone(a) {
      var dq = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](8);
      dq[0] = a[0];
      dq[1] = a[1];
      dq[2] = a[2];
      dq[3] = a[3];
      dq[4] = a[4];
      dq[5] = a[5];
      dq[6] = a[6];
      dq[7] = a[7];
      return dq;
    }
    /**
     * Creates a new dual quat initialized with the given values
     *
     * @param {Number} x1 X component
     * @param {Number} y1 Y component
     * @param {Number} z1 Z component
     * @param {Number} w1 W component
     * @param {Number} x2 X component
     * @param {Number} y2 Y component
     * @param {Number} z2 Z component
     * @param {Number} w2 W component
     * @returns {quat2} new dual quaternion
     * @function
     */


    function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {
      var dq = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](8);
      dq[0] = x1;
      dq[1] = y1;
      dq[2] = z1;
      dq[3] = w1;
      dq[4] = x2;
      dq[5] = y2;
      dq[6] = z2;
      dq[7] = w2;
      return dq;
    }
    /**
     * Creates a new dual quat from the given values (quat and translation)
     *
     * @param {Number} x1 X component
     * @param {Number} y1 Y component
     * @param {Number} z1 Z component
     * @param {Number} w1 W component
     * @param {Number} x2 X component (translation)
     * @param {Number} y2 Y component (translation)
     * @param {Number} z2 Z component (translation)
     * @returns {quat2} new dual quaternion
     * @function
     */


    function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
      var dq = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](8);
      dq[0] = x1;
      dq[1] = y1;
      dq[2] = z1;
      dq[3] = w1;
      var ax = x2 * 0.5,
          ay = y2 * 0.5,
          az = z2 * 0.5;
      dq[4] = ax * w1 + ay * z1 - az * y1;
      dq[5] = ay * w1 + az * x1 - ax * z1;
      dq[6] = az * w1 + ax * y1 - ay * x1;
      dq[7] = -ax * x1 - ay * y1 - az * z1;
      return dq;
    }
    /**
     * Creates a dual quat from a quaternion and a translation
     *
     * @param {quat2} dual quaternion receiving operation result
     * @param {quat} q quaternion
     * @param {vec3} t tranlation vector
     * @returns {quat2} dual quaternion receiving operation result
     * @function
     */


    function fromRotationTranslation(out, q, t) {
      var ax = t[0] * 0.5,
          ay = t[1] * 0.5,
          az = t[2] * 0.5,
          bx = q[0],
          by = q[1],
          bz = q[2],
          bw = q[3];
      out[0] = bx;
      out[1] = by;
      out[2] = bz;
      out[3] = bw;
      out[4] = ax * bw + ay * bz - az * by;
      out[5] = ay * bw + az * bx - ax * bz;
      out[6] = az * bw + ax * by - ay * bx;
      out[7] = -ax * bx - ay * by - az * bz;
      return out;
    }
    /**
     * Creates a dual quat from a translation
     *
     * @param {quat2} dual quaternion receiving operation result
     * @param {vec3} t translation vector
     * @returns {quat2} dual quaternion receiving operation result
     * @function
     */


    function fromTranslation(out, t) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      out[4] = t[0] * 0.5;
      out[5] = t[1] * 0.5;
      out[6] = t[2] * 0.5;
      out[7] = 0;
      return out;
    }
    /**
     * Creates a dual quat from a quaternion
     *
     * @param {quat2} dual quaternion receiving operation result
     * @param {quat} q the quaternion
     * @returns {quat2} dual quaternion receiving operation result
     * @function
     */


    function fromRotation(out, q) {
      out[0] = q[0];
      out[1] = q[1];
      out[2] = q[2];
      out[3] = q[3];
      out[4] = 0;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
      return out;
    }
    /**
     * Creates a new dual quat from a matrix (4x4)
     *
     * @param {quat2} out the dual quaternion
     * @param {mat4} a the matrix
     * @returns {quat2} dual quat receiving operation result
     * @function
     */


    function fromMat4(out, a) {
      //TODO Optimize this
      var outer = __WEBPACK_IMPORTED_MODULE_1__quat_js__["create"]();

      __WEBPACK_IMPORTED_MODULE_2__mat4_js__["getRotation"](outer, a);

      var t = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](3);

      __WEBPACK_IMPORTED_MODULE_2__mat4_js__["getTranslation"](t, a);

      fromRotationTranslation(out, outer, t);
      return out;
    }
    /**
     * Copy the values from one dual quat to another
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the source dual quaternion
     * @returns {quat2} out
     * @function
     */


    function copy(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      return out;
    }
    /**
     * Set a dual quat to the identity dual quaternion
     *
     * @param {quat2} out the receiving quaternion
     * @returns {quat2} out
     */


    function identity(out) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      out[4] = 0;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
      return out;
    }
    /**
     * Set the components of a dual quat to the given values
     *
     * @param {quat2} out the receiving quaternion
     * @param {Number} x1 X component
     * @param {Number} y1 Y component
     * @param {Number} z1 Z component
     * @param {Number} w1 W component
     * @param {Number} x2 X component
     * @param {Number} y2 Y component
     * @param {Number} z2 Z component
     * @param {Number} w2 W component
     * @returns {quat2} out
     * @function
     */


    function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {
      out[0] = x1;
      out[1] = y1;
      out[2] = z1;
      out[3] = w1;
      out[4] = x2;
      out[5] = y2;
      out[6] = z2;
      out[7] = w2;
      return out;
    }
    /**
     * Gets the real part of a dual quat
     * @param  {quat} out real part
     * @param  {quat2} a Dual Quaternion
     * @return {quat} real part
     */


    var getReal = __WEBPACK_IMPORTED_MODULE_1__quat_js__["copy"];
    /**
     * Gets the dual part of a dual quat
     * @param  {quat} out dual part
     * @param  {quat2} a Dual Quaternion
     * @return {quat} dual part
     */

    function getDual(out, a) {
      out[0] = a[4];
      out[1] = a[5];
      out[2] = a[6];
      out[3] = a[7];
      return out;
    }
    /**
     * Set the real component of a dual quat to the given quaternion
     *
     * @param {quat2} out the receiving quaternion
     * @param {quat} q a quaternion representing the real part
     * @returns {quat2} out
     * @function
     */


    var setReal = __WEBPACK_IMPORTED_MODULE_1__quat_js__["copy"];
    /**
     * Set the dual component of a dual quat to the given quaternion
     *
     * @param {quat2} out the receiving quaternion
     * @param {quat} q a quaternion representing the dual part
     * @returns {quat2} out
     * @function
     */

    function setDual(out, q) {
      out[4] = q[0];
      out[5] = q[1];
      out[6] = q[2];
      out[7] = q[3];
      return out;
    }
    /**
     * Gets the translation of a normalized dual quat
     * @param  {vec3} out translation
     * @param  {quat2} a Dual Quaternion to be decomposed
     * @return {vec3} translation
     */


    function getTranslation(out, a) {
      var ax = a[4],
          ay = a[5],
          az = a[6],
          aw = a[7],
          bx = -a[0],
          by = -a[1],
          bz = -a[2],
          bw = a[3];
      out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
      out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
      out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
      return out;
    }
    /**
     * Translates a dual quat by the given vector
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to translate
     * @param {vec3} v vector to translate by
     * @returns {quat2} out
     */


    function translate(out, a, v) {
      var ax1 = a[0],
          ay1 = a[1],
          az1 = a[2],
          aw1 = a[3],
          bx1 = v[0] * 0.5,
          by1 = v[1] * 0.5,
          bz1 = v[2] * 0.5,
          ax2 = a[4],
          ay2 = a[5],
          az2 = a[6],
          aw2 = a[7];
      out[0] = ax1;
      out[1] = ay1;
      out[2] = az1;
      out[3] = aw1;
      out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
      out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
      out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
      out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
      return out;
    }
    /**
     * Rotates a dual quat around the X axis
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {number} rad how far should the rotation be
     * @returns {quat2} out
     */


    function rotateX(out, a, rad) {
      var bx = -a[0],
          by = -a[1],
          bz = -a[2],
          bw = a[3],
          ax = a[4],
          ay = a[5],
          az = a[6],
          aw = a[7],
          ax1 = ax * bw + aw * bx + ay * bz - az * by,
          ay1 = ay * bw + aw * by + az * bx - ax * bz,
          az1 = az * bw + aw * bz + ax * by - ay * bx,
          aw1 = aw * bw - ax * bx - ay * by - az * bz;

      __WEBPACK_IMPORTED_MODULE_1__quat_js__["rotateX"](out, a, rad);

      bx = out[0];
      by = out[1];
      bz = out[2];
      bw = out[3];
      out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
      out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
      out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
      out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
      return out;
    }
    /**
     * Rotates a dual quat around the Y axis
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {number} rad how far should the rotation be
     * @returns {quat2} out
     */


    function rotateY(out, a, rad) {
      var bx = -a[0],
          by = -a[1],
          bz = -a[2],
          bw = a[3],
          ax = a[4],
          ay = a[5],
          az = a[6],
          aw = a[7],
          ax1 = ax * bw + aw * bx + ay * bz - az * by,
          ay1 = ay * bw + aw * by + az * bx - ax * bz,
          az1 = az * bw + aw * bz + ax * by - ay * bx,
          aw1 = aw * bw - ax * bx - ay * by - az * bz;

      __WEBPACK_IMPORTED_MODULE_1__quat_js__["rotateY"](out, a, rad);

      bx = out[0];
      by = out[1];
      bz = out[2];
      bw = out[3];
      out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
      out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
      out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
      out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
      return out;
    }
    /**
     * Rotates a dual quat around the Z axis
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {number} rad how far should the rotation be
     * @returns {quat2} out
     */


    function rotateZ(out, a, rad) {
      var bx = -a[0],
          by = -a[1],
          bz = -a[2],
          bw = a[3],
          ax = a[4],
          ay = a[5],
          az = a[6],
          aw = a[7],
          ax1 = ax * bw + aw * bx + ay * bz - az * by,
          ay1 = ay * bw + aw * by + az * bx - ax * bz,
          az1 = az * bw + aw * bz + ax * by - ay * bx,
          aw1 = aw * bw - ax * bx - ay * by - az * bz;

      __WEBPACK_IMPORTED_MODULE_1__quat_js__["rotateZ"](out, a, rad);

      bx = out[0];
      by = out[1];
      bz = out[2];
      bw = out[3];
      out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
      out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
      out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
      out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
      return out;
    }
    /**
     * Rotates a dual quat by a given quaternion (a * q)
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {quat} q quaternion to rotate by
     * @returns {quat2} out
     */


    function rotateByQuatAppend(out, a, q) {
      var qx = q[0],
          qy = q[1],
          qz = q[2],
          qw = q[3],
          ax = a[0],
          ay = a[1],
          az = a[2],
          aw = a[3];
      out[0] = ax * qw + aw * qx + ay * qz - az * qy;
      out[1] = ay * qw + aw * qy + az * qx - ax * qz;
      out[2] = az * qw + aw * qz + ax * qy - ay * qx;
      out[3] = aw * qw - ax * qx - ay * qy - az * qz;
      ax = a[4];
      ay = a[5];
      az = a[6];
      aw = a[7];
      out[4] = ax * qw + aw * qx + ay * qz - az * qy;
      out[5] = ay * qw + aw * qy + az * qx - ax * qz;
      out[6] = az * qw + aw * qz + ax * qy - ay * qx;
      out[7] = aw * qw - ax * qx - ay * qy - az * qz;
      return out;
    }
    /**
     * Rotates a dual quat by a given quaternion (q * a)
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat} q quaternion to rotate by
     * @param {quat2} a the dual quaternion to rotate
     * @returns {quat2} out
     */


    function rotateByQuatPrepend(out, q, a) {
      var qx = q[0],
          qy = q[1],
          qz = q[2],
          qw = q[3],
          bx = a[0],
          by = a[1],
          bz = a[2],
          bw = a[3];
      out[0] = qx * bw + qw * bx + qy * bz - qz * by;
      out[1] = qy * bw + qw * by + qz * bx - qx * bz;
      out[2] = qz * bw + qw * bz + qx * by - qy * bx;
      out[3] = qw * bw - qx * bx - qy * by - qz * bz;
      bx = a[4];
      by = a[5];
      bz = a[6];
      bw = a[7];
      out[4] = qx * bw + qw * bx + qy * bz - qz * by;
      out[5] = qy * bw + qw * by + qz * bx - qx * bz;
      out[6] = qz * bw + qw * bz + qx * by - qy * bx;
      out[7] = qw * bw - qx * bx - qy * by - qz * bz;
      return out;
    }
    /**
     * Rotates a dual quat around a given axis. Does the normalisation automatically
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {vec3} axis the axis to rotate around
     * @param {Number} rad how far the rotation should be
     * @returns {quat2} out
     */


    function rotateAroundAxis(out, a, axis, rad) {
      //Special case for rad = 0
      if (Math.abs(rad) < __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"]) {
        return copy(out, a);
      }

      var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);
      rad = rad * 0.5;
      var s = Math.sin(rad);
      var bx = s * axis[0] / axisLength;
      var by = s * axis[1] / axisLength;
      var bz = s * axis[2] / axisLength;
      var bw = Math.cos(rad);
      var ax1 = a[0],
          ay1 = a[1],
          az1 = a[2],
          aw1 = a[3];
      out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
      out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
      out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
      out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
      var ax = a[4],
          ay = a[5],
          az = a[6],
          aw = a[7];
      out[4] = ax * bw + aw * bx + ay * bz - az * by;
      out[5] = ay * bw + aw * by + az * bx - ax * bz;
      out[6] = az * bw + aw * bz + ax * by - ay * bx;
      out[7] = aw * bw - ax * bx - ay * by - az * bz;
      return out;
    }
    /**
     * Adds two dual quat's
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @returns {quat2} out
     * @function
     */


    function add(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
      out[3] = a[3] + b[3];
      out[4] = a[4] + b[4];
      out[5] = a[5] + b[5];
      out[6] = a[6] + b[6];
      out[7] = a[7] + b[7];
      return out;
    }
    /**
     * Multiplies two dual quat's
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @returns {quat2} out
     */


    function multiply(out, a, b) {
      var ax0 = a[0],
          ay0 = a[1],
          az0 = a[2],
          aw0 = a[3],
          bx1 = b[4],
          by1 = b[5],
          bz1 = b[6],
          bw1 = b[7],
          ax1 = a[4],
          ay1 = a[5],
          az1 = a[6],
          aw1 = a[7],
          bx0 = b[0],
          by0 = b[1],
          bz0 = b[2],
          bw0 = b[3];
      out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
      out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
      out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
      out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
      out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
      out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
      out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
      out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
      return out;
    }
    /**
     * Alias for {@link quat2.multiply}
     * @function
     */


    var mul = multiply;
    /**
     * Scales a dual quat by a scalar number
     *
     * @param {quat2} out the receiving dual quat
     * @param {quat2} a the dual quat to scale
     * @param {Number} b amount to scale the dual quat by
     * @returns {quat2} out
     * @function
     */

    function scale(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      out[2] = a[2] * b;
      out[3] = a[3] * b;
      out[4] = a[4] * b;
      out[5] = a[5] * b;
      out[6] = a[6] * b;
      out[7] = a[7] * b;
      return out;
    }
    /**
     * Calculates the dot product of two dual quat's (The dot product of the real parts)
     *
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @returns {Number} dot product of a and b
     * @function
     */


    var dot = __WEBPACK_IMPORTED_MODULE_1__quat_js__["dot"];
    /**
     * Performs a linear interpolation between two dual quats's
     * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)
     *
     * @param {quat2} out the receiving dual quat
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat2} out
     */

    function lerp(out, a, b, t) {
      var mt = 1 - t;
      if (dot(a, b) < 0) t = -t;
      out[0] = a[0] * mt + b[0] * t;
      out[1] = a[1] * mt + b[1] * t;
      out[2] = a[2] * mt + b[2] * t;
      out[3] = a[3] * mt + b[3] * t;
      out[4] = a[4] * mt + b[4] * t;
      out[5] = a[5] * mt + b[5] * t;
      out[6] = a[6] * mt + b[6] * t;
      out[7] = a[7] * mt + b[7] * t;
      return out;
    }
    /**
     * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a dual quat to calculate inverse of
     * @returns {quat2} out
     */


    function invert(out, a) {
      var sqlen = squaredLength(a);
      out[0] = -a[0] / sqlen;
      out[1] = -a[1] / sqlen;
      out[2] = -a[2] / sqlen;
      out[3] = a[3] / sqlen;
      out[4] = -a[4] / sqlen;
      out[5] = -a[5] / sqlen;
      out[6] = -a[6] / sqlen;
      out[7] = a[7] / sqlen;
      return out;
    }
    /**
     * Calculates the conjugate of a dual quat
     * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.
     *
     * @param {quat2} out the receiving quaternion
     * @param {quat2} a quat to calculate conjugate of
     * @returns {quat2} out
     */


    function conjugate(out, a) {
      out[0] = -a[0];
      out[1] = -a[1];
      out[2] = -a[2];
      out[3] = a[3];
      out[4] = -a[4];
      out[5] = -a[5];
      out[6] = -a[6];
      out[7] = a[7];
      return out;
    }
    /**
     * Calculates the length of a dual quat
     *
     * @param {quat2} a dual quat to calculate length of
     * @returns {Number} length of a
     * @function
     */


    var length = __WEBPACK_IMPORTED_MODULE_1__quat_js__["length"];
    /**
     * Alias for {@link quat2.length}
     * @function
     */

    var len = length;
    /**
     * Calculates the squared length of a dual quat
     *
     * @param {quat2} a dual quat to calculate squared length of
     * @returns {Number} squared length of a
     * @function
     */

    var squaredLength = __WEBPACK_IMPORTED_MODULE_1__quat_js__["squaredLength"];
    /**
     * Alias for {@link quat2.squaredLength}
     * @function
     */

    var sqrLen = squaredLength;
    /**
     * Normalize a dual quat
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a dual quaternion to normalize
     * @returns {quat2} out
     * @function
     */

    function normalize(out, a) {
      var magnitude = squaredLength(a);

      if (magnitude > 0) {
        magnitude = Math.sqrt(magnitude);
        var a0 = a[0] / magnitude;
        var a1 = a[1] / magnitude;
        var a2 = a[2] / magnitude;
        var a3 = a[3] / magnitude;
        var b0 = a[4];
        var b1 = a[5];
        var b2 = a[6];
        var b3 = a[7];
        var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
        out[0] = a0;
        out[1] = a1;
        out[2] = a2;
        out[3] = a3;
        out[4] = (b0 - a0 * a_dot_b) / magnitude;
        out[5] = (b1 - a1 * a_dot_b) / magnitude;
        out[6] = (b2 - a2 * a_dot_b) / magnitude;
        out[7] = (b3 - a3 * a_dot_b) / magnitude;
      }

      return out;
    }
    /**
     * Returns a string representation of a dual quatenion
     *
     * @param {quat2} a dual quaternion to represent as a string
     * @returns {String} string representation of the dual quat
     */


    function str(a) {
      return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';
    }
    /**
     * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)
     *
     * @param {quat2} a the first dual quaternion.
     * @param {quat2} b the second dual quaternion.
     * @returns {Boolean} true if the dual quaternions are equal, false otherwise.
     */


    function exactEquals(a, b) {
      return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
    }
    /**
     * Returns whether or not the dual quaternions have approximately the same elements in the same position.
     *
     * @param {quat2} a the first dual quat.
     * @param {quat2} b the second dual quat.
     * @returns {Boolean} true if the dual quats are equal, false otherwise.
     */


    function equals(a, b) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3],
          a4 = a[4],
          a5 = a[5],
          a6 = a[6],
          a7 = a[7];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3],
          b4 = b[4],
          b5 = b[5],
          b6 = b[6],
          b7 = b[7];
      return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a7), Math.abs(b7));
    }
    /***/

  },
  /* 11 */

  /***/
  function (module, __webpack_exports__, __webpack_require__) {
    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", {
      value: true
    });
    /* harmony export (immutable) */

    __webpack_exports__["create"] = create;
    /* harmony export (immutable) */

    __webpack_exports__["clone"] = clone;
    /* harmony export (immutable) */

    __webpack_exports__["fromValues"] = fromValues;
    /* harmony export (immutable) */

    __webpack_exports__["copy"] = copy;
    /* harmony export (immutable) */

    __webpack_exports__["set"] = set;
    /* harmony export (immutable) */

    __webpack_exports__["add"] = add;
    /* harmony export (immutable) */

    __webpack_exports__["subtract"] = subtract;
    /* harmony export (immutable) */

    __webpack_exports__["multiply"] = multiply;
    /* harmony export (immutable) */

    __webpack_exports__["divide"] = divide;
    /* harmony export (immutable) */

    __webpack_exports__["ceil"] = ceil;
    /* harmony export (immutable) */

    __webpack_exports__["floor"] = floor;
    /* harmony export (immutable) */

    __webpack_exports__["min"] = min;
    /* harmony export (immutable) */

    __webpack_exports__["max"] = max;
    /* harmony export (immutable) */

    __webpack_exports__["round"] = round;
    /* harmony export (immutable) */

    __webpack_exports__["scale"] = scale;
    /* harmony export (immutable) */

    __webpack_exports__["scaleAndAdd"] = scaleAndAdd;
    /* harmony export (immutable) */

    __webpack_exports__["distance"] = distance;
    /* harmony export (immutable) */

    __webpack_exports__["squaredDistance"] = squaredDistance;
    /* harmony export (immutable) */

    __webpack_exports__["length"] = length;
    /* harmony export (immutable) */

    __webpack_exports__["squaredLength"] = squaredLength;
    /* harmony export (immutable) */

    __webpack_exports__["negate"] = negate;
    /* harmony export (immutable) */

    __webpack_exports__["inverse"] = inverse;
    /* harmony export (immutable) */

    __webpack_exports__["normalize"] = normalize;
    /* harmony export (immutable) */

    __webpack_exports__["dot"] = dot;
    /* harmony export (immutable) */

    __webpack_exports__["cross"] = cross;
    /* harmony export (immutable) */

    __webpack_exports__["lerp"] = lerp;
    /* harmony export (immutable) */

    __webpack_exports__["random"] = random;
    /* harmony export (immutable) */

    __webpack_exports__["transformMat2"] = transformMat2;
    /* harmony export (immutable) */

    __webpack_exports__["transformMat2d"] = transformMat2d;
    /* harmony export (immutable) */

    __webpack_exports__["transformMat3"] = transformMat3;
    /* harmony export (immutable) */

    __webpack_exports__["transformMat4"] = transformMat4;
    /* harmony export (immutable) */

    __webpack_exports__["rotate"] = rotate;
    /* harmony export (immutable) */

    __webpack_exports__["angle"] = angle;
    /* harmony export (immutable) */

    __webpack_exports__["str"] = str;
    /* harmony export (immutable) */

    __webpack_exports__["exactEquals"] = exactEquals;
    /* harmony export (immutable) */

    __webpack_exports__["equals"] = equals;
    /* harmony export (binding) */

    __webpack_require__.d(__webpack_exports__, "len", function () {
      return len;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sub", function () {
      return sub;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "mul", function () {
      return mul;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "div", function () {
      return div;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "dist", function () {
      return dist;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sqrDist", function () {
      return sqrDist;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sqrLen", function () {
      return sqrLen;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "forEach", function () {
      return forEach;
    });
    /* harmony import */


    var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(0);
    /**
     * 2 Dimensional Vector
     * @module vec2
     */

    /**
     * Creates a new, empty vec2
     *
     * @returns {vec2} a new 2D vector
     */


    function create() {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](2);

      if (__WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"] != Float32Array) {
        out[0] = 0;
        out[1] = 0;
      }

      return out;
    }
    /**
     * Creates a new vec2 initialized with values from an existing vector
     *
     * @param {vec2} a vector to clone
     * @returns {vec2} a new 2D vector
     */


    function clone(a) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](2);
      out[0] = a[0];
      out[1] = a[1];
      return out;
    }
    /**
     * Creates a new vec2 initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @returns {vec2} a new 2D vector
     */


    function fromValues(x, y) {
      var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__["ARRAY_TYPE"](2);
      out[0] = x;
      out[1] = y;
      return out;
    }
    /**
     * Copy the values from one vec2 to another
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the source vector
     * @returns {vec2} out
     */


    function copy(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      return out;
    }
    /**
     * Set the components of a vec2 to the given values
     *
     * @param {vec2} out the receiving vector
     * @param {Number} x X component
     * @param {Number} y Y component
     * @returns {vec2} out
     */


    function set(out, x, y) {
      out[0] = x;
      out[1] = y;
      return out;
    }
    /**
     * Adds two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */


    function add(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      return out;
    }
    /**
     * Subtracts vector b from vector a
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */


    function subtract(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      return out;
    }
    /**
     * Multiplies two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */


    function multiply(out, a, b) {
      out[0] = a[0] * b[0];
      out[1] = a[1] * b[1];
      return out;
    }
    /**
     * Divides two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */


    function divide(out, a, b) {
      out[0] = a[0] / b[0];
      out[1] = a[1] / b[1];
      return out;
    }
    /**
     * Math.ceil the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to ceil
     * @returns {vec2} out
     */


    function ceil(out, a) {
      out[0] = Math.ceil(a[0]);
      out[1] = Math.ceil(a[1]);
      return out;
    }
    /**
     * Math.floor the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to floor
     * @returns {vec2} out
     */


    function floor(out, a) {
      out[0] = Math.floor(a[0]);
      out[1] = Math.floor(a[1]);
      return out;
    }
    /**
     * Returns the minimum of two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */


    function min(out, a, b) {
      out[0] = Math.min(a[0], b[0]);
      out[1] = Math.min(a[1], b[1]);
      return out;
    }
    /**
     * Returns the maximum of two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */


    function max(out, a, b) {
      out[0] = Math.max(a[0], b[0]);
      out[1] = Math.max(a[1], b[1]);
      return out;
    }
    /**
     * Math.round the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to round
     * @returns {vec2} out
     */


    function round(out, a) {
      out[0] = Math.round(a[0]);
      out[1] = Math.round(a[1]);
      return out;
    }
    /**
     * Scales a vec2 by a scalar number
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {vec2} out
     */


    function scale(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      return out;
    }
    /**
     * Adds two vec2's after scaling the second operand by a scalar value
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @param {Number} scale the amount to scale b by before adding
     * @returns {vec2} out
     */


    function scaleAndAdd(out, a, b, scale) {
      out[0] = a[0] + b[0] * scale;
      out[1] = a[1] + b[1] * scale;
      return out;
    }
    /**
     * Calculates the euclidian distance between two vec2's
     *
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {Number} distance between a and b
     */


    function distance(a, b) {
      var x = b[0] - a[0],
          y = b[1] - a[1];
      return Math.sqrt(x * x + y * y);
    }
    /**
     * Calculates the squared euclidian distance between two vec2's
     *
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {Number} squared distance between a and b
     */


    function squaredDistance(a, b) {
      var x = b[0] - a[0],
          y = b[1] - a[1];
      return x * x + y * y;
    }
    /**
     * Calculates the length of a vec2
     *
     * @param {vec2} a vector to calculate length of
     * @returns {Number} length of a
     */


    function length(a) {
      var x = a[0],
          y = a[1];
      return Math.sqrt(x * x + y * y);
    }
    /**
     * Calculates the squared length of a vec2
     *
     * @param {vec2} a vector to calculate squared length of
     * @returns {Number} squared length of a
     */


    function squaredLength(a) {
      var x = a[0],
          y = a[1];
      return x * x + y * y;
    }
    /**
     * Negates the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to negate
     * @returns {vec2} out
     */


    function negate(out, a) {
      out[0] = -a[0];
      out[1] = -a[1];
      return out;
    }
    /**
     * Returns the inverse of the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to invert
     * @returns {vec2} out
     */


    function inverse(out, a) {
      out[0] = 1.0 / a[0];
      out[1] = 1.0 / a[1];
      return out;
    }
    /**
     * Normalize a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to normalize
     * @returns {vec2} out
     */


    function normalize(out, a) {
      var x = a[0],
          y = a[1];
      var len = x * x + y * y;

      if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
      }

      return out;
    }
    /**
     * Calculates the dot product of two vec2's
     *
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {Number} dot product of a and b
     */


    function dot(a, b) {
      return a[0] * b[0] + a[1] * b[1];
    }
    /**
     * Computes the cross product of two vec2's
     * Note that the cross product must by definition produce a 3D vector
     *
     * @param {vec3} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec3} out
     */


    function cross(out, a, b) {
      var z = a[0] * b[1] - a[1] * b[0];
      out[0] = out[1] = 0;
      out[2] = z;
      return out;
    }
    /**
     * Performs a linear interpolation between two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec2} out
     */


    function lerp(out, a, b, t) {
      var ax = a[0],
          ay = a[1];
      out[0] = ax + t * (b[0] - ax);
      out[1] = ay + t * (b[1] - ay);
      return out;
    }
    /**
     * Generates a random vector with the given scale
     *
     * @param {vec2} out the receiving vector
     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {vec2} out
     */


    function random(out, scale) {
      scale = scale || 1.0;
      var r = __WEBPACK_IMPORTED_MODULE_0__common_js__["RANDOM"]() * 2.0 * Math.PI;
      out[0] = Math.cos(r) * scale;
      out[1] = Math.sin(r) * scale;
      return out;
    }
    /**
     * Transforms the vec2 with a mat2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat2} m matrix to transform with
     * @returns {vec2} out
     */


    function transformMat2(out, a, m) {
      var x = a[0],
          y = a[1];
      out[0] = m[0] * x + m[2] * y;
      out[1] = m[1] * x + m[3] * y;
      return out;
    }
    /**
     * Transforms the vec2 with a mat2d
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat2d} m matrix to transform with
     * @returns {vec2} out
     */


    function transformMat2d(out, a, m) {
      var x = a[0],
          y = a[1];
      out[0] = m[0] * x + m[2] * y + m[4];
      out[1] = m[1] * x + m[3] * y + m[5];
      return out;
    }
    /**
     * Transforms the vec2 with a mat3
     * 3rd vector component is implicitly '1'
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat3} m matrix to transform with
     * @returns {vec2} out
     */


    function transformMat3(out, a, m) {
      var x = a[0],
          y = a[1];
      out[0] = m[0] * x + m[3] * y + m[6];
      out[1] = m[1] * x + m[4] * y + m[7];
      return out;
    }
    /**
     * Transforms the vec2 with a mat4
     * 3rd vector component is implicitly '0'
     * 4th vector component is implicitly '1'
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat4} m matrix to transform with
     * @returns {vec2} out
     */


    function transformMat4(out, a, m) {
      var x = a[0];
      var y = a[1];
      out[0] = m[0] * x + m[4] * y + m[12];
      out[1] = m[1] * x + m[5] * y + m[13];
      return out;
    }
    /**
     * Rotate a 2D vector
     * @param {vec2} out The receiving vec2
     * @param {vec2} a The vec2 point to rotate
     * @param {vec2} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec2} out
     */


    function rotate(out, a, b, c) {
      //Translate point to the origin
      var p0 = a[0] - b[0],
          p1 = a[1] - b[1],
          sinC = Math.sin(c),
          cosC = Math.cos(c); //perform rotation and translate to correct position

      out[0] = p0 * cosC - p1 * sinC + b[0];
      out[1] = p0 * sinC + p1 * cosC + b[1];
      return out;
    }
    /**
     * Get the angle between two 2D vectors
     * @param {vec2} a The first operand
     * @param {vec2} b The second operand
     * @returns {Number} The angle in radians
     */


    function angle(a, b) {
      var x1 = a[0],
          y1 = a[1],
          x2 = b[0],
          y2 = b[1];
      var len1 = x1 * x1 + y1 * y1;

      if (len1 > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len1 = 1 / Math.sqrt(len1);
      }

      var len2 = x2 * x2 + y2 * y2;

      if (len2 > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len2 = 1 / Math.sqrt(len2);
      }

      var cosine = (x1 * x2 + y1 * y2) * len1 * len2;

      if (cosine > 1.0) {
        return 0;
      } else if (cosine < -1.0) {
        return Math.PI;
      } else {
        return Math.acos(cosine);
      }
    }
    /**
     * Returns a string representation of a vector
     *
     * @param {vec2} a vector to represent as a string
     * @returns {String} string representation of the vector
     */


    function str(a) {
      return 'vec2(' + a[0] + ', ' + a[1] + ')';
    }
    /**
     * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
     *
     * @param {vec2} a The first vector.
     * @param {vec2} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */


    function exactEquals(a, b) {
      return a[0] === b[0] && a[1] === b[1];
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     *
     * @param {vec2} a The first vector.
     * @param {vec2} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */


    function equals(a, b) {
      var a0 = a[0],
          a1 = a[1];
      var b0 = b[0],
          b1 = b[1];
      return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1));
    }
    /**
     * Alias for {@link vec2.length}
     * @function
     */


    var len = length;
    /**
     * Alias for {@link vec2.subtract}
     * @function
     */

    var sub = subtract;
    /**
     * Alias for {@link vec2.multiply}
     * @function
     */

    var mul = multiply;
    /**
     * Alias for {@link vec2.divide}
     * @function
     */

    var div = divide;
    /**
     * Alias for {@link vec2.distance}
     * @function
     */

    var dist = distance;
    /**
     * Alias for {@link vec2.squaredDistance}
     * @function
     */

    var sqrDist = squaredDistance;
    /**
     * Alias for {@link vec2.squaredLength}
     * @function
     */

    var sqrLen = squaredLength;
    /**
     * Perform some operation over an array of vec2s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */

    var forEach = function () {
      var vec = create();
      return function (a, stride, offset, count, fn, arg) {
        var i = void 0,
            l = void 0;

        if (!stride) {
          stride = 2;
        }

        if (!offset) {
          offset = 0;
        }

        if (count) {
          l = Math.min(count * stride + offset, a.length);
        } else {
          l = a.length;
        }

        for (i = offset; i < l; i += stride) {
          vec[0] = a[i];
          vec[1] = a[i + 1];
          fn(vec, vec, arg);
          a[i] = vec[0];
          a[i + 1] = vec[1];
        }

        return a;
      };
    }();
    /***/

  },
  /* 12 */

  /***/
  function (module, exports, __webpack_require__) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (true) module.exports = factory(__webpack_require__(1));else {}
    })(this, function (__WEBPACK_EXTERNAL_MODULE_1__) {
      return (
        /******/
        function (modules) {
          // webpackBootstrap

          /******/
          // The module cache

          /******/
          var installedModules = {};
          /******/

          /******/
          // The require function

          /******/

          function __webpack_require__(moduleId) {
            /******/

            /******/
            // Check if module is in cache

            /******/
            if (installedModules[moduleId]) {
              /******/
              return installedModules[moduleId].exports;
              /******/
            }
            /******/
            // Create a new module (and put it into the cache)

            /******/


            var module = installedModules[moduleId] = {
              /******/
              i: moduleId,

              /******/
              l: false,

              /******/
              exports: {}
              /******/

            };
            /******/

            /******/
            // Execute the module function

            /******/

            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/

            /******/
            // Flag the module as loaded

            /******/

            module.l = true;
            /******/

            /******/
            // Return the exports of the module

            /******/

            return module.exports;
            /******/
          }
          /******/

          /******/

          /******/
          // expose the modules object (__webpack_modules__)

          /******/


          __webpack_require__.m = modules;
          /******/

          /******/
          // expose the module cache

          /******/

          __webpack_require__.c = installedModules;
          /******/

          /******/
          // define getter function for harmony exports

          /******/

          __webpack_require__.d = function (exports, name, getter) {
            /******/
            if (!__webpack_require__.o(exports, name)) {
              /******/
              Object.defineProperty(exports, name, {
                /******/
                configurable: false,

                /******/
                enumerable: true,

                /******/
                get: getter
                /******/

              });
              /******/
            }
            /******/

          };
          /******/

          /******/
          // getDefaultExport function for compatibility with non-harmony modules

          /******/


          __webpack_require__.n = function (module) {
            /******/
            var getter = module && module.__esModule ?
            /******/
            function getDefault() {
              return module['default'];
            } :
            /******/
            function getModuleExports() {
              return module;
            };
            /******/

            __webpack_require__.d(getter, 'a', getter);
            /******/


            return getter;
            /******/
          };
          /******/

          /******/
          // Object.prototype.hasOwnProperty.call

          /******/


          __webpack_require__.o = function (object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          /******/

          /******/
          // __webpack_public_path__

          /******/


          __webpack_require__.p = "";
          /******/

          /******/
          // Load entry module and return exports

          /******/

          return __webpack_require__(__webpack_require__.s = 0);
          /******/
        }(
        /************************************************************************/

        /******/
        [
        /* 0 */

        /***/
        function (module, __webpack_exports__, __webpack_require__) {
          "use strict";

          Object.defineProperty(__webpack_exports__, "__esModule", {
            value: true
          });
          /* harmony export (binding) */

          __webpack_require__.d(__webpack_exports__, "glTFLoader", function () {
            return glTFLoader;
          });
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_gl_matrix__ = __webpack_require__(1);
          /* harmony import */


          var __WEBPACK_IMPORTED_MODULE_0_gl_matrix___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_gl_matrix__);

          var MinimalGLTFLoader = MinimalGLTFLoader || {};
          var globalUniformBlockID = 0;
          var curLoader = null; // @tmp, might be unsafe if loading multiple model at the same time

          var NUM_MAX_JOINTS = 65; // Data classes

          var Scene = MinimalGLTFLoader.Scene = function (gltf, s) {
            this.name = s.name !== undefined ? s.name : null;
            this.nodes = new Array(s.nodes.length); // root node object of this scene

            for (var i = 0, len = s.nodes.length; i < len; i++) {
              this.nodes[i] = gltf.nodes[s.nodes[i]];
            }

            this.extensions = s.extensions !== undefined ? s.extensions : null;
            this.extras = s.extras !== undefined ? s.extras : null;
            this.boundingBox = null;
          };
          /**
           * 
           * @param {vec3} min
           * @param {vec3} max
           */


          var BoundingBox = MinimalGLTFLoader.BoundingBox = function (min, max, isClone) {
            // this.min = min;
            // this.max = max;
            min = min || __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].fromValues(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
            max = max || __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].fromValues(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);

            if (isClone === undefined || isClone === true) {
              this.min = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].clone(min);
              this.max = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].clone(max);
            } else {
              this.min = min;
              this.max = max;
            }

            this.transform = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create();
          };

          BoundingBox.prototype.updateBoundingBox = function (bbox) {
            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].min(this.min, this.min, bbox.min);

            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].max(this.max, this.max, bbox.max);
          };

          BoundingBox.prototype.calculateTransform = function () {
            // transform from a unit cube whose min = (0, 0, 0) and max = (1, 1, 1)
            // scale
            this.transform[0] = this.max[0] - this.min[0];
            this.transform[5] = this.max[1] - this.min[1];
            this.transform[10] = this.max[2] - this.min[2]; // translate

            this.transform[12] = this.min[0];
            this.transform[13] = this.min[1];
            this.transform[14] = this.min[2];
          };

          BoundingBox.getAABBFromOBB = function () {
            var transformRight = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].create();

            var transformUp = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].create();

            var transformBackward = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].create();

            var tmpVec3a = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].create();

            var tmpVec3b = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].create();

            return function (obb, matrix) {
              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].set(transformRight, matrix[0], matrix[1], matrix[2]);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].set(transformUp, matrix[4], matrix[5], matrix[6]);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].set(transformBackward, matrix[8], matrix[9], matrix[10]);

              var min = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].fromValues(matrix[12], matrix[13], matrix[14]); // init with matrix translation


              var max = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].clone(min);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].scale(tmpVec3a, transformRight, obb.min[0]);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].scale(tmpVec3b, transformRight, obb.max[0]);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].min(transformRight, tmpVec3a, tmpVec3b);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].add(min, min, transformRight);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].max(transformRight, tmpVec3a, tmpVec3b);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].add(max, max, transformRight);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].scale(tmpVec3a, transformUp, obb.min[1]);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].scale(tmpVec3b, transformUp, obb.max[1]);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].min(transformUp, tmpVec3a, tmpVec3b);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].add(min, min, transformUp);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].max(transformUp, tmpVec3a, tmpVec3b);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].add(max, max, transformUp);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].scale(tmpVec3a, transformBackward, obb.min[2]);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].scale(tmpVec3b, transformBackward, obb.max[2]);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].min(transformBackward, tmpVec3a, tmpVec3b);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].add(min, min, transformBackward);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].max(transformBackward, tmpVec3a, tmpVec3b);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].add(max, max, transformBackward);

              var bbox = new BoundingBox(min, max, false);
              bbox.calculateTransform();
              return bbox;
            };
          }();

          var Accessor = MinimalGLTFLoader.Accessor = function (a, bufferViewObject) {
            this.bufferView = bufferViewObject;
            this.componentType = a.componentType; // required

            this.byteOffset = a.byteOffset !== undefined ? a.byteOffset : 0;
            this.byteStride = bufferViewObject.byteStride;
            this.normalized = a.normalized !== undefined ? a.normalized : false;
            this.count = a.count; // required

            this.type = a.type; // required

            this.size = Type2NumOfComponent[this.type];
            this.min = a.min; // @tmp assume required for now (for bbox)

            this.max = a.max; // @tmp assume required for now (for bbox)

            this.extensions = a.extensions !== undefined ? a.extensions : null;
            this.extras = a.extras !== undefined ? a.extras : null;
          };

          Accessor.prototype.prepareVertexAttrib = function (location, gl) {
            gl.vertexAttribPointer(location, this.size, this.componentType, this.normalized, this.byteStride, this.byteOffset);
            gl.enableVertexAttribArray(location);
          };

          var BufferView = MinimalGLTFLoader.BufferView = function (bf, bufferData) {
            this.byteLength = bf.byteLength; //required

            this.byteOffset = bf.byteOffset !== undefined ? bf.byteOffset : 0;
            this.byteStride = bf.byteStride !== undefined ? bf.byteStride : 0;
            this.target = bf.target !== undefined ? bf.target : null;
            this.data = bufferData.slice(this.byteOffset, this.byteOffset + this.byteLength);
            this.extensions = bf.extensions !== undefined ? bf.extensions : null;
            this.extras = bf.extras !== undefined ? bf.extras : null; // runtime stuffs -------------

            this.buffer = null; // gl buffer
          };

          BufferView.prototype.createBuffer = function (gl) {
            this.buffer = gl.createBuffer();
          };

          BufferView.prototype.bindData = function (gl) {
            if (this.target) {
              gl.bindBuffer(this.target, this.buffer);
              gl.bufferData(this.target, this.data, gl.STATIC_DRAW);
              gl.bindBuffer(this.target, null);
              return true;
            }

            return false;
          };

          var Camera = MinimalGLTFLoader.Camera = function (c) {
            this.name = c.name !== undefined ? c.name : null;
            this.type = c.type; // required

            this.othographic = c.othographic === undefined ? null : c.othographic; // every attribute inside is required (excluding extensions)

            this.perspective = c.perspective === undefined ? null : {
              yfov: c.perspective.yfov,
              znear: c.perspective.znear,
              zfar: c.perspective.zfar !== undefined ? c.perspective.zfar : null,
              aspectRatio: c.perspective.aspectRatio !== undefined ? c.perspective.aspectRatio : null
            };
            this.extensions = c.extensions !== undefined ? c.extensions : null;
            this.extras = c.extras !== undefined ? c.extras : null;
          };

          var Node = MinimalGLTFLoader.Node = function (n, nodeID) {
            this.name = n.name !== undefined ? n.name : null;
            this.nodeID = nodeID; // TODO: camera

            this.camera = n.camera !== undefined ? n.camera : null;
            this.matrix = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create();

            if (n.hasOwnProperty('matrix')) {
              for (var i = 0; i < 16; ++i) {
                this.matrix[i] = n.matrix[i];
              }

              this.translation = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].create();

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].getTranslation(this.translation, this.matrix);

              this.rotation = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["quat"].create();

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].getRotation(this.rotation, this.matrix);

              this.scale = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].create();

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].getScaling(this.scale, this.matrix);
            } else {
              // this.translation = null;
              // this.rotation = null;
              // this.scale = null;
              this.getTransformMatrixFromTRS(n.translation, n.rotation, n.scale);
            }

            this.children = n.children || []; // init as id, then hook up to node object later

            this.mesh = n.mesh !== undefined ? curLoader.glTF.meshes[n.mesh] : null;
            this.skin = n.skin !== undefined ? n.skin : null; // init as id, then hook up to skin object later

            if (n.extensions !== undefined) {
              if (n.extensions.gl_avatar !== undefined && curLoader.enableGLAvatar === true) {
                var linkedSkinID = curLoader.skeletonGltf.json.extensions.gl_avatar.skins[n.extensions.gl_avatar.skin.name];
                var linkedSkin = curLoader.skeletonGltf.skins[linkedSkinID];
                this.skin = new SkinLink(curLoader.glTF, linkedSkin, n.extensions.gl_avatar.skin.inverseBindMatrices);
              }
            } // TODO: morph targets weights


            this.weights = n.weights !== undefined ? n.weights : null;
            this.extensions = n.extensions !== undefined ? n.extensions : null;
            this.extras = n.extras !== undefined ? n.extras : null; // runtime stuffs--------------

            this.aabb = null; // axis aligned bounding box, not need to apply node transform to aabb

            this.bvh = new BoundingBox();
          };

          Node.prototype.traverse = function (parent, executeFunc) {
            executeFunc(this, parent);

            for (var i = 0, len = this.children.length; i < len; i++) {
              this.children[i].traverse(this, executeFunc);
            }
          };

          Node.prototype.traversePostOrder = function (parent, executeFunc) {
            for (var i = 0, len = this.children.length; i < len; i++) {
              this.children[i].traversePostOrder(this, executeFunc);
            }

            executeFunc(this, parent);
          };

          Node.prototype.traverseTwoExecFun = function (parent, execFunPre, execFunPos) {
            execFunPre(this, parent);

            for (var i = 0, len = this.children.length; i < len; i++) {
              this.children[i].traverseTwoExecFun(this, execFunPre, execFunPos);
            }

            execFunPos(this, parent);
          };

          var TRSMatrix = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create();

          Node.prototype.getTransformMatrixFromTRS = function (translation, rotation, scale) {
            this.translation = translation !== undefined ? __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].fromValues(translation[0], translation[1], translation[2]) : __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].fromValues(0, 0, 0);
            this.rotation = rotation !== undefined ? __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec4"].fromValues(rotation[0], rotation[1], rotation[2], rotation[3]) : __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec4"].fromValues(0, 0, 0, 1);
            this.scale = scale !== undefined ? __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].fromValues(scale[0], scale[1], scale[2]) : __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].fromValues(1, 1, 1);
            this.updateMatrixFromTRS();
          };

          Node.prototype.updateMatrixFromTRS = function () {
            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].fromRotationTranslation(TRSMatrix, this.rotation, this.translation);

            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].scale(this.matrix, TRSMatrix, this.scale);
          };

          var Mesh = MinimalGLTFLoader.Mesh = function (m, meshID) {
            this.meshID = meshID;
            this.name = m.name !== undefined ? m.name : null;
            this.primitives = []; // required
            // bounding box (runtime stuff)

            this.boundingBox = null;
            var p, primitive, accessor;

            for (var i = 0, len = m.primitives.length; i < len; ++i) {
              p = m.primitives[i];
              primitive = new Primitive(curLoader.glTF, p);
              this.primitives.push(primitive); // bounding box related

              if (primitive.boundingBox) {
                if (!this.boundingBox) {
                  this.boundingBox = new BoundingBox();
                }

                this.boundingBox.updateBoundingBox(primitive.boundingBox);
              }
            }

            if (this.boundingBox) {
              this.boundingBox.calculateTransform();
            } // TODO: weights for morph targets


            this.weights = m.weights !== undefined ? m.weights : null;
            this.extensions = m.extensions !== undefined ? m.extensions : null;
            this.extras = m.extras !== undefined ? m.extras : null;
          };

          var Primitive = MinimalGLTFLoader.Primitive = function (gltf, p) {
            // <attribute name, accessor id>, required
            // get hook up with accessor object in _postprocessing
            this.attributes = p.attributes;
            this.indices = p.indices !== undefined ? p.indices : null; // accessor id

            var attname;

            if (p.extensions !== undefined) {
              if (p.extensions.gl_avatar !== undefined && curLoader.enableGLAvatar === true) {
                if (p.extensions.gl_avatar.attributes) {
                  for (attname in p.extensions.gl_avatar.attributes) {
                    this.attributes[attname] = p.extensions.gl_avatar.attributes[attname];
                  }
                }
              }
            }

            if (this.indices !== null) {
              this.indicesComponentType = gltf.json.accessors[this.indices].componentType;
              this.indicesLength = gltf.json.accessors[this.indices].count;
              this.indicesOffset = gltf.json.accessors[this.indices].byteOffset || 0;
            } else {
              // assume 'POSITION' is there
              this.drawArraysCount = gltf.json.accessors[this.attributes.POSITION].count;
              this.drawArraysOffset = gltf.json.accessors[this.attributes.POSITION].byteOffset || 0;
            } // hook up accessor object


            for (attname in this.attributes) {
              this.attributes[attname] = gltf.accessors[this.attributes[attname]];
            }

            this.material = p.material !== undefined ? gltf.materials[p.material] : null;
            this.mode = p.mode !== undefined ? p.mode : 4; // default: gl.TRIANGLES
            // morph related

            this.targets = p.targets;
            this.extensions = p.extensions !== undefined ? p.extensions : null;
            this.extras = p.extras !== undefined ? p.extras : null; // ----gl run time related

            this.vertexArray = null; //vao

            this.vertexBuffer = null;
            this.indexBuffer = null;
            this.shader = null;
            this.boundingBox = null;

            if (this.attributes.POSITION !== undefined) {
              var accessor = this.attributes.POSITION;

              if (accessor.max) {
                // @todo: handle cases where no min max are provided
                // assume vec3
                if (accessor.type === 'VEC3') {
                  this.boundingBox = new BoundingBox(__WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].fromValues(accessor.min[0], accessor.min[1], accessor.min[2]), __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].fromValues(accessor.max[0], accessor.max[1], accessor.max[2]), false);
                  this.boundingBox.calculateTransform();
                }
              }
            }
          };

          var Texture = MinimalGLTFLoader.Texture = function (t) {
            this.name = t.name !== undefined ? t.name : null;
            this.sampler = t.sampler !== undefined ? curLoader.glTF.samplers[t.sampler] : null;
            this.source = t.source !== undefined ? curLoader.glTF.images[t.source] : null;
            this.extensions = t.extensions !== undefined ? t.extensions : null;
            this.extras = t.extras !== undefined ? t.extras : null; // runtime

            this.texture = null;
          };

          Texture.prototype.createTexture = function (gl) {
            this.texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texImage2D(gl.TEXTURE_2D, // assumed
            0, // Level of details
            // gl.RGB, // Format
            // gl.RGB,
            gl.RGBA, // Format
            gl.RGBA, gl.UNSIGNED_BYTE, // Size of each channel
            this.source);
            gl.generateMipmap(gl.TEXTURE_2D);
            gl.bindTexture(gl.TEXTURE_2D, null);
          };

          var Sampler = MinimalGLTFLoader.Sampler = function (s) {
            this.name = s.name !== undefined ? s.name : null;
            this.magFilter = s.magFilter !== undefined ? s.magFilter : null;
            this.minFilter = s.minFilter !== undefined ? s.minFilter : null;
            this.wrapS = s.wrapS !== undefined ? s.wrapS : 10497;
            this.wrapT = s.wrapT !== undefined ? s.wrapT : 10497;
            this.extensions = s.extensions !== undefined ? s.extensions : null;
            this.extras = s.extras !== undefined ? s.extras : null;
            this.sampler = null;
          };

          Sampler.prototype.createSampler = function (gl) {
            this.sampler = gl.createSampler();

            if (this.minFilter) {
              gl.samplerParameteri(this.sampler, gl.TEXTURE_MIN_FILTER, this.minFilter);
            } else {
              gl.samplerParameteri(this.sampler, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);
            }

            if (this.magFilter) {
              gl.samplerParameteri(this.sampler, gl.TEXTURE_MAG_FILTER, this.magFilter);
            } else {
              gl.samplerParameteri(this.sampler, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            }

            gl.samplerParameteri(this.sampler, gl.TEXTURE_WRAP_S, this.wrapS);
            gl.samplerParameteri(this.sampler, gl.TEXTURE_WRAP_T, this.wrapT);
          }; // Sampler.prototype.bindSampler = function(i, gl) {
          //     gl.bindSampler(i, this.sampler);
          // }


          var TextureInfo = MinimalGLTFLoader.TextureInfo = function (json) {
            this.index = json.index;
            this.texCoord = json.texCoord !== undefined ? json.texCoord : 0;
            this.extensions = json.extensions !== undefined ? json.extensions : null;
            this.extras = json.extras !== undefined ? json.extras : null;
          };

          var PbrMetallicRoughness = MinimalGLTFLoader.PbrMetallicRoughness = function (json) {
            this.baseColorFactor = json.baseColorFactor !== undefined ? json.baseColorFactor : [1, 1, 1, 1];
            this.baseColorTexture = json.baseColorTexture !== undefined ? new TextureInfo(json.baseColorTexture) : null;
            this.metallicFactor = json.metallicFactor !== undefined ? json.metallicFactor : 1;
            this.roughnessFactor = json.roughnessFactor !== undefined ? json.roughnessFactor : 1;
            this.metallicRoughnessTexture = json.metallicRoughnessTexture !== undefined ? new TextureInfo(json.metallicRoughnessTexture) : null;
            this.extensions = json.extensions !== undefined ? json.extensions : null;
            this.extras = json.extras !== undefined ? json.extras : null;
          };

          var NormalTextureInfo = MinimalGLTFLoader.NormalTextureInfo = function (json) {
            this.index = json.index;
            this.texCoord = json.texCoord !== undefined ? json.texCoord : 0;
            this.scale = json.scale !== undefined ? json.scale : 1;
            this.extensions = json.extensions !== undefined ? json.extensions : null;
            this.extras = json.extras !== undefined ? json.extras : null;
          };

          var OcclusionTextureInfo = MinimalGLTFLoader.OcclusionTextureInfo = function (json) {
            this.index = json.index;
            this.texCoord = json.texCoord !== undefined ? json.texCoord : 0;
            this.strength = json.strength !== undefined ? json.strength : 1;
            this.extensions = json.extensions !== undefined ? json.extensions : null;
            this.extras = json.extras !== undefined ? json.extras : null;
          };

          var Material = MinimalGLTFLoader.Material = function (m) {
            this.name = m.name !== undefined ? m.name : null;
            this.pbrMetallicRoughness = m.pbrMetallicRoughness !== undefined ? new PbrMetallicRoughness(m.pbrMetallicRoughness) : new PbrMetallicRoughness({
              baseColorFactor: [1, 1, 1, 1],
              metallicFactor: 1,
              metallicRoughnessTexture: 1
            }); // this.normalTexture = m.normalTexture !== undefined ? m.normalTexture : null;

            this.normalTexture = m.normalTexture !== undefined ? new NormalTextureInfo(m.normalTexture) : null;
            this.occlusionTexture = m.occlusionTexture !== undefined ? new OcclusionTextureInfo(m.occlusionTexture) : null;
            this.emissiveTexture = m.emissiveTexture !== undefined ? new TextureInfo(m.emissiveTexture) : null;
            this.emissiveFactor = m.emissiveFactor !== undefined ? m.emissiveFactor : [0, 0, 0];
            this.alphaMode = m.alphaMode !== undefined ? m.alphaMode : "OPAQUE";
            this.alphaCutoff = m.alphaCutoff !== undefined ? m.alphaCutoff : 0.5;
            this.doubleSided = m.doubleSided || false;
            this.extensions = m.extensions !== undefined ? m.extensions : null;
            this.extras = m.extras !== undefined ? m.extras : null;
          };

          var Skin = MinimalGLTFLoader.Skin = function (gltf, s, skinID) {
            this.name = s.name !== undefined ? s.name : null;
            this.skinID = skinID;
            this.joints = new Array(s.joints.length); // required

            var i, len;

            for (i = 0, len = this.joints.length; i < len; i++) {
              this.joints[i] = gltf.nodes[s.joints[i]];
            }

            this.skeleton = s.skeleton !== undefined ? gltf.nodes[s.skeleton] : null;
            this.inverseBindMatrices = s.inverseBindMatrices !== undefined ? gltf.accessors[s.inverseBindMatrices] : null;
            this.extensions = s.extensions !== undefined ? s.extensions : null;
            this.extras = s.extras !== undefined ? s.extras : null; // @tmp: runtime stuff should be taken care of renderer
            // since glTF model should only store info
            // runtime can have multiple instances of this glTF models

            this.uniformBlockID = globalUniformBlockID++;

            if (this.inverseBindMatrices) {
              // should be a mat4
              this.inverseBindMatricesData = _getAccessorData(this.inverseBindMatrices); // this.inverseBindMatricesMat4 = mat4.fromValues(this.inverseBindMatricesData);

              this.inverseBindMatrix = []; // for calculation

              this.jointMatrixUniformBuffer = null; // this.jointMatrixUnidormBufferData = _arrayBuffer2TypedArray(
              //     this.inverseBindMatricesData, 
              //     0, 
              //     this.inverseBindMatricesData.length, 
              //     this.inverseBindMatrices.componentType
              // );      // for copy to UBO
              // @tmp: fixed length to coordinate with shader, for copy to UBO

              this.jointMatrixUnidormBufferData = new Float32Array(NUM_MAX_JOINTS * 16);

              for (i = 0, len = this.inverseBindMatricesData.length; i < len; i += 16) {
                this.inverseBindMatrix.push(__WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].fromValues(this.inverseBindMatricesData[i], this.inverseBindMatricesData[i + 1], this.inverseBindMatricesData[i + 2], this.inverseBindMatricesData[i + 3], this.inverseBindMatricesData[i + 4], this.inverseBindMatricesData[i + 5], this.inverseBindMatricesData[i + 6], this.inverseBindMatricesData[i + 7], this.inverseBindMatricesData[i + 8], this.inverseBindMatricesData[i + 9], this.inverseBindMatricesData[i + 10], this.inverseBindMatricesData[i + 11], this.inverseBindMatricesData[i + 12], this.inverseBindMatricesData[i + 13], this.inverseBindMatricesData[i + 14], this.inverseBindMatricesData[i + 15]));
              }
            }
          };

          var SkinLink = MinimalGLTFLoader.SkinLink = function (gltf, linkedSkin, inverseBindMatricesAccessorID) {
            this.isLink = true;

            if (!gltf.skins) {
              gltf.skins = [];
            }

            gltf.skins.push(this);
            this.name = linkedSkin.name; // this.skinID = linkedSkin.skinID;   // use this for uniformblock id
            // this.skinID = gltf.skins.length - 1;
            // this.skinID = curLoader.skeletonGltf.skins.length + gltf.skins.length - 1;

            this.skinID = gltf.skins.length - 1;
            this.joints = linkedSkin.joints;
            this.skeleton = linkedSkin.skeleton;
            this.inverseBindMatrices = inverseBindMatricesAccessorID !== undefined ? gltf.accessors[inverseBindMatricesAccessorID] : null; // @tmp: runtime stuff should be taken care of renderer
            // since glTF model should only store info
            // runtime can have multiple instances of this glTF models

            this.uniformBlockID = globalUniformBlockID++;

            if (this.inverseBindMatrices) {
              // should be a mat4
              this.inverseBindMatricesData = _getAccessorData(this.inverseBindMatrices); // this.inverseBindMatricesMat4 = mat4.fromValues(this.inverseBindMatricesData);

              this.inverseBindMatrix = []; // for calculation

              this.jointMatrixUniformBuffer = null; // this.jointMatrixUnidormBufferData = _arrayBuffer2TypedArray(
              //     this.inverseBindMatricesData, 
              //     0, 
              //     this.inverseBindMatricesData.length, 
              //     this.inverseBindMatrices.componentType
              // );      // for copy to UBO
              // @tmp: fixed length to coordinate with shader, for copy to UBO

              this.jointMatrixUnidormBufferData = new Float32Array(NUM_MAX_JOINTS * 16);

              for (var i = 0, len = this.inverseBindMatricesData.length; i < len; i += 16) {
                this.inverseBindMatrix.push(__WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].fromValues(this.inverseBindMatricesData[i], this.inverseBindMatricesData[i + 1], this.inverseBindMatricesData[i + 2], this.inverseBindMatricesData[i + 3], this.inverseBindMatricesData[i + 4], this.inverseBindMatricesData[i + 5], this.inverseBindMatricesData[i + 6], this.inverseBindMatricesData[i + 7], this.inverseBindMatricesData[i + 8], this.inverseBindMatricesData[i + 9], this.inverseBindMatricesData[i + 10], this.inverseBindMatricesData[i + 11], this.inverseBindMatricesData[i + 12], this.inverseBindMatricesData[i + 13], this.inverseBindMatricesData[i + 14], this.inverseBindMatricesData[i + 15]));
              }
            }
          }; // animation has no potential plan for progressive rendering I guess
          // so everything happens after all buffers are loaded


          var Target = MinimalGLTFLoader.Target = function (t) {
            this.nodeID = t.node !== undefined ? t.node : null; //id, to be hooked up to object later

            this.path = t.path; //required, string

            this.extensions = t.extensions !== undefined ? t.extensions : null;
            this.extras = t.extras !== undefined ? t.extras : null;
          };

          var Channel = MinimalGLTFLoader.Channel = function (c, animation) {
            this.sampler = animation.samplers[c.sampler]; //required

            this.target = new Target(c.target); //required

            this.extensions = c.extensions !== undefined ? c.extensions : null;
            this.extras = c.extras !== undefined ? c.extras : null;
          };

          var AnimationSampler = MinimalGLTFLoader.AnimationSampler = function (gltf, s) {
            this.input = gltf.accessors[s.input]; //required, accessor object

            this.output = gltf.accessors[s.output]; //required, accessor object

            this.inputTypedArray = _getAccessorData(this.input);
            this.outputTypedArray = _getAccessorData(this.output); // "LINEAR"
            // "STEP"
            // "CATMULLROMSPLINE"
            // "CUBICSPLINE"

            this.interpolation = s.interpolation !== undefined ? s.interpolation : 'LINEAR';
            this.extensions = s.extensions !== undefined ? s.extensions : null;
            this.extras = s.extras !== undefined ? s.extras : null; // ------- extra runtime info -----------
            // runtime status thing

            this.curIdx = 0; // this.curValue = 0;

            this.curValue = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec4"].create();
            this.endT = this.inputTypedArray[this.inputTypedArray.length - 1];
            this.inputMax = this.endT - this.inputTypedArray[0];
          };

          var animationOutputValueVec4a = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec4"].create();

          var animationOutputValueVec4b = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec4"].create();

          AnimationSampler.prototype.getValue = function (t) {
            if (t > this.endT) {
              t -= this.inputMax * Math.ceil((t - this.endT) / this.inputMax);
              this.curIdx = 0;
            }

            var len = this.inputTypedArray.length;

            while (this.curIdx <= len - 2 && t >= this.inputTypedArray[this.curIdx + 1]) {
              this.curIdx++;
            }

            if (this.curIdx >= len - 1) {
              // loop
              t -= this.inputMax;
              this.curIdx = 0;
            } // @tmp: assume no stride


            var count = Type2NumOfComponent[this.output.type];
            var v4lerp = count === 4 ? __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["quat"].slerp : __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec4"].lerp;
            var i = this.curIdx;
            var o = i * count;
            var on = o + count;
            var u = Math.max(0, t - this.inputTypedArray[i]) / (this.inputTypedArray[i + 1] - this.inputTypedArray[i]);

            for (var j = 0; j < count; j++) {
              animationOutputValueVec4a[j] = this.outputTypedArray[o + j];
              animationOutputValueVec4b[j] = this.outputTypedArray[on + j];
            }

            switch (this.interpolation) {
              case 'LINEAR':
                v4lerp(this.curValue, animationOutputValueVec4a, animationOutputValueVec4b, u);
                break;

              default:
                break;
            }
          };

          var Animation = MinimalGLTFLoader.Animation = function (gltf, a) {
            this.name = a.name !== undefined ? a.name : null;
            var i, len;
            this.samplers = []; // required, array of animation sampler

            for (i = 0, len = a.samplers.length; i < len; i++) {
              this.samplers[i] = new AnimationSampler(gltf, a.samplers[i]);
            }

            this.channels = []; //required, array of channel

            for (i = 0, len = a.channels.length; i < len; i++) {
              this.channels[i] = new Channel(a.channels[i], this);
            }

            this.extensions = a.extensions !== undefined ? a.extensions : null;
            this.extras = a.extras !== undefined ? a.extras : null;
          };
          /**
           * 
           */


          var glTFModel = MinimalGLTFLoader.glTFModel = function (gltf) {
            this.json = gltf;
            this.defaultScene = gltf.scene !== undefined ? gltf.scene : 0;
            this.version = Number(gltf.asset.version);

            if (gltf.accessors) {
              this.accessors = new Array(gltf.accessors.length);
            }

            if (gltf.bufferViews) {
              this.bufferViews = new Array(gltf.bufferViews.length);
            }

            if (gltf.scenes) {
              this.scenes = new Array(gltf.scenes.length); // store Scene object
            }

            if (gltf.nodes) {
              this.nodes = new Array(gltf.nodes.length); // store Node object
            }

            if (gltf.meshes) {
              this.meshes = new Array(gltf.meshes.length); // store mesh object
            }

            if (gltf.materials) {
              this.materials = new Array(gltf.materials.length); // store material object
            }

            if (gltf.textures) {
              this.textures = new Array(gltf.textures.length);
            }

            if (gltf.samplers) {
              this.samplers = new Array(gltf.samplers.length);
            }

            if (gltf.images) {
              this.images = new Array(gltf.images.length);
            }

            if (gltf.skins) {
              this.skins = new Array(gltf.skins.length);
            }

            if (gltf.animations) {
              this.animations = new Array(gltf.animations.length);
            }

            if (gltf.cameras) {
              this.cameras = new Array(gltf.cameras.length);
            }

            this.extensions = gltf.extensions !== undefined ? gltf.extensions : null;
            this.extras = gltf.extras !== undefined ? gltf.extras : null;
          };

          var gl;

          var glTFLoader = MinimalGLTFLoader.glTFLoader = function (glContext) {
            gl = glContext !== undefined ? glContext : null;

            this._init();

            this.glTF = null;
            this.enableGLAvatar = false;
            this.linkSkeletonGltf = null;
          };

          glTFLoader.prototype._init = function () {
            this._loadDone = false;
            this._bufferRequested = 0;
            this._bufferLoaded = 0;
            this._buffers = [];
            this._bufferTasks = {};
            this._shaderRequested = 0;
            this._shaderLoaded = 0;
            this._imageRequested = 0;
            this._imageLoaded = 0;
            this._pendingTasks = 0;
            this._finishedPendingTasks = 0;
            this.onload = null;
            curLoader = this;
          };

          glTFLoader.prototype._checkComplete = function () {
            if (this._bufferRequested == this._bufferLoaded && // this._shaderRequested == this._shaderLoaded && 
            this._imageRequested == this._imageLoaded // && other resources finish loading
            ) {
                this._loadDone = true;
              }

            if (this._loadDone && this._pendingTasks == this._finishedPendingTasks) {
              this._postprocess();

              this.onload(this.glTF);
            }
          };

          glTFLoader.prototype.loadGLTF_GL_Avatar_Skin = function (uri, skeletonGltf, callback) {
            this.enableGLAvatar = true;
            this.skeletonGltf = skeletonGltf;
            this.loadGLTF(uri, callback);
          };
          /**
           * load a glTF model
           * 
           * @param {String} uri uri of the .glTF file. Other resources (bins, images) are assumed to be in the same base path
           * @param {Function} callback the onload callback function
           */


          glTFLoader.prototype.loadGLTF = function (uri, callback) {
            this._init();

            this.onload = callback || function (glTF) {
              console.log('glTF model loaded.');
              console.log(glTF);
            };

            this.baseUri = _getBaseUri(uri);
            var loader = this;

            _loadJSON(uri, function (response) {
              // Parse JSON string into object
              var json = JSON.parse(response);
              loader.glTF = new glTFModel(json);
              var bid;

              var loadArrayBufferCallback = function loadArrayBufferCallback(resource) {
                loader._buffers[bid] = resource;
                loader._bufferLoaded++;

                if (loader._bufferTasks[bid]) {
                  var i, len;

                  for (i = 0, len = loader._bufferTasks[bid].length; i < len; ++i) {
                    loader._bufferTasks[bid][i](resource);
                  }
                }

                loader._checkComplete();
              }; // Launch loading resources task: buffers, etc.


              if (json.buffers) {
                for (bid in json.buffers) {
                  loader._bufferRequested++;

                  _loadArrayBuffer(json.buffers[bid].uri, loadArrayBufferCallback);
                }
              } // load images


              var loadImageCallback = function loadImageCallback(img, iid) {
                loader._imageLoaded++;
                loader.glTF.images[iid] = img;

                loader._checkComplete();
              };

              var iid;

              if (json.images) {
                for (iid in json.images) {
                  loader._imageRequested++;

                  _loadImage(loader.baseUri + json.images[iid].uri, iid, loadImageCallback);
                }
              }

              loader._checkComplete();
            });
          };

          glTFLoader.prototype._postprocess = function () {
            // if there's no plan for progressive loading (streaming)
            // than simply everything should be placed here
            // console.log('finish loading all assets, do a second pass postprocess');
            curLoader = this;
            var i, leni, j, lenj;
            var scene, s;
            var node;
            var mesh, primitive, accessor; // cameras

            if (this.glTF.cameras) {
              for (i = 0, leni = this.glTF.cameras.length; i < leni; i++) {
                this.glTF.cameras[i] = new Camera(this.glTF.json.cameras[i]);
              }
            } // bufferviews


            if (this.glTF.bufferViews) {
              for (i = 0, leni = this.glTF.bufferViews.length; i < leni; i++) {
                this.glTF.bufferViews[i] = new BufferView(this.glTF.json.bufferViews[i], this._buffers[this.glTF.json.bufferViews[i].buffer]);
              }
            } // accessors


            if (this.glTF.accessors) {
              for (i = 0, leni = this.glTF.accessors.length; i < leni; i++) {
                this.glTF.accessors[i] = new Accessor(this.glTF.json.accessors[i], this.glTF.bufferViews[this.glTF.json.accessors[i].bufferView]);
              }
            } // load all materials


            if (this.glTF.materials) {
              for (i = 0, leni = this.glTF.materials.length; i < leni; i++) {
                this.glTF.materials[i] = new Material(this.glTF.json.materials[i]);
              }
            } // load all samplers 


            if (this.glTF.samplers) {
              for (i = 0, leni = this.glTF.samplers.length; i < leni; i++) {
                this.glTF.samplers[i] = new Sampler(this.glTF.json.samplers[i]);
              }
            } // load all textures


            if (this.glTF.textures) {
              for (i = 0, leni = this.glTF.textures.length; i < leni; i++) {
                this.glTF.textures[i] = new Texture(this.glTF.json.textures[i]);
              }
            } // mesh


            for (i = 0, leni = this.glTF.meshes.length; i < leni; i++) {
              this.glTF.meshes[i] = new Mesh(this.glTF.json.meshes[i], i);
            } // node


            for (i = 0, leni = this.glTF.nodes.length; i < leni; i++) {
              this.glTF.nodes[i] = new Node(this.glTF.json.nodes[i], i);
            } // node: hook up children


            for (i = 0, leni = this.glTF.nodes.length; i < leni; i++) {
              node = this.glTF.nodes[i];

              for (j = 0, lenj = node.children.length; j < lenj; j++) {
                node.children[j] = this.glTF.nodes[node.children[j]];
              }
            } // scene Bounding box


            var nodeMatrix = new Array(this.glTF.nodes.length);

            for (i = 0, leni = nodeMatrix.length; i < leni; i++) {
              nodeMatrix[i] = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].create();
            }

            function execUpdateTransform(n, parent) {
              var tmpMat4 = nodeMatrix[n.nodeID];

              if (parent !== null) {
                __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].mul(tmpMat4, nodeMatrix[parent.nodeID], n.matrix);
              } else {
                __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["mat4"].copy(tmpMat4, n.matrix);
              }
            }

            function execUpdateBBox(n, parent) {
              var tmpMat4 = nodeMatrix[n.nodeID];
              var parentBVH;

              if (parent !== null) {
                parentBVH = parent.bvh;
              } else {
                parentBVH = scene.boundingBox;
              }

              if (n.mesh) {
                mesh = n.mesh;

                if (mesh.boundingBox) {
                  n.aabb = BoundingBox.getAABBFromOBB(mesh.boundingBox, tmpMat4);

                  if (n.children.length === 0) {
                    // n.bvh = n.aabb;
                    __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].copy(n.bvh.min, n.aabb.min);

                    __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].copy(n.bvh.max, n.aabb.max);
                  }
                }
              }

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].min(parentBVH.min, parentBVH.min, n.bvh.min);

              __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["vec3"].max(parentBVH.max, parentBVH.max, n.bvh.max);
            }

            for (i = 0, leni = this.glTF.scenes.length; i < leni; i++) {
              scene = this.glTF.scenes[i] = new Scene(this.glTF, this.glTF.json.scenes[i]);
              scene.boundingBox = new BoundingBox();

              for (j = 0, lenj = scene.nodes.length; j < lenj; j++) {
                node = scene.nodes[j]; // node.traverse(null, execUpdateBBox);

                node.traverseTwoExecFun(null, execUpdateTransform, execUpdateBBox);
              }

              scene.boundingBox.calculateTransform();
            }

            for (j = 0, lenj = this.glTF.nodes.length; j < lenj; j++) {
              node = this.glTF.nodes[j];

              if (node.bvh !== null) {
                node.bvh.calculateTransform();
              }
            } // load animations (when all accessors are loaded correctly)


            if (this.glTF.animations) {
              for (i = 0, leni = this.glTF.animations.length; i < leni; i++) {
                this.glTF.animations[i] = new Animation(this.glTF, this.glTF.json.animations[i]);
              }
            }

            var joints; // if (this.glTF.skins) {

            if (this.glTF.json.skins) {
              for (i = 0, leni = this.glTF.skins.length; i < leni; i++) {
                this.glTF.skins[i] = new Skin(this.glTF, this.glTF.json.skins[i], i);
                joints = this.glTF.skins[i].joints;

                for (j = 0, lenj = joints.length; j < lenj; j++) {
                  // this.glTF.nodes[ joints[j] ].jointID = j;
                  joints[j].jointID = j;
                }
              }
            }

            for (i = 0, leni = this.glTF.nodes.length; i < leni; i++) {
              node = this.glTF.nodes[i];

              if (node.skin !== null) {
                if (typeof node.skin == 'number') {
                  // usual skin, hook up
                  node.skin = this.glTF.skins[node.skin];
                } else {// assume gl_avatar is in use
                  // do nothing
                }
              }
            }
          }; // TODO: get from gl context


          var ComponentType2ByteSize = {
            5120: 1,
            // BYTE
            5121: 1,
            // UNSIGNED_BYTE
            5122: 2,
            // SHORT
            5123: 2,
            // UNSIGNED_SHORT
            5126: 4 // FLOAT

          };
          var Type2NumOfComponent = {
            'SCALAR': 1,
            'VEC2': 2,
            'VEC3': 3,
            'VEC4': 4,
            'MAT2': 4,
            'MAT3': 9,
            'MAT4': 16
          }; // ------ Scope limited private util functions---------------
          // for animation use

          function _arrayBuffer2TypedArray(buffer, byteOffset, countOfComponentType, componentType) {
            switch (componentType) {
              // @todo: finish
              case 5122:
                return new Int16Array(buffer, byteOffset, countOfComponentType);

              case 5123:
                return new Uint16Array(buffer, byteOffset, countOfComponentType);

              case 5124:
                return new Int32Array(buffer, byteOffset, countOfComponentType);

              case 5125:
                return new Uint32Array(buffer, byteOffset, countOfComponentType);

              case 5126:
                return new Float32Array(buffer, byteOffset, countOfComponentType);

              default:
                return null;
            }
          }

          function _getAccessorData(accessor) {
            return _arrayBuffer2TypedArray(accessor.bufferView.data, accessor.byteOffset, accessor.count * Type2NumOfComponent[accessor.type], accessor.componentType);
          }

          function _getBaseUri(uri) {
            // https://github.com/AnalyticalGraphicsInc/cesium/blob/master/Source/Core/getBaseUri.js
            var basePath = '';
            var i = uri.lastIndexOf('/');

            if (i !== -1) {
              basePath = uri.substring(0, i + 1);
            }

            return basePath;
          }

          function _loadJSON(src, callback) {
            // native json loading technique from @KryptoniteDove:
            // http://codepen.io/KryptoniteDove/post/load-json-file-locally-using-pure-javascript
            var xobj = new XMLHttpRequest();
            xobj.overrideMimeType("application/json");
            xobj.open('GET', src, true);

            xobj.onreadystatechange = function () {
              if (xobj.readyState == 4 && // Request finished, response ready
              xobj.status == "200") {
                // Status OK
                callback(xobj.responseText, this);
              }
            };

            xobj.send(null);
          }

          function _loadArrayBuffer(url, callback) {
            var xobj = new XMLHttpRequest();
            xobj.responseType = 'arraybuffer';
            xobj.open('GET', url, true);

            xobj.onreadystatechange = function () {
              if (xobj.readyState == 4 && // Request finished, response ready
              xobj.status == "200") {
                // Status OK
                var arrayBuffer = xobj.response;

                if (arrayBuffer && callback) {
                  callback(arrayBuffer);
                }
              }
            };

            xobj.send(null);
          }

          function _loadImage(url, iid, onload) {
            var img = new Image();
            img.crossOrigin = "Anonymous";
            img.src = url;

            img.onload = function () {
              onload(img, iid);
            };
          } // export { MinimalGLTFLoader };

          /***/

        },
        /* 1 */

        /***/
        function (module, exports) {
          module.exports = __WEBPACK_EXTERNAL_MODULE_1__;
          /***/
        }])
      );
    });
    /***/

  },
  /* 13 */

  /***/
  function (module, exports, __webpack_require__) {
    // style-loader: Adds some css to the DOM by adding a <style> tag
    // load the styles
    var content = __webpack_require__(14);

    if (typeof content === 'string') content = [[module.i, content, '']]; // Prepare cssTransformation

    var transform;
    var options = {};
    options.transform = transform; // add the styles to the DOM

    var update = __webpack_require__(16)(content, options);

    if (content.locals) module.exports = content.locals; // Hot Module Replacement

    if (false) {}
    /***/

  },
  /* 14 */

  /***/
  function (module, exports, __webpack_require__) {
    exports = module.exports = __webpack_require__(15)(false); // imports
    // module

    exports.push([module.i, "body {\r\n    color: #cccccc;\r\n    font-family: Monospace;\r\n    font-size: 13px;\r\n    text-align: center;\r\n    background-color: #050505;\r\n    margin: 0px;\r\n    overflow: hidden;\r\n}\r\n\r\n#info {\r\n    position: absolute;\r\n    top: 0px;\r\n    width: 100%;\r\n    padding: 5px;\r\n}\r\n\r\n#description {\r\n    position: absolute;\r\n    top: 20px;\r\n    width: 100%;\r\n    padding: 5px;\r\n}\r\n\r\n.float {\r\n    float: left;\r\n    top: 10px;\r\n}\r\n\r\na {\r\n    color: #0080ff;\r\n}\r\n", ""]); // exports

    /***/
  },
  /* 15 */

  /***/
  function (module, exports) {
    /*
        MIT License http://www.opensource.org/licenses/mit-license.php
        Author Tobias Koppers @sokra
    */
    // css base code, injected by the css-loader
    module.exports = function (useSourceMap) {
      var list = []; // return the list of modules as css string

      list.toString = function toString() {
        return this.map(function (item) {
          var content = cssWithMappingToString(item, useSourceMap);

          if (item[2]) {
            return "@media " + item[2] + "{" + content + "}";
          } else {
            return content;
          }
        }).join("");
      }; // import a list of modules into the list


      list.i = function (modules, mediaQuery) {
        if (typeof modules === "string") modules = [[null, modules, ""]];
        var alreadyImportedModules = {};

        for (var i = 0; i < this.length; i++) {
          var id = this[i][0];
          if (typeof id === "number") alreadyImportedModules[id] = true;
        }

        for (i = 0; i < modules.length; i++) {
          var item = modules[i]; // skip already imported module
          // this implementation is not 100% perfect for weird media query combinations
          //  when a module is imported multiple times with different media queries.
          //  I hope this will never occur (Hey this way we have smaller bundles)

          if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
            if (mediaQuery && !item[2]) {
              item[2] = mediaQuery;
            } else if (mediaQuery) {
              item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
            }

            list.push(item);
          }
        }
      };

      return list;
    };

    function cssWithMappingToString(item, useSourceMap) {
      var content = item[1] || '';
      var cssMapping = item[3];

      if (!cssMapping) {
        return content;
      }

      if (useSourceMap && typeof btoa === 'function') {
        var sourceMapping = toComment(cssMapping);
        var sourceURLs = cssMapping.sources.map(function (source) {
          return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
        });
        return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
      }

      return [content].join('\n');
    } // Adapted from convert-source-map (MIT)


    function toComment(sourceMap) {
      // eslint-disable-next-line no-undef
      var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
      var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
      return '/*# ' + data + ' */';
    }
    /***/

  },
  /* 16 */

  /***/
  function (module, exports, __webpack_require__) {
    /*
        MIT License http://www.opensource.org/licenses/mit-license.php
        Author Tobias Koppers @sokra
    */
    var stylesInDom = {};

    var memoize = function memoize(fn) {
      var memo;
      return function () {
        if (typeof memo === "undefined") memo = fn.apply(this, arguments);
        return memo;
      };
    };

    var isOldIE = memoize(function () {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      return window && document && document.all && !window.atob;
    });

    var getElement = function (fn) {
      var memo = {};
      return function (selector) {
        if (typeof memo[selector] === "undefined") {
          memo[selector] = fn.call(this, selector);
        }

        return memo[selector];
      };
    }(function (target) {
      return document.querySelector(target);
    });

    var singleton = null;
    var singletonCounter = 0;
    var stylesInsertedAtTop = [];

    var fixUrls = __webpack_require__(17);

    module.exports = function (list, options) {
      if (typeof DEBUG !== "undefined" && DEBUG) {
        if ((typeof document === "undefined" ? "undefined" : _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(document)) !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
      }

      options = options || {};
      options.attrs = _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(options.attrs) === "object" ? options.attrs : {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
      // tags it will allow on a page

      if (!options.singleton) options.singleton = isOldIE(); // By default, add <style> tags to the <head> element

      if (!options.insertInto) options.insertInto = "head"; // By default, add <style> tags to the bottom of the target

      if (!options.insertAt) options.insertAt = "bottom";
      var styles = listToStyles(list, options);
      addStylesToDom(styles, options);
      return function update(newList) {
        var mayRemove = [];

        for (var i = 0; i < styles.length; i++) {
          var item = styles[i];
          var domStyle = stylesInDom[item.id];
          domStyle.refs--;
          mayRemove.push(domStyle);
        }

        if (newList) {
          var newStyles = listToStyles(newList, options);
          addStylesToDom(newStyles, options);
        }

        for (var i = 0; i < mayRemove.length; i++) {
          var domStyle = mayRemove[i];

          if (domStyle.refs === 0) {
            for (var j = 0; j < domStyle.parts.length; j++) {
              domStyle.parts[j]();
            }

            delete stylesInDom[domStyle.id];
          }
        }
      };
    };

    function addStylesToDom(styles, options) {
      for (var i = 0; i < styles.length; i++) {
        var item = styles[i];
        var domStyle = stylesInDom[item.id];

        if (domStyle) {
          domStyle.refs++;

          for (var j = 0; j < domStyle.parts.length; j++) {
            domStyle.parts[j](item.parts[j]);
          }

          for (; j < item.parts.length; j++) {
            domStyle.parts.push(addStyle(item.parts[j], options));
          }
        } else {
          var parts = [];

          for (var j = 0; j < item.parts.length; j++) {
            parts.push(addStyle(item.parts[j], options));
          }

          stylesInDom[item.id] = {
            id: item.id,
            refs: 1,
            parts: parts
          };
        }
      }
    }

    function listToStyles(list, options) {
      var styles = [];
      var newStyles = {};

      for (var i = 0; i < list.length; i++) {
        var item = list[i];
        var id = options.base ? item[0] + options.base : item[0];
        var css = item[1];
        var media = item[2];
        var sourceMap = item[3];
        var part = {
          css: css,
          media: media,
          sourceMap: sourceMap
        };
        if (!newStyles[id]) styles.push(newStyles[id] = {
          id: id,
          parts: [part]
        });else newStyles[id].parts.push(part);
      }

      return styles;
    }

    function insertStyleElement(options, style) {
      var target = getElement(options.insertInto);

      if (!target) {
        throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
      }

      var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

      if (options.insertAt === "top") {
        if (!lastStyleElementInsertedAtTop) {
          target.insertBefore(style, target.firstChild);
        } else if (lastStyleElementInsertedAtTop.nextSibling) {
          target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
        } else {
          target.appendChild(style);
        }

        stylesInsertedAtTop.push(style);
      } else if (options.insertAt === "bottom") {
        target.appendChild(style);
      } else {
        throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
      }
    }

    function removeStyleElement(style) {
      if (style.parentNode === null) return false;
      style.parentNode.removeChild(style);
      var idx = stylesInsertedAtTop.indexOf(style);

      if (idx >= 0) {
        stylesInsertedAtTop.splice(idx, 1);
      }
    }

    function createStyleElement(options) {
      var style = document.createElement("style");
      options.attrs.type = "text/css";
      addAttrs(style, options.attrs);
      insertStyleElement(options, style);
      return style;
    }

    function createLinkElement(options) {
      var link = document.createElement("link");
      options.attrs.type = "text/css";
      options.attrs.rel = "stylesheet";
      addAttrs(link, options.attrs);
      insertStyleElement(options, link);
      return link;
    }

    function addAttrs(el, attrs) {
      Object.keys(attrs).forEach(function (key) {
        el.setAttribute(key, attrs[key]);
      });
    }

    function addStyle(obj, options) {
      var style, update, remove, result; // If a transform function was defined, run it on the css

      if (options.transform && obj.css) {
        result = options.transform(obj.css);

        if (result) {
          // If transform returns a value, use that instead of the original css.
          // This allows running runtime transformations on the css.
          obj.css = result;
        } else {
          // If the transform function returns a falsy value, don't add this css.
          // This allows conditional loading of css
          return function () {// noop
          };
        }
      }

      if (options.singleton) {
        var styleIndex = singletonCounter++;
        style = singleton || (singleton = createStyleElement(options));
        update = applyToSingletonTag.bind(null, style, styleIndex, false);
        remove = applyToSingletonTag.bind(null, style, styleIndex, true);
      } else if (obj.sourceMap && typeof URL === "function" && typeof URL.createObjectURL === "function" && typeof URL.revokeObjectURL === "function" && typeof Blob === "function" && typeof btoa === "function") {
        style = createLinkElement(options);
        update = updateLink.bind(null, style, options);

        remove = function remove() {
          removeStyleElement(style);
          if (style.href) URL.revokeObjectURL(style.href);
        };
      } else {
        style = createStyleElement(options);
        update = applyToTag.bind(null, style);

        remove = function remove() {
          removeStyleElement(style);
        };
      }

      update(obj);
      return function updateStyle(newObj) {
        if (newObj) {
          if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
            return;
          }

          update(obj = newObj);
        } else {
          remove();
        }
      };
    }

    var replaceText = function () {
      var textStore = [];
      return function (index, replacement) {
        textStore[index] = replacement;
        return textStore.filter(Boolean).join('\n');
      };
    }();

    function applyToSingletonTag(style, index, remove, obj) {
      var css = remove ? "" : obj.css;

      if (style.styleSheet) {
        style.styleSheet.cssText = replaceText(index, css);
      } else {
        var cssNode = document.createTextNode(css);
        var childNodes = style.childNodes;
        if (childNodes[index]) style.removeChild(childNodes[index]);

        if (childNodes.length) {
          style.insertBefore(cssNode, childNodes[index]);
        } else {
          style.appendChild(cssNode);
        }
      }
    }

    function applyToTag(style, obj) {
      var css = obj.css;
      var media = obj.media;

      if (media) {
        style.setAttribute("media", media);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        while (style.firstChild) {
          style.removeChild(style.firstChild);
        }

        style.appendChild(document.createTextNode(css));
      }
    }

    function updateLink(link, options, obj) {
      var css = obj.css;
      var sourceMap = obj.sourceMap;
      /*
          If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
          and there is no publicPath defined then lets turn convertToAbsoluteUrls
          on by default.  Otherwise default to the convertToAbsoluteUrls option
          directly
      */

      var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

      if (options.convertToAbsoluteUrls || autoFixUrls) {
        css = fixUrls(css);
      }

      if (sourceMap) {
        // http://stackoverflow.com/a/26603875
        css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
      }

      var blob = new Blob([css], {
        type: "text/css"
      });
      var oldSrc = link.href;
      link.href = URL.createObjectURL(blob);
      if (oldSrc) URL.revokeObjectURL(oldSrc);
    }
    /***/

  },
  /* 17 */

  /***/
  function (module, exports) {
    /**
     * When source maps are enabled, `style-loader` uses a link element with a data-uri to
     * embed the css on the page. This breaks all relative urls because now they are relative to a
     * bundle instead of the current page.
     *
     * One solution is to only use full urls, but that may be impossible.
     *
     * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
     *
     * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
     *
     */
    module.exports = function (css) {
      // get current location
      var location = typeof window !== "undefined" && window.location;

      if (!location) {
        throw new Error("fixUrls requires window.location");
      } // blank or null?


      if (!css || typeof css !== "string") {
        return css;
      }

      var baseUrl = location.protocol + "//" + location.host;
      var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/"); // convert each url(...)

      /*
      This regular expression is just a way to recursively match brackets within
      a string.
             /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
         (  = Start a capturing group
           (?:  = Start a non-capturing group
               [^)(]  = Match anything that isn't a parentheses
               |  = OR
               \(  = Match a start parentheses
                   (?:  = Start another non-capturing groups
                       [^)(]+  = Match anything that isn't a parentheses
                       |  = OR
                       \(  = Match a start parentheses
                           [^)(]*  = Match anything that isn't a parentheses
                       \)  = Match a end parentheses
                   )  = End Group
                *\) = Match anything and then a close parens
            )  = Close non-capturing group
            *  = Match anything
         )  = Close capturing group
       \)  = Match a close parens
             /gi  = Get all matches, not the first.  Be case insensitive.
       */

      var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function (fullMatch, origUrl) {
        // strip quotes (if they exist)
        var unquotedOrigUrl = origUrl.trim().replace(/^"(.*)"$/, function (o, $1) {
          return $1;
        }).replace(/^'(.*)'$/, function (o, $1) {
          return $1;
        }); // already a full url? no change

        if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
          return fullMatch;
        } // convert the url to a full url


        var newUrl;

        if (unquotedOrigUrl.indexOf("//") === 0) {
          //TODO: should we add protocol?
          newUrl = unquotedOrigUrl;
        } else if (unquotedOrigUrl.indexOf("/") === 0) {
          // path should be relative to the base url
          newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
        } else {
          // path should be relative to current directory
          newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
        } // send back the fixed url(...)


        return "url(" + JSON.stringify(newUrl) + ")";
      }); // send back the fixed css

      return fixedCss;
    };
    /***/

  },
  /* 18 */

  /***/
  function (module, exports) {
    module.exports = "#version 300 es\n#define POSITION_LOCATION 0\n\nprecision highp float;\nprecision highp int;\n\nuniform mat4 u_MVP;\n\nlayout(location = POSITION_LOCATION) in vec3 position;\n\nvoid main()\n{\n    gl_Position = u_MVP * vec4(position, 1.0) ;\n}";
    /***/
  },
  /* 19 */

  /***/
  function (module, exports) {
    module.exports = "#version 300 es\n#define FRAG_COLOR_LOCATION 0\n\nprecision highp float;\nprecision highp int;\n\nlayout(location = FRAG_COLOR_LOCATION) out vec4 color;\n\nvoid main()\n{\n    color = vec4(1.0, 0.0, 0.0, 1.0);\n}";
    /***/
  },
  /* 20 */

  /***/
  function (module, exports) {
    module.exports = "#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform mat4 u_MVP;\n\nlayout(location = 0) in vec3 position;\n\nout vec3 texcoord;\n\nvoid main()\n{\n    vec4 pos = u_MVP * vec4(position, 1.0);\n    gl_Position = pos.xyww;\n    texcoord = position;\n}";
    /***/
  },
  /* 21 */

  /***/
  function (module, exports) {
    module.exports = "#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform samplerCube u_environment;\n\nin vec3 texcoord;\n\nout vec4 color;\n\nvoid main()\n{\n    color = texture(u_environment, texcoord);\n}";
    /***/
  },
  /* 22 */

  /***/
  function (module, exports) {
    module.exports = "#define POSITION_LOCATION 0\r\n#define NORMAL_LOCATION 1\r\n#define TEXCOORD_0_LOCATION 2\r\n#define JOINTS_0_LOCATION 3\r\n#define JOINTS_1_LOCATION 5\r\n#define WEIGHTS_0_LOCATION 4\r\n#define WEIGHTS_1_LOCATION 6\r\n#define TANGENT_LOCATION 7\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nuniform mat4 u_MVP;\r\nuniform mat4 u_MV;\r\nuniform mat4 u_MVNormal;\r\n\r\n#ifdef HAS_SKIN\r\nuniform JointMatrix\r\n{\r\n    mat4 matrix[65];\r\n} u_jointMatrix;\r\n#endif\r\n\r\nlayout(location = POSITION_LOCATION) in vec3 position;\r\nlayout(location = NORMAL_LOCATION) in vec3 normal;\r\nlayout(location = TEXCOORD_0_LOCATION) in vec2 uv;\r\n\r\n#ifdef HAS_SKIN\r\nlayout(location = JOINTS_0_LOCATION) in vec4 joint0;\r\nlayout(location = WEIGHTS_0_LOCATION) in vec4 weight0;\r\n#ifdef SKIN_VEC8\r\nlayout(location = JOINTS_1_LOCATION) in vec4 joint1;\r\nlayout(location = WEIGHTS_1_LOCATION) in vec4 weight1;\r\n#endif\r\n#endif\r\n\r\n\r\n// #ifdef HAS_TANGENTS\r\n// layout(location = TANGENT_LOCATION) in vec4 tangent;\r\n\r\n// out vec3 v_tangentW;\r\n// out vec3 v_bitangentW;\r\n// #endif\r\n\r\n\r\nout vec3 v_position;\r\nout vec3 v_normal;\r\nout vec2 v_uv;\r\n\r\nvoid main()\r\n{\r\n\r\n#ifdef HAS_SKIN\r\n    mat4 skinMatrix = \r\n        weight0.x * u_jointMatrix.matrix[int(joint0.x)] +\r\n        weight0.y * u_jointMatrix.matrix[int(joint0.y)] +\r\n        weight0.z * u_jointMatrix.matrix[int(joint0.z)] +\r\n        weight0.w * u_jointMatrix.matrix[int(joint0.w)];\r\n#ifdef SKIN_VEC8\r\n    skinMatrix +=\r\n        weight1.x * u_jointMatrix.matrix[int(joint1.x)] +\r\n        weight1.y * u_jointMatrix.matrix[int(joint1.y)] +\r\n        weight1.z * u_jointMatrix.matrix[int(joint1.z)] +\r\n        weight1.w * u_jointMatrix.matrix[int(joint1.w)];\r\n#endif\r\n#endif\r\n\r\n    v_uv = uv;\r\n\r\n#ifdef HAS_SKIN\r\n    v_normal = normalize(( u_MVNormal * transpose(inverse(skinMatrix)) * vec4(normal, 0)).xyz);\r\n    vec4 pos = u_MV * skinMatrix * vec4(position, 1.0);\r\n    gl_Position = u_MVP * skinMatrix * vec4(position, 1.0);\r\n#else\r\n    v_normal = normalize((u_MVNormal * vec4(normal, 0)).xyz);\r\n    vec4 pos = u_MV * vec4(position, 1.0);\r\n    gl_Position = u_MVP * vec4(position, 1.0);\r\n#endif\r\n\r\n    v_position = vec3(pos.xyz) / pos.w;\r\n    \r\n    \r\n}";
    /***/
  },
  /* 23 */

  /***/
  function (module, exports) {
    module.exports = "#define FRAG_COLOR_LOCATION 0\r\n\r\n// reference: https://github.com/KhronosGroup/glTF-WebGL-PBR/blob/master/shaders/pbr-frag.glsl\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\n// IBL\r\nuniform samplerCube u_DiffuseEnvSampler;\r\nuniform samplerCube u_SpecularEnvSampler;\r\nuniform sampler2D u_brdfLUT;\r\n\r\n// Metallic-roughness material\r\n\r\n// base color\r\nuniform vec4 u_baseColorFactor;\r\n#ifdef HAS_BASECOLORMAP\r\nuniform sampler2D u_baseColorTexture;\r\n#endif\r\n\r\n// normal map\r\n#ifdef HAS_NORMALMAP\r\nuniform sampler2D u_normalTexture;\r\nuniform float u_normalTextureScale;\r\n#endif\r\n\r\n// emmisve map\r\n#ifdef HAS_EMISSIVEMAP\r\nuniform sampler2D u_emissiveTexture;\r\nuniform vec3 u_emissiveFactor;\r\n#endif\r\n\r\n// metal roughness\r\n#ifdef HAS_METALROUGHNESSMAP\r\nuniform sampler2D u_metallicRoughnessTexture;\r\n#endif\r\nuniform float u_metallicFactor;\r\nuniform float u_roughnessFactor;\r\n\r\n// occlusion texture\r\n#ifdef HAS_OCCLUSIONMAP\r\nuniform sampler2D u_occlusionTexture;\r\nuniform float u_occlusionStrength;\r\n#endif\r\n\r\nin vec3 v_position;\r\nin vec3 v_normal;\r\nin vec2 v_uv;\r\n\r\nlayout(location = FRAG_COLOR_LOCATION) out vec4 frag_color;\r\n\r\nstruct PBRInfo\r\n{\r\n    float NdotL;                  // cos angle between normal and light direction\r\n    float NdotV;                  // cos angle between normal and view direction\r\n    float NdotH;                  // cos angle between normal and half vector\r\n    float LdotH;                  // cos angle between light direction and half vector\r\n    float VdotH;                  // cos angle between view direction and half vector\r\n    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)\r\n    float metalness;              // metallic value at the surface\r\n    vec3 reflectance0;            // full reflectance color (normal incidence angle)\r\n    vec3 reflectance90;           // reflectance color at grazing angle\r\n    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])\r\n    vec3 diffuseColor;            // color contribution from diffuse lighting\r\n    vec3 specularColor;           // color contribution from specular lighting\r\n};\r\n\r\n\r\n// vec3 applyNormalMap(vec3 geomnor, vec3 normap) {\r\n//     normap = normap * 2.0 - 1.0;\r\n//     vec3 up = normalize(vec3(0.01, 1, 0.01));\r\n//     vec3 surftan = normalize(cross(geomnor, up));\r\n//     vec3 surfbinor = cross(geomnor, surftan);\r\n//     return normap.y * surftan * u_normalTextureScale + normap.x * surfbinor * u_normalTextureScale + normap.z * geomnor;\r\n// }\r\n\r\nconst float M_PI = 3.141592653589793;\r\nconst float c_MinRoughness = 0.04;\r\n\r\n\r\n// vec3 getNormal()\r\n// {\r\n\r\n// #ifdef HAS_NORMALMAP\r\n// #ifdef HAS_TANGENTS\r\n//     vec3 n = texture(u_normalTexture, v_uv).rgb;\r\n//     n = normalize(v_TBN * (2.0 * n - 1.0) - vec3(u_normalTextureScale, u_normalTextureScale, 1.0));\r\n// #else\r\n//     vec3 n = applyNormalMap( v_normal, texture(u_normalTexture, v_uv).rgb );\r\n// #endif\r\n// #else\r\n//     vec3 n = v_normal;\r\n// #endif\r\n//     return n;\r\n\r\n// #endif\r\n// }\r\n\r\n// Find the normal for this fragment, pulling either from a predefined normal map\r\n// or from the interpolated mesh normal and tangent attributes.\r\nvec3 getNormal()\r\n{\r\n\r\n// #ifdef HAS_NORMALMAP\r\n//     vec3 n = applyNormalMap( v_normal, texture(u_normalTexture, v_uv).rgb );\r\n// #else\r\n//     vec3 n = v_normal;\r\n// #endif\r\n//     return n;\r\n\r\n\r\n    // Retrieve the tangent space matrix\r\n// #ifndef HAS_TANGENTS\r\n    vec3 pos_dx = dFdx(v_position);\r\n    vec3 pos_dy = dFdy(v_position);\r\n    vec3 tex_dx = dFdx(vec3(v_uv, 0.0));\r\n    vec3 tex_dy = dFdy(vec3(v_uv, 0.0));\r\n    vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\r\n\r\n    vec3 ng = v_normal;\r\n// #ifdef HAS_NORMALS\r\n//     vec3 ng = normalize(v_normal);\r\n// #else\r\n//     vec3 ng = cross(pos_dx, pos_dy);\r\n// #endif\r\n\r\n    t = normalize(t - ng * dot(ng, t));\r\n    vec3 b = normalize(cross(ng, t));\r\n    mat3 tbn = mat3(t, b, ng);\r\n// #else // HAS_TANGENTS\r\n    // mat3 tbn = v_TBN;\r\n// #endif\r\n\r\n// TODO: TANGENTS\r\n\r\n#ifdef HAS_NORMALMAP\r\n    vec3 n = texture(u_normalTexture, v_uv).rgb;\r\n    n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_normalTextureScale, u_normalTextureScale, 1.0)));\r\n#else\r\n    vec3 n = tbn[2].xyz;\r\n#endif\r\n\r\n    return n;\r\n}\r\n\r\nvec3 getIBLContribution(PBRInfo pbrInputs, vec3 n, vec3 reflection)\r\n{\r\n    // float mipCount = 9.0; // resolution of 512x512\r\n    // float mipCount = 10.0; // resolution of 1024x1024\r\n    float mipCount = 10.0; // resolution of 256x256\r\n    float lod = (pbrInputs.perceptualRoughness * mipCount);\r\n    // retrieve a scale and bias to F0. See [1], Figure 3\r\n    vec3 brdf = texture(u_brdfLUT, vec2(pbrInputs.NdotV, 1.0 - pbrInputs.perceptualRoughness)).rgb;\r\n    vec3 diffuseLight = texture(u_DiffuseEnvSampler, n).rgb;\r\n\r\n// #ifdef USE_TEX_LOD\r\n    vec3 specularLight = texture(u_SpecularEnvSampler, reflection, lod).rgb;\r\n// #else\r\n    // vec3 specularLight = texture(u_SpecularEnvSampler, reflection).rgb;\r\n// #endif\r\n\r\n    vec3 diffuse = diffuseLight * pbrInputs.diffuseColor;\r\n    vec3 specular = specularLight * (pbrInputs.specularColor * brdf.x + brdf.y);\r\n\r\n    // // For presentation, this allows us to disable IBL terms\r\n    // diffuse *= u_ScaleIBLAmbient.x;\r\n    // specular *= u_ScaleIBLAmbient.y;\r\n\r\n    return diffuse + specular;\r\n}\r\n\r\n// Basic Lambertian diffuse\r\n// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog\r\n// See also [1], Equation 1\r\nvec3 diffuse(PBRInfo pbrInputs)\r\n{\r\n    return pbrInputs.diffuseColor / M_PI;\r\n}\r\n\r\n\r\n// The following equation models the Fresnel reflectance term of the spec equation (aka F())\r\n// Implementation of fresnel from [4], Equation 15\r\nvec3 specularReflection(PBRInfo pbrInputs)\r\n{\r\n    return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);\r\n}\r\n\r\n\r\n// This calculates the specular geometric attenuation (aka G()),\r\n// where rougher material will reflect less light back to the viewer.\r\n// This implementation is based on [1] Equation 4, and we adopt their modifications to\r\n// alphaRoughness as input as originally proposed in [2].\r\nfloat geometricOcclusion(PBRInfo pbrInputs)\r\n{\r\n    float NdotL = pbrInputs.NdotL;\r\n    float NdotV = pbrInputs.NdotV;\r\n    float r = pbrInputs.alphaRoughness;\r\n\r\n    float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));\r\n    float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));\r\n    return attenuationL * attenuationV;\r\n}\r\n\r\n\r\n// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())\r\n// Implementation from \"Average Irregularity Representation of a Roughened Surface for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz\r\n// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.\r\nfloat microfacetDistribution(PBRInfo pbrInputs)\r\n{\r\n    float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;\r\n    float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;\r\n    return roughnessSq / (M_PI * f * f);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nvoid main()\r\n{\r\n    float perceptualRoughness = u_roughnessFactor;\r\n    float metallic = u_metallicFactor;\r\n\r\n#ifdef HAS_METALROUGHNESSMAP\r\n    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.\r\n    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data\r\n    vec4 mrSample = texture(u_metallicRoughnessTexture, v_uv);\r\n    perceptualRoughness = mrSample.g * perceptualRoughness;\r\n    metallic = mrSample.b * metallic;\r\n#endif\r\n    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);\r\n    metallic = clamp(metallic, 0.0, 1.0);\r\n    // Roughness is authored as perceptual roughness; as is convention,\r\n    // convert to material roughness by squaring the perceptual roughness [2].\r\n    float alphaRoughness = perceptualRoughness * perceptualRoughness;\r\n\r\n\r\n    // The albedo may be defined from a base texture or a flat color\r\n#ifdef HAS_BASECOLORMAP\r\n    vec4 baseColor = texture(u_baseColorTexture, v_uv) * u_baseColorFactor;\r\n#else\r\n    vec4 baseColor = u_baseColorFactor;\r\n#endif\r\n\r\n\r\n\r\n    vec3 f0 = vec3(0.04);\r\n    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);\r\n    diffuseColor *= 1.0 - metallic;\r\n    vec3 specularColor = mix(f0, baseColor.rgb, metallic);\r\n\r\n    // Compute reflectance.\r\n    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\r\n\r\n\r\n    // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.\r\n    // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.\r\n    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);\r\n    vec3 specularEnvironmentR0 = specularColor.rgb;\r\n    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;\r\n\r\n\r\n    vec3 n = getNormal();                             // normal at surface point\r\n    // vec3 v = vec3( 0.0, 0.0, 1.0 );        // Vector from surface point to camera\r\n    vec3 v = normalize(-v_position);                       // Vector from surface point to camera\r\n    // vec3 l = normalize(u_LightDirection);             // Vector from surface point to light\r\n    vec3 l = normalize(vec3( 1.0, 1.0, 1.0 ));             // Vector from surface point to light\r\n    // vec3 l = vec3( 0.0, 0.0, 1.0 );             // Vector from surface point to light\r\n    vec3 h = normalize(l+v);                          // Half vector between both l and v\r\n    vec3 reflection = -normalize(reflect(v, n));\r\n\r\n    float NdotL = clamp(dot(n, l), 0.001, 1.0);\r\n    float NdotV = abs(dot(n, v)) + 0.001;\r\n    float NdotH = clamp(dot(n, h), 0.0, 1.0);\r\n    float LdotH = clamp(dot(l, h), 0.0, 1.0);\r\n    float VdotH = clamp(dot(v, h), 0.0, 1.0);\r\n\r\n    PBRInfo pbrInputs = PBRInfo(\r\n        NdotL,\r\n        NdotV,\r\n        NdotH,\r\n        LdotH,\r\n        VdotH,\r\n        perceptualRoughness,\r\n        metallic,\r\n        specularEnvironmentR0,\r\n        specularEnvironmentR90,\r\n        alphaRoughness,\r\n        diffuseColor,\r\n        specularColor\r\n    );\r\n\r\n    // Calculate the shading terms for the microfacet specular shading model\r\n    vec3 F = specularReflection(pbrInputs);\r\n    float G = geometricOcclusion(pbrInputs);\r\n    float D = microfacetDistribution(pbrInputs);\r\n\r\n    // Calculation of analytical lighting contribution\r\n    vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);\r\n    vec3 specContrib = max(vec3(0.0), F * G * D / (4.0 * NdotL * NdotV));\r\n    // vec3 color = NdotL * u_LightColor * (diffuseContrib + specContrib);\r\n    vec3 color = NdotL * (diffuseContrib + specContrib);    // assume light color vec3(1, 1, 1)\r\n\r\n    // Calculate lighting contribution from image based lighting source (IBL)\r\n// #ifdef USE_IBL\r\n    color += getIBLContribution(pbrInputs, n, reflection);\r\n// #endif\r\n\r\n\r\n    // Apply optional PBR terms for additional (optional) shading\r\n#ifdef HAS_OCCLUSIONMAP\r\n    float ao = texture(u_occlusionTexture, v_uv).r;\r\n    color = mix(color, color * ao, u_occlusionStrength);\r\n#endif\r\n\r\n#ifdef HAS_EMISSIVEMAP\r\n    vec3 emissive = texture(u_emissiveTexture, v_uv).rgb * u_emissiveFactor;\r\n    color += emissive;\r\n#endif\r\n\r\n    // // This section uses mix to override final color for reference app visualization\r\n    // // of various parameters in the lighting equation.\r\n    // color = mix(color, F, u_ScaleFGDSpec.x);\r\n    // color = mix(color, vec3(G), u_ScaleFGDSpec.y);\r\n    // color = mix(color, vec3(D), u_ScaleFGDSpec.z);\r\n    // color = mix(color, specContrib, u_ScaleFGDSpec.w);\r\n\r\n    // color = mix(color, diffuseContrib, u_ScaleDiffBaseMR.x);\r\n    // color = mix(color, baseColor.rgb, u_ScaleDiffBaseMR.y);\r\n    // color = mix(color, vec3(metallic), u_ScaleDiffBaseMR.z);\r\n    // color = mix(color, vec3(perceptualRoughness), u_ScaleDiffBaseMR.w);\r\n\r\n    frag_color = vec4(color, baseColor.a);\r\n}";
    /***/
  }]);
}

/***/ }),

/***/ "gY+e":
/*!**********************************************************!*\
  !*** ./src/gltf/environment/diffuse/bakedDiffuse_02.jpg ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "3b898ca1e9c10eea638f9ee3af3ee1dd.jpg";

/***/ }),

/***/ "ktWD":
/*!**********************************************!*\
  !*** ./src/gltf/environment/skyImage/nx.jpg ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "dd5e2330c10475578aefa5889166a7c7.jpg";

/***/ }),

/***/ "lKBT":
/*!**********************************************!*\
  !*** ./src/gltf/environment/skyImage/py.jpg ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "f54de13eb433ae2f823b0c7cf3d5ab22.jpg";

/***/ }),

/***/ "sXTF":
/*!**********************************************!*\
  !*** ./src/gltf/environment/skyImage/pz.jpg ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "6e604290eae408ae7a2e9ca8c231fa4d.jpg";

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,