(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["cluser"],{

/***/ "sGV4":
/*!*****************************!*\
  !*** ./src/cluser/index.ts ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "VphZ");

// 所有的叶子节点位于同一级
const chartWidth = window.document.body.clientWidth;
const color = d3__WEBPACK_IMPORTED_MODULE_0__["hsl"]('#fea').brighter(0.3);
const svg = d3__WEBPACK_IMPORTED_MODULE_0__["select"]('body')
    .append('svg')
    .attr('class', 'chart')
    .style('background', color.toString())
    .style('max-width', '800')
    .style('height', 'auto');
d3__WEBPACK_IMPORTED_MODULE_0__["json"]('./static/tree.json').then((data) => {
    // 生成hierarchy层级排序数据
    const hc = d3__WEBPACK_IMPORTED_MODULE_0__["hierarchy"](data, (d) => d.children).sort((a, b) => (a.height - b.height) || a.data.name.localeCompare(b.data.name));
    const nodeMargin = 10; // 设置树节点的上下间距
    const nodeSpan = chartWidth / (hc.height + 3); // 设置树连线的长度
    const hcData = d3__WEBPACK_IMPORTED_MODULE_0__["cluster"]().nodeSize([nodeMargin, nodeSpan])(hc);
    // 绘制连线
    const link = svg.append('g')
        .attr('fill', 'none')
        .attr('stroke', '#555')
        .attr('stroke-opacity', 0.4)
        .attr('stroke-width', 1.5)
        .selectAll('path')
        .data(hcData.links())
        .join('path')
        .attr('d', (d) => `
            M${d.target.y},${d.target.x}
            C${d.source.y + nodeSpan / 2},${d.target.x}
            ${d.source.y + nodeSpan / 2},${d.source.x}
            ${d.source.y},${d.source.x}
        `);
    const node = svg.append('g')
        .attr('stroke-linejoin', 'round')
        .attr('stroke-width', 3)
        .selectAll('g')
        .data(hcData.descendants())
        .join('g')
        .attr('transform', (d) => `translate(${d.y},${d.x})`);
    // 绘制圆点
    node.append('circle')
        .attr('fill', d => d.children ? '#555' : '#999')
        .attr('r', 2.5);
    // 绘制文本
    node.append('text')
        .attr('dy', '0.31em')
        .attr('x', (d) => d.children ? -6 : 6)
        .text((d) => d.data.name)
        .filter((d) => d.children)
        .attr('text-anchor', 'end')
        .clone(true).lower()
        .attr('stroke', 'white');
    // 设置svg视口大小
    svg.attr('viewBox', function () {
        const { x, y, width, height } = this.getBBox();
        return [x, y, width, height];
    });
});


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY2x1c2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQXlCO0FBRXpCLGVBQWU7QUFDZixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDcEQsTUFBTSxLQUFLLEdBQUcsc0NBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0MsTUFBTSxHQUFHLEdBQUcseUNBQVMsQ0FBQyxNQUFNLENBQUM7S0FDeEIsTUFBTSxDQUFDLEtBQUssQ0FBQztLQUNiLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDO0tBQ3RCLEtBQUssQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ3JDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDO0tBQ3pCLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFFN0IsdUNBQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO0lBQ3hDLG9CQUFvQjtJQUNwQixNQUFNLEVBQUUsR0FBRyw0Q0FBWSxDQUFDLElBQUksRUFBRSxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN0SSxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsQ0FBRSxhQUFhO0lBQ3JDLE1BQU0sUUFBUSxHQUFHLFVBQVUsR0FBRyxD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RTtRQUNoQixNQUFNLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzdDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFRLENBQUMsQ0FBQztBQUNkLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImNsdXNlci5kOWY4NjVmYmJiYzgyOGFkZDVmNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcblxuLy8g5omA5pyJ55qE5Y+25a2Q6IqC54K55L2N5LqO5ZCM5LiA57qnXG5jb25zdCBjaGFydFdpZHRoID0gd2luZG93LmRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7XG5jb25zdCBjb2xvciA9IGQzLmhzbCgnI2ZlYScpLmJyaWdodGVyKDAuMyk7XG5jb25zdCBzdmcgPSBkMy5zZWxlY3QoJ2JvZHknKVxuICAgIC5hcHBlbmQoJ3N2ZycpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ2NoYXJ0JylcbiAgICAuc3R5bGUoJ2JhY2tncm91bmQnLCBjb2xvci50b1N0cmluZygpKVxuICAgIC5zdHlsZSgnbWF4LXdpZHRoJywgJzgwMCcpXG4gICAgLnN0eWxlKCdoZWlnaHQnLCAnYXV0bycpO1xuXG5kMy5qc29uKCcuL3N0YXRpYy90cmVlLmpzb24nKS50aGVuKChkYXRhKSA9PiB7XG4gICAgLy8g55Sf5oiQaGllcmFyY2h55bGC57qn5o6S5bqP5pWw5o2uXG4gICAgY29uc3QgaGMgPSBkMy5oaWVyYXJjaHkoZGF0YSwgKGQ6IGFueSkgPT4gZC5jaGlsZHJlbikuc29ydCgoYSwgYikgPT4gKGEuaGVpZ2h0IC0gYi5oZWlnaHQpIHx8IGEuZGF0YS5uYW1lLmxvY2FsZUNvbXBhcmUoYi5kYXRhLm5hbWUpKTtcbiAgICBjb25zdCBub2RlTWFyZ2luID0gMTA7ICAvLyDorr7nva7moJHoioLngrnnmoTkuIrkuIvpl7Tot51cbiAgICBjb25zdCBub2RlU3BhbiA9IGNoYXJ0V2lkdGggLyAoaGMuaGVpZ2h0ICsgMyk7IC8vIOiuvue9ruagkei/nue6v+eahOmVv+W6plxuICAgIGNvbnN0IGhjRGF0YSA9IGQzLmNsdXN0ZXIoKS5ub2RlU2l6ZShbbm9kZU1hcmdpbiwgbm9kZVNwYW5dKShoYyk7XG5cbiAgICAvLyDnu5jliLbov57nur9cbiAgICBjb25zdCBsaW5rID0gc3ZnLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKVxuICAgICAgICAuYXR0cignc3Ryb2tlJywgJyM1NTUnKVxuICAgICAgICAuYXR0cignc3Ryb2tlLW9wYWNpdHknLCAwLjQpXG4gICAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAxLjUpXG4gICAgICAgIC5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgICAgICAuZGF0YShoY0RhdGEubGlua3MoKSlcbiAgICAgICAgLmpvaW4oJ3BhdGgnKVxuICAgICAgICAuYXR0cignZCcsIChkKSA9PiBgXG4gICAgICAgICAgICBNJHtkLnRhcmdldC55fSwke2QudGFyZ2V0Lnh9XG4gICAgICAgICAgICBDJHtkLnNvdXJjZS55ICsgbm9kZVNwYW4gLyAyfSwke2QudGFyZ2V0Lnh9XG4gICAgICAgICAgICAke2Quc291cmNlLnkgKyBub2RlU3BhbiAvIDJ9LCR7ZC5zb3VyY2UueH1cbiAgICAgICAgICAgICR7ZC5zb3VyY2UueX0sJHtkLnNvdXJjZS54fVxuICAgICAgICBgKTtcblxuICAgIGNvbnN0IG5vZGUgPSBzdmcuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoJ3N0cm9rZS1saW5lam9pbicsICdyb3VuZCcpXG4gICAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAzKVxuICAgICAgICAuc2VsZWN0QWxsKCdnJylcbiAgICAgICAgLmRhdGEoaGNEYXRhLmRlc2NlbmRhbnRzKCkpXG4gICAgICAgIC5qb2luKCdnJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIChkKSA9PiBgdHJhbnNsYXRlKCR7ZC55fSwke2QueH0pYCk7XG5cbiAgICAvLyDnu5jliLblnIbngrlcbiAgICBub2RlLmFwcGVuZCgnY2lyY2xlJylcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCBkID0+IGQuY2hpbGRyZW4gPyAnIzU1NScgOiAnIzk5OScpXG4gICAgICAgIC5hdHRyKCdyJywgMi41KTtcblxuICAgIC8vIOe7mOWItuaWh+acrFxuICAgIG5vZGUuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgLmF0dHIoJ2R5JywgJzAuMzFlbScpXG4gICAgICAgIC5hdHRyKCd4JywgKGQpID0+IGQuY2hpbGRyZW4gPyAtNiA6IDYpXG4gICAgICAgIC50ZXh0KChkOiBhbnkpID0+IGQuZGF0YS5uYW1lKVxuICAgICAgICAuZmlsdGVyKChkOiBhbnkpID0+IGQuY2hpbGRyZW4pXG4gICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdlbmQnKVxuICAgICAgICAuY2xvbmUodHJ1ZSkubG93ZXIoKVxuICAgICAgICAuYXR0cignc3Ryb2tlJywgJ3doaXRlJyk7XG5cbiAgICAvLyDorr7nva5zdmfop4blj6PlpKflsI9cbiAgICBzdmcuYXR0cigndmlld0JveCcsIGZ1bmN0aW9uKHRoaXM6IGFueSkge1xuICAgICAgICBjb25zdCB7eCwgeSwgd2lkdGgsIGhlaWdodH0gPSB0aGlzLmdldEJCb3goKTtcbiAgICAgICAgcmV0dXJuIFt4LCB5LCB3aWR0aCwgaGVpZ2h0XTtcbiAgICB9IGFzIGFueSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=